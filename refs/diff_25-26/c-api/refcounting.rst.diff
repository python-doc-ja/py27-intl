--- rest25/c-api/refcounting.rst	2008-10-21 04:56:47.144842244 +0900
+++ rest26/c-api/refcounting.rst	2008-10-21 05:03:04.525191243 +0900
@@ -55,20 +55,20 @@
    which case the macro has no effect; otherwise the effect is the same as for
    :cfunc:`Py_DECREF`, except that the argument is also set to *NULL*.  The warning
    for :cfunc:`Py_DECREF` does not apply with respect to the object passed because
    the macro carefully uses a temporary variable and sets the argument to *NULL*
    before decrementing its reference count.
 
    It is a good idea to use this macro whenever decrementing the value of a
    variable that might be traversed during garbage collection.
 
    .. versionadded:: 2.4
 
 The following functions are for runtime dynamic embedding of Python:
-:cfunc:`Py_IncRef(PyObject \*o)`, :cfunc:`Py_DecRef(PyObject \*o)`. They are
+``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are
 simply exported function versions of :cfunc:`Py_XINCREF` and
 :cfunc:`Py_XDECREF`, respectively.
 
 The following functions or macros are only for use within the interpreter core:
 :cfunc:`_Py_Dealloc`, :cfunc:`_Py_ForgetReference`, :cfunc:`_Py_NewReference`,
 as well as the global variable :cdata:`_Py_RefTotal`.
 
