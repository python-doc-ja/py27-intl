--- rest25/c-api/init.rst	2008-10-21 04:56:46.472837932 +0900
+++ rest26/c-api/init.rst	2008-10-21 05:03:04.505232277 +0900
@@ -93,33 +93,34 @@
       single: stdin (in module sys)
 
    Create a new sub-interpreter.  This is an (almost) totally separate environment
    for the execution of Python code.  In particular, the new interpreter has
    separate, independent versions of all imported modules, including the
    fundamental modules :mod:`__builtin__`, :mod:`__main__` and :mod:`sys`.  The
    table of loaded modules (``sys.modules``) and the module search path
    (``sys.path``) are also separate.  The new environment has no ``sys.argv``
    variable.  It has new standard I/O stream file objects ``sys.stdin``,
    ``sys.stdout`` and ``sys.stderr`` (however these refer to the same underlying
    :ctype:`FILE` structures in the C library).
 
-   The return value points to the first thread state created in the new sub-
-   interpreter.  This thread state is made in the current thread state.  Note that
-   no actual thread is created; see the discussion of thread states below.  If
-   creation of the new interpreter is unsuccessful, *NULL* is returned; no
-   exception is set since the exception state is stored in the current thread state
-   and there may not be a current thread state.  (Like all other Python/C API
-   functions, the global interpreter lock must be held before calling this function
-   and is still held when it returns; however, unlike most other Python/C API
-   functions, there needn't be a current thread state on entry.)
+   The return value points to the first thread state created in the new
+   sub-interpreter.  This thread state is made in the current thread state.
+   Note that no actual thread is created; see the discussion of thread states
+   below.  If creation of the new interpreter is unsuccessful, *NULL* is
+   returned; no exception is set since the exception state is stored in the
+   current thread state and there may not be a current thread state.  (Like all
+   other Python/C API functions, the global interpreter lock must be held before
+   calling this function and is still held when it returns; however, unlike most
+   other Python/C API functions, there needn't be a current thread state on
+   entry.)
 
    .. index::
       single: Py_Finalize()
       single: Py_Initialize()
 
    Extension modules are shared between (sub-)interpreters as follows: the first
    time a particular extension is imported, it is initialized normally, and a
    (shallow) copy of its module's dictionary is squirreled away.  When the same
    extension is imported by another (sub-)interpreter, a new module is initialized
    and filled with the contents of this copy; the extension's ``init`` function is
    not called.  Note that this is different from what happens when an extension is
    imported after the interpreter has been completely re-initialized by calling
@@ -160,33 +161,33 @@
    interpreter lock must be held before calling this function and is still held
    when it returns.)  :cfunc:`Py_Finalize` will destroy all sub-interpreters that
    haven't been explicitly destroyed at that point.
 
 
 .. cfunction:: void Py_SetProgramName(char *name)
 
    .. index::
       single: Py_Initialize()
       single: main()
       single: Py_GetPath()
 
-   This function should be called before :cfunc:`Py_Initialize` is called for the
-   first time, if it is called at all.  It tells the interpreter the value of the
-   ``argv[0]`` argument to the :cfunc:`main` function of the program.  This is used
-   by :cfunc:`Py_GetPath` and some other functions below to find the Python run-
-   time libraries relative to the interpreter executable.  The default value is
-   ``'python'``.  The argument should point to a zero-terminated character string
-   in static storage whose contents will not change for the duration of the
-   program's execution.  No code in the Python interpreter will change the contents
-   of this storage.
+   This function should be called before :cfunc:`Py_Initialize` is called for
+   the first time, if it is called at all.  It tells the interpreter the value
+   of the ``argv[0]`` argument to the :cfunc:`main` function of the program.
+   This is used by :cfunc:`Py_GetPath` and some other functions below to find
+   the Python run-time libraries relative to the interpreter executable.  The
+   default value is ``'python'``.  The argument should point to a
+   zero-terminated character string in static storage whose contents will not
+   change for the duration of the program's execution.  No code in the Python
+   interpreter will change the contents of this storage.
 
 
 .. cfunction:: char* Py_GetProgramName()
 
    .. index:: single: Py_SetProgramName()
 
    Return the program name set with :cfunc:`Py_SetProgramName`, or the default.
    The returned string points into static storage; the caller should not modify its
    value.
 
 
 .. cfunction:: char* Py_GetPrefix()
@@ -195,25 +196,25 @@
    through a number of complicated rules from the program name set with
    :cfunc:`Py_SetProgramName` and some environment variables; for example, if the
    program name is ``'/usr/local/bin/python'``, the prefix is ``'/usr/local'``. The
    returned string points into static storage; the caller should not modify its
    value.  This corresponds to the :makevar:`prefix` variable in the top-level
    :file:`Makefile` and the :option:`--prefix` argument to the :program:`configure`
    script at build time.  The value is available to Python code as ``sys.prefix``.
    It is only useful on Unix.  See also the next function.
 
 
 .. cfunction:: char* Py_GetExecPrefix()
 
-   Return the *exec-prefix* for installed platform-*de*pendent files.  This is
+   Return the *exec-prefix* for installed platform-*dependent* files.  This is
    derived through a number of complicated rules from the program name set with
    :cfunc:`Py_SetProgramName` and some environment variables; for example, if the
    program name is ``'/usr/local/bin/python'``, the exec-prefix is
    ``'/usr/local'``.  The returned string points into static storage; the caller
    should not modify its value.  This corresponds to the :makevar:`exec_prefix`
    variable in the top-level :file:`Makefile` and the :option:`--exec-prefix`
    argument to the :program:`configure` script at build  time.  The value is
    available to Python code as ``sys.exec_prefix``.  It is only useful on Unix.
 
    Background: The exec-prefix differs from the prefix when platform dependent
    files (such as executables and shared libraries) are installed in a different
    directory tree.  In a typical installation, platform dependent files may be
@@ -250,31 +251,31 @@
    to Python code as ``sys.executable``.
 
 
 .. cfunction:: char* Py_GetPath()
 
    .. index::
       triple: module; search; path
       single: path (in module sys)
 
    Return the default module search path; this is computed from the  program name
    (set by :cfunc:`Py_SetProgramName` above) and some environment variables.  The
    returned string consists of a series of directory names separated by a platform
-   dependent delimiter character.  The delimiter character is ``':'`` on Unixand
+   dependent delimiter character.  The delimiter character is ``':'`` on Unix and
    Mac OS X, ``';'`` on Windows.  The returned string points into static storage;
    the caller should not modify its value.  The value is available to Python code
    as the list ``sys.path``, which may be modified to change the future search path
    for loaded modules.
 
-   .. % XXX should give the exact rules
+   .. XXX should give the exact rules
 
 
 .. cfunction:: const char* Py_GetVersion()
 
    Return the version of this Python interpreter.  This is a string that looks
    something like ::
 
       "1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"
 
    .. index:: single: version (in module sys)
 
    The first word (up to the first space character) is the current Python version;
@@ -351,46 +352,44 @@
       single: main()
       single: Py_FatalError()
       single: argv (in module sys)
 
    Set ``sys.argv`` based on *argc* and *argv*.  These parameters are similar to
    those passed to the program's :cfunc:`main` function with the difference that
    the first entry should refer to the script file to be executed rather than the
    executable hosting the Python interpreter.  If there isn't a script that will be
    run, the first entry in *argv* can be an empty string.  If this function fails
    to initialize ``sys.argv``, a fatal condition is signalled using
    :cfunc:`Py_FatalError`.
 
-   .. % XXX impl. doesn't seem consistent in allowing 0/NULL for the params;
-   .. % check w/ Guido.
-
-.. % XXX Other PySys thingies (doesn't really belong in this chapter)
+   .. XXX impl. doesn't seem consistent in allowing 0/NULL for the params;
+      check w/ Guido.
 
 
 .. _threads:
 
 Thread State and the Global Interpreter Lock
 ============================================
 
 .. index::
    single: global interpreter lock
    single: interpreter lock
    single: lock, interpreter
 
-The Python interpreter is not fully thread safe.  In order to support multi-
-threaded Python programs, there's a global lock that must be held by the current
-thread before it can safely access Python objects. Without the lock, even the
-simplest operations could cause problems in a multi-threaded program: for
-example, when two threads simultaneously increment the reference count of the
-same object, the reference count could end up being incremented only once
+The Python interpreter is not fully thread safe.  In order to support
+multi-threaded Python programs, there's a global lock that must be held by the
+current thread before it can safely access Python objects. Without the lock,
+even the simplest operations could cause problems in a multi-threaded program:
+for example, when two threads simultaneously increment the reference count of
+the same object, the reference count could end up being incremented only once
 instead of twice.
 
 .. index:: single: setcheckinterval() (in module sys)
 
 Therefore, the rule exists that only the thread that has acquired the global
 interpreter lock may operate on Python objects or call Python/C API functions.
 In order to support multi-threaded Python programs, the interpreter regularly
 releases and reacquires the lock --- by default, every 100 bytecode instructions
 (this can be changed with  :func:`sys.setcheckinterval`).  The lock is also
 released and reacquired around potentially blocking I/O operations like reading
 or writing a file, so that other threads can run while the thread that requests
 the I/O is waiting for the I/O operation to complete.
@@ -611,24 +610,32 @@
    must have acquired it.  (This function is available even when thread support is
    disabled at compile time.)
 
 
 .. cfunction:: void PyEval_RestoreThread(PyThreadState *tstate)
 
    Acquire the interpreter lock (if it has been created and thread support is
    enabled) and set the thread state to *tstate*, which must not be *NULL*.  If the
    lock has been created, the current thread must not have acquired it, otherwise
    deadlock ensues.  (This function is available even when thread support is
    disabled at compile time.)
 
+
+.. cfunction:: void PyEval_ReInitThreads()
+
+   This function is called from :cfunc:`PyOS_AfterFork` to ensure that newly
+   created child processes don't hold locks referring to threads which
+   are not running in the child process.
+
+
 The following macros are normally used without a trailing semicolon; look for
 example usage in the Python source distribution.
 
 
 .. cmacro:: Py_BEGIN_ALLOW_THREADS
 
    This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();``.
    Note that it contains an opening brace; it must be matched with a following
    :cmacro:`Py_END_ALLOW_THREADS` macro.  See above for further discussion of this
    macro.  It is a no-op when thread support is disabled at compile time.
 
 
@@ -882,24 +889,64 @@
    the profile function needs to maintain state, using a different value for *obj*
    for each thread provides a convenient and thread-safe place to store it.  The
    profile function is called for all monitored events except the line-number
    events.
 
 
 .. cfunction:: void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)
 
    Set the tracing function to *func*.  This is similar to
    :cfunc:`PyEval_SetProfile`, except the tracing function does receive line-number
    events.
 
+.. cfunction:: PyObject* PyEval_GetCallStats(PyObject *self)
+
+   Return a tuple of function call counts.  There are constants defined for the
+   positions within the tuple:
+   
+   +-------------------------------+-------+
+   | Name                          | Value |
+   +===============================+=======+
+   | :const:`PCALL_ALL`            | 0     |
+   +-------------------------------+-------+
+   | :const:`PCALL_FUNCTION`       | 1     |
+   +-------------------------------+-------+
+   | :const:`PCALL_FAST_FUNCTION`  | 2     |
+   +-------------------------------+-------+
+   | :const:`PCALL_FASTER_FUNCTION`| 3     |
+   +-------------------------------+-------+
+   | :const:`PCALL_METHOD`         | 4     |
+   +-------------------------------+-------+
+   | :const:`PCALL_BOUND_METHOD`   | 5     |
+   +-------------------------------+-------+
+   | :const:`PCALL_CFUNCTION`      | 6     |
+   +-------------------------------+-------+
+   | :const:`PCALL_TYPE`           | 7     |
+   +-------------------------------+-------+
+   | :const:`PCALL_GENERATOR`      | 8     |
+   +-------------------------------+-------+
+   | :const:`PCALL_OTHER`          | 9     |
+   +-------------------------------+-------+
+   | :const:`PCALL_POP`            | 10    |
+   +-------------------------------+-------+
+   
+   :const:`PCALL_FAST_FUNCTION` means no argument tuple needs to be created.
+   :const:`PCALL_FASTER_FUNCTION` means that the fast-path frame setup code is used.
+
+   If there is a method call where the call can be optimized by changing
+   the argument tuple and calling the function directly, it gets recorded
+   twice.
+
+   This function is only present if Python is compiled with :const:`CALL_PROFILE`
+   defined.
 
 .. _advanced-debugging:
 
 Advanced Debugger Support
 =========================
 
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
 
 These functions are only intended to be used by advanced debugging tools.
 
 
