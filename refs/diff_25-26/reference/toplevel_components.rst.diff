--- rest25/reference/toplevel_components.rst	2008-10-21 04:57:13.636602142 +0900
+++ rest26/reference/toplevel_components.rst	2008-10-21 05:03:04.558756971 +0900
@@ -57,63 +57,63 @@
 is a tty device, the interpreter enters interactive mode; otherwise, it executes
 the file as a complete program.
 
 
 .. _file-input:
 
 File input
 ==========
 
 All input read from non-interactive files has the same form:
 
 .. productionlist::
-   file_input: (NEWLINE \| `statement`)\*
+   file_input: (NEWLINE | `statement`)*
 
 This syntax is used in the following situations:
 
 * when parsing a complete Python program (from a file or from a string);
 
 * when parsing a module;
 
 * when parsing a string passed to the :keyword:`exec` statement;
 
 
 .. _interactive:
 
 Interactive input
 =================
 
 Input in interactive mode is parsed using the following grammar:
 
 .. productionlist::
-   interactive_input: [`stmt_list`] NEWLINE \| `compound_stmt` NEWLINE
+   interactive_input: [`stmt_list`] NEWLINE | `compound_stmt` NEWLINE
 
 Note that a (top-level) compound statement must be followed by a blank line in
 interactive mode; this is needed to help the parser detect the end of the input.
 
 
 .. _expression-input:
 
 Expression input
 ================
 
 .. index:: single: input
 
 .. index:: builtin: eval
 
 There are two forms of expression input.  Both ignore leading whitespace. The
 string argument to :func:`eval` must have the following form:
 
 .. productionlist::
-   eval_input: `expression_list` NEWLINE\*
+   eval_input: `expression_list` NEWLINE*
 
 .. index:: builtin: input
 
 The input line read by :func:`input` must have the following form:
 
 .. productionlist::
    input_input: `expression_list` NEWLINE
 
 .. index::
    object: file
    single: input; raw
    single: raw input
