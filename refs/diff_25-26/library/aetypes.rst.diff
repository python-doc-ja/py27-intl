--- ../rest25/maclib/aetypes.rst	2009-01-07 02:01:51 +0900
+++ ../rest26/library/aetypes.rst	2009-01-07 02:01:54 +0900
@@ -1,46 +1,51 @@
 
 :mod:`aetypes` --- AppleEvent objects
 =====================================
 
 .. module:: aetypes
    :platform: Mac
    :synopsis: Python representation of the Apple Event Object Model.
+   :deprecated:
 .. sectionauthor:: Vincent Marchetti <vincem@en.com>
-
-
-.. % \moduleauthor{Jack Jansen?}{email}
+.. moduleauthor:: Jack Jansen
 
 The :mod:`aetypes` defines classes used to represent Apple Event data
 descriptors and Apple Event object specifiers.
 
 Apple Event data is contained in descriptors, and these descriptors are typed.
 For many descriptors the Python representation is simply the corresponding
 Python type: ``typeText`` in OSA is a Python string, ``typeFloat`` is a float,
 etc. For OSA types that have no direct Python counterpart this module declares
 classes. Packing and unpacking instances of these classes is handled
 automatically by :mod:`aepack`.
 
 An object specifier is essentially an address of an object implemented in a
 Apple Event server. An Apple Event specifier is used as the direct object for an
 Apple Event or as the argument of an optional parameter. The :mod:`aetypes`
 module contains the base classes for OSA classes and properties, which are used
 by the packages generated by :mod:`gensuitemodule` to populate the classes and
 properties in a given suite.
 
 For reasons of backward compatibility, and for cases where you need to script an
 application for which you have not generated the stub package this module also
 contains object specifiers for a number of common OSA classes such as
 ``Document``, ``Window``, ``Character``, etc.
 
+.. warning::
+
+   This module is removed in 3.0.
+
+
+
 The :mod:`AEObjects` module defines the following classes to represent Apple
 Event descriptor data:
 
 
 .. class:: Unknown(type, data)
 
    The representation of OSA descriptor data for which the :mod:`aepack` and
    :mod:`aetypes` modules have no support, i.e. anything that is not represented by
    the other classes here and that is not equivalent to a simple Python value.
 
 
 .. class:: Enum(enum)
