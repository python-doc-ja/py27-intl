--- rest25/library/atexit.rst	2008-10-21 04:56:51.199356249 +0900
+++ rest26/library/atexit.rst	2008-10-21 05:03:05.057174647 +0900
@@ -1,20 +1,20 @@
 
 :mod:`atexit` --- Exit handlers
 ===============================
 
 .. module:: atexit
    :synopsis: Register and execute cleanup functions.
-.. moduleauthor:: Skip Montanaro <skip@mojam.com>
-.. sectionauthor:: Skip Montanaro <skip@mojam.com>
+.. moduleauthor:: Skip Montanaro <skip@pobox.com>
+.. sectionauthor:: Skip Montanaro <skip@pobox.com>
 
 
 .. versionadded:: 2.0
 
 The :mod:`atexit` module defines a single function to register cleanup
 functions.  Functions thus registered are automatically executed upon normal
 interpreter termination.
 
 Note: the functions registered via this module are not called when the program
 is killed by a signal, when a Python fatal internal error is detected, or when
 :func:`os._exit` is called.
 
@@ -39,24 +39,28 @@
 
    At normal program termination (for instance, if :func:`sys.exit` is called or
    the main module's execution completes), all functions registered are called in
    last in, first out order.  The assumption is that lower level modules will
    normally be imported before higher level modules and thus must be cleaned up
    later.
 
    If an exception is raised during execution of the exit handlers, a traceback is
    printed (unless :exc:`SystemExit` is raised) and the exception information is
    saved.  After all exit handlers have had a chance to run the last exception to
    be raised is re-raised.
 
+   .. versionchanged:: 2.6
+      This function now returns *func* which makes it possible to use it as a
+      decorator without binding the original name to ``None``.
+
 
 .. seealso::
 
    Module :mod:`readline`
       Useful example of :mod:`atexit` to read and write :mod:`readline` history files.
 
 
 .. _atexit-example:
 
 :mod:`atexit` Example
 ---------------------
 
@@ -83,12 +87,22 @@
 Positional and keyword arguments may also be passed to :func:`register` to be
 passed along to the registered function when it is called::
 
    def goodbye(name, adjective):
        print 'Goodbye, %s, it was %s to meet you.' % (name, adjective)
 
    import atexit
    atexit.register(goodbye, 'Donny', 'nice')
 
    # or:
    atexit.register(goodbye, adjective='nice', name='Donny')
 
+Usage as a :term:`decorator`::
+
+   import atexit
+
+   @atexit.register
+   def goodbye():
+       print "You are now leaving the Python sector."
+
+This obviously only works with functions that don't take arguments.
+
