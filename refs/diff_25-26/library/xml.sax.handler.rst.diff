--- rest25/library/xml.sax.handler.rst	2008-10-21 04:57:11.432589843 +0900
+++ rest26/library/xml.sax.handler.rst	2008-10-21 05:03:05.025227002 +0900
@@ -51,46 +51,46 @@
 
 
 .. data:: feature_namespaces
 
    Value: ``"http://xml.org/sax/features/namespaces"`` ---  true: Perform Namespace
    processing. ---  false: Optionally do not perform Namespace processing (implies
    namespace-prefixes; default). ---  access: (parsing) read-only; (not parsing)
    read/write
 
 
 .. data:: feature_namespace_prefixes
 
-   Value: ``"http://xml.org/sax/features/namespace-prefixes"`` ---  true: Report
-   the original prefixed names and attributes used for Namespace declarations. ---
-   false: Do not report attributes used for Namespace declarations, and optionally
-   do not report original prefixed names (default). ---  access: (parsing) read-
-   only; (not parsing) read/write
+   Value: ``"http://xml.org/sax/features/namespace-prefixes"`` --- true: Report
+   the original prefixed names and attributes used for Namespace
+   declarations. --- false: Do not report attributes used for Namespace
+   declarations, and optionally do not report original prefixed names
+   (default). --- access: (parsing) read-only; (not parsing) read/write
 
 
 .. data:: feature_string_interning
 
    Value: ``"http://xml.org/sax/features/string-interning"`` ---  true: All element
    names, prefixes, attribute names, Namespace URIs, and local names are interned
    using the built-in intern function. ---  false: Names are not necessarily
    interned, although they may be (default). ---  access: (parsing) read-only; (not
    parsing) read/write
 
 
 .. data:: feature_validation
 
-   Value: ``"http://xml.org/sax/features/validation"`` ---  true: Report all
-   validation errors (implies external-general-entities and external-parameter-
-   entities). ---  false: Do not report validation errors. ---  access: (parsing)
-   read-only; (not parsing) read/write
+   Value: ``"http://xml.org/sax/features/validation"`` --- true: Report all
+   validation errors (implies external-general-entities and
+   external-parameter-entities). --- false: Do not report validation errors. ---
+   access: (parsing) read-only; (not parsing) read/write
 
 
 .. data:: feature_external_ges
 
    Value: ``"http://xml.org/sax/features/external-general-entities"`` ---  true:
    Include all external general (text) entities. ---  false: Do not include
    external general entities. ---  access: (parsing) read-only; (not parsing)
    read/write
 
 
 .. data:: feature_external_pes
 
@@ -198,72 +198,72 @@
 
    The information from this event is not necessary for normal Namespace
    processing: the SAX XML reader will automatically replace prefixes for element
    and attribute names when the ``feature_namespaces`` feature is enabled (the
    default).
 
    There are cases, however, when applications need to use prefixes in character
    data or in attribute values, where they cannot safely be expanded automatically;
    the :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events supply the
    information to the application to expand prefixes in those contexts itself, if
    necessary.
 
-   .. % % XXX This is not really the default, is it? MvL
+   .. XXX This is not really the default, is it? MvL
 
    Note that :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events are not
    guaranteed to be properly nested relative to each-other: all
    :meth:`startPrefixMapping` events will occur before the corresponding
    :meth:`startElement` event, and all :meth:`endPrefixMapping` events will occur
    after the corresponding :meth:`endElement` event, but their order is not
    guaranteed.
 
 
 .. method:: ContentHandler.endPrefixMapping(prefix)
 
    End the scope of a prefix-URI mapping.
 
    See :meth:`startPrefixMapping` for details. This event will always occur after
    the corresponding :meth:`endElement` event, but the order of
    :meth:`endPrefixMapping` events is not otherwise guaranteed.
 
 
 .. method:: ContentHandler.startElement(name, attrs)
 
    Signals the start of an element in non-namespace mode.
 
    The *name* parameter contains the raw XML 1.0 name of the element type as a
    string and the *attrs* parameter holds an object of the :class:`Attributes`
-   interface (XXX reference: attributes-objects.html) containing the attributes of
+   interface (see :ref:`attributes-objects`) containing the attributes of
    the element.  The object passed as *attrs* may be re-used by the parser; holding
    on to a reference to it is not a reliable way to keep a copy of the attributes.
    To keep a copy of the attributes, use the :meth:`copy` method of the *attrs*
    object.
 
 
 .. method:: ContentHandler.endElement(name)
 
    Signals the end of an element in non-namespace mode.
 
    The *name* parameter contains the name of the element type, just as with the
    :meth:`startElement` event.
 
 
 .. method:: ContentHandler.startElementNS(name, qname, attrs)
 
    Signals the start of an element in namespace mode.
 
    The *name* parameter contains the name of the element type as a ``(uri,
    localname)`` tuple, the *qname* parameter contains the raw XML 1.0 name used in
    the source document, and the *attrs* parameter holds an instance of the
-   :class:`AttributesNS` interface (XXX reference: attributes-ns-objects.html)
+   :class:`AttributesNS` interface (see :ref:`attributes-ns-objects`)
    containing the attributes of the element.  If no namespace is associated with
    the element, the *uri* component of *name* will be ``None``.  The object passed
    as *attrs* may be re-used by the parser; holding on to a reference to it is not
    a reliable way to keep a copy of the attributes.  To keep a copy of the
    attributes, use the :meth:`copy` method of the *attrs* object.
 
    Parsers may set the *qname* parameter to ``None``, unless the
    ``feature_namespace_prefixes`` feature is activated.
 
 
 .. method:: ContentHandler.endElementNS(name, qname)
 
