--- rest25/library/urllib2.rst	2008-10-21 04:57:09.056597258 +0900
+++ rest26/library/urllib2.rst	2008-10-21 05:03:04.829190300 +0900
@@ -1,123 +1,153 @@
-
 :mod:`urllib2` --- extensible library for opening URLs
 ======================================================
 
 .. module:: urllib2
+   :synopsis: Next generation URL opening library.
 .. moduleauthor:: Jeremy Hylton <jhylton@users.sourceforge.net>
 .. sectionauthor:: Moshe Zadka <moshez@users.sourceforge.net>
 
 
+.. note::
+   The :mod:`urllib2` module has been split across several modules in
+   Python 3.0 named :mod:`urllib.request` and :mod:`urllib.error`.
+   The :term:`2to3` tool will automatically adapt imports when converting
+   your sources to 3.0.
 
 
 The :mod:`urllib2` module defines functions and classes which help in opening
 URLs (mostly HTTP) in a complex world --- basic and digest authentication,
 redirections, cookies and more.
 
 The :mod:`urllib2` module defines the following functions:
 
 
-.. function:: urlopen(url[, data])
+.. function:: urlopen(url[, data][, timeout])
 
    Open the URL *url*, which can be either a string or a :class:`Request` object.
 
    *data* may be a string specifying additional data to send to the server, or
    ``None`` if no such data is needed.  Currently HTTP requests are the only ones
    that use *data*; the HTTP request will be a POST instead of a GET when the
    *data* parameter is provided.  *data* should be a buffer in the standard
    :mimetype:`application/x-www-form-urlencoded` format.  The
    :func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples and
    returns a string in this format.
 
+   The optional *timeout* parameter specifies a timeout in seconds for blocking
+   operations like the connection attempt (if not specified, the global default
+   timeout setting will be used).  This actually only works for HTTP, HTTPS,
+   FTP and FTPS connections.
+
    This function returns a file-like object with two additional methods:
 
-* :meth:`geturl` --- return the URL of the resource retrieved
+   * :meth:`geturl` --- return the URL of the resource retrieved, commonly used to
+     determine if a redirect was followed
 
-* :meth:`info` --- return the meta-information of the page, as a dictionary-like
-     object
+   * :meth:`info` --- return the meta-information of the page, such as headers, in
+     the form of an ``httplib.HTTPMessage`` instance
+     (see `Quick Reference to HTTP Headers <http://www.cs.tut.fi/~jkorpela/http.html>`_)
 
    Raises :exc:`URLError` on errors.
 
    Note that ``None`` may be returned if no handler handles the request (though the
    default installed global :class:`OpenerDirector` uses :class:`UnknownHandler` to
    ensure this never happens).
 
+   .. versionchanged:: 2.6
+      *timeout* was added.
+
 
 .. function:: install_opener(opener)
 
    Install an :class:`OpenerDirector` instance as the default global opener.
    Installing an opener is only necessary if you want urlopen to use that opener;
    otherwise, simply call :meth:`OpenerDirector.open` instead of :func:`urlopen`.
    The code does not check for a real :class:`OpenerDirector`, and any class with
    the appropriate interface will work.
 
 
 .. function:: build_opener([handler, ...])
 
    Return an :class:`OpenerDirector` instance, which chains the handlers in the
-   order given. *handler*s can be either instances of :class:`BaseHandler`, or
+   order given. *handler*\s can be either instances of :class:`BaseHandler`, or
    subclasses of :class:`BaseHandler` (in which case it must be possible to call
    the constructor without any parameters).  Instances of the following classes
-   will be in front of the *handler*s, unless the *handler*s contain them,
+   will be in front of the *handler*\s, unless the *handler*\s contain them,
    instances of them or subclasses of them: :class:`ProxyHandler`,
    :class:`UnknownHandler`, :class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`,
    :class:`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`,
    :class:`HTTPErrorProcessor`.
 
-   If the Python installation has SSL support (:func:`socket.ssl` exists),
+   If the Python installation has SSL support (i.e., if the :mod:`ssl` module can be imported),
    :class:`HTTPSHandler` will also be added.
 
    Beginning in Python 2.3, a :class:`BaseHandler` subclass may also change its
    :attr:`handler_order` member variable to modify its position in the handlers
    list.
 
 The following exceptions are raised as appropriate:
 
 
 .. exception:: URLError
 
    The handlers raise this exception (or derived exceptions) when they run into a
    problem.  It is a subclass of :exc:`IOError`.
 
+   .. attribute:: reason
 
-.. exception:: HTTPError
+      The reason for this error.  It can be a message string or another exception
+      instance (:exc:`socket.error` for remote URLs, :exc:`OSError` for local
+      URLs).
 
-   A subclass of :exc:`URLError`, it can also function as a  non-exceptional file-
-   like return value (the same thing that :func:`urlopen` returns).  This is useful
-   when handling exotic HTTP errors, such as requests for authentication.
 
+.. exception:: HTTPError
+
+   Though being an exception (a subclass of :exc:`URLError`), an :exc:`HTTPError`
+   can also function as a non-exceptional file-like return value (the same thing
+   that :func:`urlopen` returns).  This is useful when handling exotic HTTP
+   errors, such as requests for authentication.
+
+   .. attribute:: code
+
+      An HTTP status code as defined in `RFC 2616 <http://www.faqs.org/rfcs/rfc2616.html>`_. 
+      This numeric value corresponds to a value found in the dictionary of
+      codes as found in :attr:`BaseHTTPServer.BaseHTTPRequestHandler.responses`.
 
-.. exception:: GopherError
 
-   A subclass of :exc:`URLError`, this is the error raised by the Gopher handler.
 
 The following classes are provided:
 
 
-.. class:: Request(url[, data][, headers] [, origin_req_host][, unverifiable])
+.. class:: Request(url[, data][, headers][, origin_req_host][, unverifiable])
 
    This class is an abstraction of a URL request.
 
    *url* should be a string containing a valid URL.
 
    *data* may be a string specifying additional data to send to the server, or
    ``None`` if no such data is needed.  Currently HTTP requests are the only ones
    that use *data*; the HTTP request will be a POST instead of a GET when the
    *data* parameter is provided.  *data* should be a buffer in the standard
    :mimetype:`application/x-www-form-urlencoded` format.  The
    :func:`urllib.urlencode` function takes a mapping or sequence of 2-tuples and
    returns a string in this format.
 
    *headers* should be a dictionary, and will be treated as if :meth:`add_header`
-   was called with each key and value as arguments.
+   was called with each key and value as arguments.  This is often used to "spoof"
+   the ``User-Agent`` header, which is used by a browser to identify itself --
+   some HTTP servers only allow requests coming from common browsers as opposed
+   to scripts.  For example, Mozilla Firefox may identify itself as ``"Mozilla/5.0
+   (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"``, while :mod:`urllib2`'s
+   default user agent string is ``"Python-urllib/2.6"`` (on Python 2.6).
 
    The final two arguments are only of interest for correct handling of third-party
    HTTP cookies:
 
    *origin_req_host* should be the request-host of the origin transaction, as
    defined by :rfc:`2965`.  It defaults to ``cookielib.request_host(self)``.  This
    is the host name or IP address of the original request that was initiated by the
    user.  For example, if the request is for an image in an HTML document, this
    should be the request-host of the request for the page containing the image.
 
    *unverifiable* should indicate whether the request is unverifiable, as defined
    by RFC 2965.  It defaults to False.  An unverifiable request is one whose URL
@@ -150,24 +180,25 @@
 
 
 .. class:: HTTPCookieProcessor([cookiejar])
 
    A class to handle HTTP Cookies.
 
 
 .. class:: ProxyHandler([proxies])
 
    Cause requests to go through a proxy. If *proxies* is given, it must be a
    dictionary mapping protocol names to URLs of proxies. The default is to read the
    list of proxies from the environment variables :envvar:`<protocol>_proxy`.
+   To disable autodetected proxy pass an empty dictionary.
 
 
 .. class:: HTTPPasswordMgr()
 
    Keep a database of  ``(realm, uri) -> (user, password)`` mappings.
 
 
 .. class:: HTTPPasswordMgrWithDefaultRealm()
 
    Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm of
    ``None`` is considered a catch-all realm, which is searched if no other realm
    fits.
@@ -239,29 +270,24 @@
 
 
 .. class:: FTPHandler()
 
    Open FTP URLs.
 
 
 .. class:: CacheFTPHandler()
 
    Open FTP URLs, keeping a cache of open FTP connections to minimize delays.
 
 
-.. class:: GopherHandler()
-
-   Open gopher URLs.
-
-
 .. class:: UnknownHandler()
 
    A catch-all class to handle unknown URLs.
 
 
 .. _request-objects:
 
 Request Objects
 ---------------
 
 The following methods describe all of :class:`Request`'s public interface, and
 so all must be overridden in subclasses.
@@ -360,46 +386,53 @@
 OpenerDirector Objects
 ----------------------
 
 :class:`OpenerDirector` instances have the following methods:
 
 
 .. method:: OpenerDirector.add_handler(handler)
 
    *handler* should be an instance of :class:`BaseHandler`.  The following methods
    are searched, and added to the possible chains (note that HTTP errors are a
    special case).
 
-* :meth:`protocol_open` --- signal that the handler knows how to open *protocol*
+   * :meth:`protocol_open` --- signal that the handler knows how to open *protocol*
      URLs.
 
-* :meth:`http_error_type` --- signal that the handler knows how to handle HTTP
+   * :meth:`http_error_type` --- signal that the handler knows how to handle HTTP
      errors with HTTP error code *type*.
 
-* :meth:`protocol_error` --- signal that the handler knows how to handle errors
+   * :meth:`protocol_error` --- signal that the handler knows how to handle errors
      from (non-\ ``http``) *protocol*.
 
-* :meth:`protocol_request` --- signal that the handler knows how to pre-process
+   * :meth:`protocol_request` --- signal that the handler knows how to pre-process
      *protocol* requests.
 
-* :meth:`protocol_response` --- signal that the handler knows how to post-
-     process *protocol* responses.
+   * :meth:`protocol_response` --- signal that the handler knows how to
+     post-process *protocol* responses.
 
 
-.. method:: OpenerDirector.open(url[, data])
+.. method:: OpenerDirector.open(url[, data][, timeout])
 
    Open the given *url* (which can be a request object or a string), optionally
-   passing the given *data*. Arguments, return values and exceptions raised are the
-   same as those of :func:`urlopen` (which simply calls the :meth:`open` method on
-   the currently installed global :class:`OpenerDirector`).
+   passing the given *data*. Arguments, return values and exceptions raised are
+   the same as those of :func:`urlopen` (which simply calls the :meth:`open`
+   method on the currently installed global :class:`OpenerDirector`).  The
+   optional *timeout* parameter specifies a timeout in seconds for blocking
+   operations like the connection attempt (if not specified, the global default
+   timeout setting will be usedi). The timeout feature actually works only for
+   HTTP, HTTPS, FTP and FTPS connections).
+
+   .. versionchanged:: 2.6
+      *timeout* was added.
 
 
 .. method:: OpenerDirector.error(proto[, arg[, ...]])
 
    Handle an error of the given protocol.  This will call the registered error
    handlers for the given protocol with the given arguments (which are protocol
    specific).  The HTTP protocol is a special case which uses the HTTP response
    code to determine the specific error handler; refer to the :meth:`http_error_\*`
    methods of the handler classes.
 
    Return values and exceptions raised are the same as those of :func:`urlopen`.
 
@@ -604,25 +637,25 @@
 
 
 .. _http-cookie-processor:
 
 HTTPCookieProcessor Objects
 ---------------------------
 
 .. versionadded:: 2.4
 
 :class:`HTTPCookieProcessor` instances have one attribute:
 
 
-.. attribute:: XXX Class.cookiejar
+.. attribute:: HTTPCookieProcessor.cookiejar
 
    The :class:`cookielib.CookieJar` in which cookies are stored.
 
 
 .. _proxy-handler:
 
 ProxyHandler Objects
 --------------------
 
 
 .. method:: ProxyHandler.protocol_open(request)
    :noindex:
@@ -797,35 +830,24 @@
 
 
 .. method:: CacheFTPHandler.setTimeout(t)
 
    Set timeout of connections to *t* seconds.
 
 
 .. method:: CacheFTPHandler.setMaxConns(m)
 
    Set maximum number of cached connections to *m*.
 
 
-.. _gopher-handler:
-
-GopherHandler Objects
----------------------
-
-
-.. method:: GopherHandler.gopher_open(req)
-
-   Open the gopher resource indicated by *req*.
-
-
 .. _unknown-handler-objects:
 
 UnknownHandler Objects
 ----------------------
 
 
 .. method:: UnknownHandler.unknown_open()
 
    Raise a :exc:`URLError` exception.
 
 
 .. _http-error-processor-objects:
@@ -876,38 +898,41 @@
 The code for the sample CGI used in the above example is::
 
    #!/usr/bin/env python
    import sys
    data = sys.stdin.read()
    print 'Content-type: text-plain\n\nGot Data: "%s"' % data
 
 Use of Basic HTTP Authentication::
 
    import urllib2
    # Create an OpenerDirector with support for Basic HTTP Authentication...
    auth_handler = urllib2.HTTPBasicAuthHandler()
-   auth_handler.add_password('realm', 'host', 'username', 'password')
+   auth_handler.add_password(realm='PDQ Application',
+                             uri='https://mahler:8092/site-updates.py',
+                             user='klem',
+                             passwd='kadidd!ehopper')
    opener = urllib2.build_opener(auth_handler)
    # ...and install it globally so it can be used with urlopen.
    urllib2.install_opener(opener)
    urllib2.urlopen('http://www.example.com/login.html')
 
 :func:`build_opener` provides many handlers by default, including a
 :class:`ProxyHandler`.  By default, :class:`ProxyHandler` uses the environment
 variables named ``<scheme>_proxy``, where ``<scheme>`` is the URL scheme
 involved.  For example, the :envvar:`http_proxy` environment variable is read to
 obtain the HTTP proxy's URL.
 
 This example replaces the default :class:`ProxyHandler` with one that uses
-programatically-supplied proxy URLs, and adds proxy authorization support with
+programmatically-supplied proxy URLs, and adds proxy authorization support with
 :class:`ProxyBasicAuthHandler`. ::
 
    proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
    proxy_auth_handler = urllib2.HTTPBasicAuthHandler()
    proxy_auth_handler.add_password('realm', 'host', 'username', 'password')
 
    opener = build_opener(proxy_handler, proxy_auth_handler)
    # This time, rather than install the OpenerDirector, we use it directly:
    opener.open('http://www.example.com/login.html')
 
 Adding HTTP headers:
 
