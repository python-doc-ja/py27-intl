--- rest25/library/anydbm.rst	2008-10-21 04:56:50.895373954 +0900
+++ rest26/library/anydbm.rst	2008-10-21 05:03:05.129320149 +0900
@@ -1,20 +1,24 @@
-
 :mod:`anydbm` --- Generic access to DBM-style databases
 =======================================================
 
 .. module:: anydbm
    :synopsis: Generic interface to DBM-style database modules.
 
 
+.. note::
+   The :mod:`anydbm` module has been renamed to :mod:`dbm` in Python 3.0.  The
+   :term:`2to3` tool will automatically adapt imports when converting your
+   sources to 3.0.
+
 .. index::
    module: dbhash
    module: bsddb
    module: gdbm
    module: dbm
    module: dumbdbm
 
 :mod:`anydbm` is a generic interface to variants of the DBM database ---
 :mod:`dbhash` (requires :mod:`bsddb`), :mod:`gdbm`, or :mod:`dbm`.  If none of
 these modules is installed, the slow-but-simple implementation in module
 :mod:`dumbdbm` will be used.
 
@@ -32,26 +36,26 @@
    ``'c'`` to create the database if it doesn't exist, or ``'n'``, which will
    always create a new empty database.  If not specified, the default value is
    ``'r'``.
 
    The optional *mode* argument is the Unix mode of the file, used only when the
    database has to be created.  It defaults to octal ``0666`` (and will be modified
    by the prevailing umask).
 
 
 .. exception:: error
 
    A tuple containing the exceptions that can be raised by each of the supported
-   modules, with a unique exception :exc:`anydbm.error` as the first item --- the
-   latter is used when :exc:`anydbm.error` is raised.
+   modules, with a unique exception also named :exc:`anydbm.error` as the first
+   item --- the latter is used when :exc:`anydbm.error` is raised.
 
 The object returned by :func:`open` supports most of the same functionality as
 dictionaries; keys and their corresponding values can be stored, retrieved, and
 deleted, and the :meth:`has_key` and :meth:`keys` methods are available.  Keys
 and values must always be strings.
 
 The following example records some hostnames and a corresponding title,  and
 then prints out the contents of the database::
 
    import anydbm
 
    # Open database, creating it if necessary.
