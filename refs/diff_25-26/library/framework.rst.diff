--- ../rest25/maclib/framework.rst	2009-01-07 02:01:51 +0900
+++ ../rest26/library/framework.rst	2009-01-07 02:01:54 +0900
@@ -1,29 +1,34 @@
 
 :mod:`FrameWork` --- Interactive application framework
 ======================================================
 
 .. module:: FrameWork
    :platform: Mac
    :synopsis: Interactive application framework.
+   :deprecated:
 
 
 The :mod:`FrameWork` module contains classes that together provide a framework
 for an interactive Macintosh application. The programmer builds an application
 by creating subclasses that override various methods of the bases classes,
 thereby implementing the functionality wanted. Overriding functionality can
 often be done on various different levels, i.e. to handle clicks in a single
 dialog window in a non-standard way it is not necessary to override the complete
 event handling.
 
+.. warning::
+
+   This module is removed in 3.0.
+
 Work on the :mod:`FrameWork` has pretty much stopped, now that :mod:`PyObjC` is
 available for full Cocoa access from Python, and the documentation describes
 only the most important functionality, and not in the most logical manner at
 that. Examine the source or the examples for more details.  The following are
 some comments posted on the MacPython newsgroup about the strengths and
 limitations of :mod:`FrameWork`:
 
 
 .. epigraph::
 
    The strong point of :mod:`FrameWork` is that it allows you to break into the
    control-flow at many different places. :mod:`W`, for instance, uses a different
@@ -192,25 +197,25 @@
 
 
 .. _window-objects:
 
 Window Objects
 --------------
 
 Window objects have the following methods, among others:
 
 
 .. method:: Window.open()
 
-   Override this method to open a window. Store the MacOS window-id in
+   Override this method to open a window. Store the Mac OS window-id in
    :attr:`self.wid` and call the :meth:`do_postopen` method to register the window
    with the parent application.
 
 
 .. method:: Window.close()
 
    Override this method to do any special processing on window close. Call the
    :meth:`do_postclose` method to cleanup the parent state.
 
 
 .. method:: Window.do_postresize(width, height, macoswindowid)
 
@@ -220,25 +225,25 @@
 
 .. method:: Window.do_contentclick(local, modifiers, event)
 
    The user clicked in the content part of a window. The arguments are the
    coordinates (window-relative), the key modifiers and the raw event.
 
 
 .. method:: Window.do_update(macoswindowid, event)
 
    An update event for the window was received. Redraw the window.
 
 
-.. method:: XXX Class.do_activate(activate, event)
+.. method:: Window.do_activate(activate, event)
 
    The window was activated (``activate == 1``) or deactivated (``activate == 0``).
    Handle things like focus highlighting, etc.
 
 
 .. _controlswindow-object:
 
 ControlsWindow Object
 ---------------------
 
 ControlsWindow objects have the following methods besides those of ``Window``
 objects:
