--- Python-Docs-2.4/./ref/ref2.tex	2004-11-11 01:51:17.000000000 +0900
+++ Python-Docs-2.5/./ref/ref2.tex	2006-08-09 05:13:13.000000000 +0900
@@ -9,7 +9,7 @@
 
 Python uses the 7-bit \ASCII{} character set for program text.
 \versionadded[An encoding declaration can be used to indicate that 
-string literals and comments use an encoding different from ASCII.]{2.3}
+string literals and comments use an encoding different from ASCII]{2.3}
 For compatibility with older versions, Python only warns if it finds
 8-bit characters; those warnings should be corrected by either declaring
 an explicit encoding, or using escape sequences if those bytes are binary
@@ -54,11 +54,18 @@
 
 \subsection{Physical lines\label{physical}}
 
-A physical line ends in whatever the current platform's convention is
-for terminating lines.  On \UNIX, this is the \ASCII{} LF (linefeed)
-character.  On Windows, it is the \ASCII{} sequence CR LF (return
-followed by linefeed).  On Macintosh, it is the \ASCII{} CR (return)
-character.
+A physical line is a sequence of characters terminated by an end-of-line
+sequence.  In source files, any of the standard platform line
+termination sequences can be used - the \UNIX{} form using \ASCII{} LF
+(linefeed), the Windows form using the \ASCII{} sequence CR LF (return
+followed by linefeed), or the Macintosh form using the \ASCII{} CR
+(return) character.  All of these forms can be used equally, regardless
+of platform.
+
+When embedding Python, source code strings should be passed to Python
+APIs using the standard C conventions for newline characters (the
+\code{\e n} character, representing \ASCII{} LF, is the line
+terminator).
 
 
 \subsection{Comments\label{comments}}
@@ -301,22 +308,28 @@
 \index{reserved word}
 
 \begin{verbatim}
-and       del       for       is        raise    
-assert    elif      from      lambda    return   
-break     else      global    not       try      
-class     except    if        or        while    
-continue  exec      import    pass      yield    
-def       finally   in        print              
+and       del       from      not       while    
+as        elif      global    or        with     
+assert    else      if        pass      yield    
+break     except    import    print              
+class     exec      in        raise              
+continue  finally   is        return             
+def       for       lambda    try 
 \end{verbatim}
 
 % When adding keywords, use reswords.py for reformatting
 
-Note that although the identifier \code{as} can be used as part of the
-syntax of \keyword{import} statements, it is not currently a reserved
-word.
-
-In some future version of Python, the identifiers \code{as} and
-\code{None} will both become keywords.
+\versionchanged[\constant{None} became a constant and is now
+recognized by the compiler as a name for the built-in object
+\constant{None}.  Although it is not a keyword, you cannot assign
+a different object to it]{2.4}
+
+\versionchanged[Both \keyword{as} and \keyword{with} are only recognized
+when the \code{with_statement} future feature has been enabled.
+It will always be enabled in Python 2.6.  See section~\ref{with} for
+details.  Note that using \keyword{as} and \keyword{with} as identifiers
+will always issue a warning, even when the \code{with_statement} future
+directive is not in effect]{2.5}
 
 
 \subsection{Reserved classes of identifiers\label{id-classes}}
@@ -342,7 +355,7 @@
 
 \item[\code{__*__}]
   System-defined names.  These names are defined by the interpreter
-  and it's implementation (including the standard library);
+  and its implementation (including the standard library);
   applications should not expect to define additional names using this
   convention.  The set of names of this class defined by Python may be
   extended in future versions.
@@ -507,8 +520,9 @@
 
 When an \character{r} or \character{R} prefix is used in conjunction
 with a \character{u} or \character{U} prefix, then the \code{\e uXXXX}
-escape sequence is processed while \emph{all other backslashes are
-left in the string}.  For example, the string literal
+and \code{\e UXXXXXXXX} escape sequences are processed while 
+\emph{all other backslashes are left in the string}.
+For example, the string literal
 \code{ur"\e{}u0062\e n"} consists of three Unicode characters: `LATIN
 SMALL LETTER B', `REVERSE SOLIDUS', and `LATIN SMALL LETTER N'.
 Backslashes can be escaped with a preceding backslash; however, both
@@ -644,7 +658,7 @@
 \end{verbatim}
 
 Note that numeric literals do not include a sign; a phrase like
-\code{-1} is actually an expression composed of the operator
+\code{-1} is actually an expression composed of the unary operator
 \code{-} and the literal \code{1}.
 
 
