--- rest26/whatsnew/2.1.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/whatsnew/2.1.rst	2009-04-05 05:01:47.000000000 +0900
@@ -1,14 +1,14 @@
 ****************************
-  What's New in Python 2.1  
+  What's New in Python 2.1
 ****************************
 
 :Author: A.M. Kuchling
 
 .. |release| replace:: 1.01
 
 .. $Id: whatsnew21.tex 50964 2006-07-30 03:03:43Z fred.drake $
 
 
 Introduction
 ============
 
@@ -89,25 +89,25 @@
 generate different code to access variables in a containing scope.  ``from
 module import *`` and :keyword:`exec` make it impossible for the compiler to
 figure this out, because they add names to the local namespace that are
 unknowable at compile time. Therefore, if a function contains function
 definitions or :keyword:`lambda` expressions with free variables, the compiler
 will flag this by raising a :exc:`SyntaxError` exception.
 
 To make the preceding explanation a bit clearer, here's an example::
 
    x = 1
    def f():
        # The next line is a syntax error
-       exec 'x=2'  
+       exec 'x=2'
        def g():
            return x
 
 Line 4 containing the :keyword:`exec` statement is a syntax error, since
 :keyword:`exec` would define a new local variable named ``x`` whose value should
 be accessed by :func:`g`.
 
 This shouldn't be much of a limitation, since :keyword:`exec` is rarely used in
 most Python code (and when it is used, it's often a sign of a poor design
 anyway).
 
 Compatibility concerns have led to nested scopes being introduced gradually; in
