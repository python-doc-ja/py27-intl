--- rest26/whatsnew/2.4.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/whatsnew/2.4.rst	2009-04-05 05:01:47.000000000 +0900
@@ -1,14 +1,14 @@
 ****************************
-  What's New in Python 2.4  
+  What's New in Python 2.4
 ****************************
 
 :Author: A.M. Kuchling
 
 .. |release| replace:: 1.02
 
 .. $Id: whatsnew24.tex 54632 2007-03-31 11:59:54Z georg.brandl $
 .. Don't write extensive text for new sections; I'll do that.
 .. Feel free to add commented-out reminders of things that need
 .. to be covered.  --amk
 
 This article explains the new features in Python 2.4.1, released on March 30,
@@ -54,28 +54,28 @@
    >>> a - b                               # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                               # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                               # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                               # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])
 
    >>> a.add('z')                          # add a new element
    >>> a.update('wxy')                     # add multiple new elements
    >>> a
-   set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])       
+   set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])
    >>> a.remove('x')                       # take one element out
    >>> a
-   set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])       
+   set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])
 
 The :func:`frozenset` type is an immutable version of :func:`set`. Since it is
 immutable and hashable, it may be used as a dictionary key or as a member of
 another set.
 
 The :mod:`sets` module remains in the standard library, and may be useful if you
 wish to subclass the :class:`Set` or :class:`ImmutableSet` classes.  There are
 currently no plans to deprecate the module.
 
 
 .. seealso::
 
@@ -342,40 +342,40 @@
 
 .. ======================================================================
 
 
 PEP 322: Reverse Iteration
 ==========================
 
 A new built-in function, :func:`reversed(seq)`, takes a sequence and returns an
 iterator that loops over the elements of the sequence  in reverse order.   ::
 
    >>> for i in reversed(xrange(1,4)):
    ...    print i
-   ... 
+   ...
    3
    2
    1
 
 Compared to extended slicing, such as ``range(1,4)[::-1]``, :func:`reversed` is
 easier to read, runs faster, and uses substantially less memory.
 
 Note that :func:`reversed` only accepts sequences, not arbitrary iterators.  If
 you want to reverse an iterator, first convert it to  a list with :func:`list`.
 ::
 
    >>> input = open('/etc/passwd', 'r')
    >>> for line in reversed(list(input)):
    ...   print line
-   ... 
+   ...
    root:*:0:0:System Administrator:/var/root:/bin/tcsh
      ...
 
 
 .. seealso::
 
    :pep:`322` - Reverse Iteration
       Written and implemented by Raymond Hettinger.
 
 .. ======================================================================
 
 
@@ -387,28 +387,28 @@
 :func:`os.system(command)` is easy to use, but slow (it runs a shell process
 which executes the command) and dangerous (you have to be careful about escaping
 the shell's metacharacters).  The :mod:`popen2` module offers classes that can
 capture standard output and standard error from the subprocess, but the naming
 is confusing.  The :mod:`subprocess` module cleans  this up, providing a unified
 interface that offers all the features you might need.
 
 Instead of :mod:`popen2`'s collection of classes, :mod:`subprocess` contains a
 single class called :class:`Popen`  whose constructor supports a number of
 different keyword arguments. ::
 
    class Popen(args, bufsize=0, executable=None,
-   	    stdin=None, stdout=None, stderr=None,
-   	    preexec_fn=None, close_fds=False, shell=False,
-   	    cwd=None, env=None, universal_newlines=False,
-   	    startupinfo=None, creationflags=0):
+               stdin=None, stdout=None, stderr=None,
+               preexec_fn=None, close_fds=False, shell=False,
+               cwd=None, env=None, universal_newlines=False,
+               startupinfo=None, creationflags=0):
 
 *args* is commonly a sequence of strings that will be the arguments to the
 program executed as the subprocess.  (If the *shell* argument is true, *args*
 can be a string which will then be passed on to the shell for interpretation,
 just as :func:`os.system` does.)
 
 *stdin*, *stdout*, and *stderr* specify what the subprocess's input, output, and
 error streams will be.  You can provide a file object or a file descriptor, or
 you can use the constant ``subprocess.PIPE`` to create a pipe between the
 subprocess and the parent.
 
 The constructor has a number of handy options:
@@ -641,40 +641,40 @@
   examples of error conditions are division by zero, loss of precision, and
   overflow.
 
 There's a thread-local default context available by calling :func:`getcontext`;
 you can change the properties of this context to alter the default precision,
 rounding, or trap handling.  The following example shows the effect of changing
 the precision of the default context::
 
    >>> decimal.getcontext().prec
    28
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.1428571428571428571428571429")
-   >>> decimal.getcontext().prec = 9 
+   >>> decimal.getcontext().prec = 9
    >>> decimal.Decimal(1) / decimal.Decimal(7)
    Decimal("0.142857143")
 
 The default action for error conditions is selectable; the module can either
 return a special value such as infinity or not-a-number, or exceptions can be
 raised::
 
    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Traceback (most recent call last):
      ...
    decimal.DivisionByZero: x / 0
    >>> decimal.getcontext().traps[decimal.DivisionByZero] = False
    >>> decimal.Decimal(1) / decimal.Decimal(0)
    Decimal("Infinity")
-   >>> 
+   >>>
 
 The :class:`Context` instance also has various methods for formatting  numbers
 such as :meth:`to_eng_string` and :meth:`to_sci_string`.
 
 For more information, see the documentation for the :mod:`decimal` module, which
 includes a quick-start tutorial and a reference.
 
 
 .. seealso::
 
    :pep:`327` - Decimal Data Type
       Written by Facundo Batista and implemented by Facundo Batista, Eric Price,
@@ -794,25 +794,25 @@
 
 * The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now take
   an optional argument for specifying a fill character other than a space.
   (Contributed by Raymond Hettinger.)
 
 * Strings also gained an :meth:`rsplit` method that works like the :meth:`split`
   method but splits from the end of the string.   (Contributed by Sean
   Reifschneider.) ::
 
      >>> 'www.python.org'.split('.', 1)
      ['www', 'python.org']
      'www.python.org'.rsplit('.', 1)
-     ['www.python', 'org']        
+     ['www.python', 'org']
 
 * Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the
   :meth:`sort` method of lists. These parameters make some common usages of
   :meth:`sort` simpler. All of these parameters are optional.
 
   For the *cmp* parameter, the value should be a comparison function that takes
   two parameters and returns -1, 0, or +1 depending on how the parameters compare.
   This function will then be used to sort the list.  Previously this was the only
   parameter that could be provided to :meth:`sort`.
 
   *key* should be a single-parameter function that takes a list element and
   returns a comparison key for the element.  The list is then sorted using the
@@ -1036,25 +1036,25 @@
      >>> d = deque('ghi')        # make a new deque with three items
      >>> d.append('j')           # add a new entry to the right side
      >>> d.appendleft('f')       # add a new entry to the left side
      >>> d                       # show the representation of the deque
      deque(['f', 'g', 'h', 'i', 'j'])
      >>> d.pop()                 # return and remove the rightmost item
      'j'
      >>> d.popleft()             # return and remove the leftmost item
      'f'
      >>> list(d)                 # list the contents of the deque
      ['g', 'h', 'i']
      >>> 'h' in d                # search the deque
-     True  
+     True
 
   Several modules, such as the :mod:`Queue` and :mod:`threading` modules, now take
   advantage of :class:`collections.deque` for improved performance.  (Contributed
   by Raymond Hettinger.)
 
 * The :mod:`ConfigParser` classes have been enhanced slightly. The :meth:`read`
   method now returns a list of the files that were successfully parsed, and the
   :meth:`set` method raises :exc:`TypeError` if passed a *value* argument that
   isn't a string.   (Contributed by John Belmonte and David Goodger.)
 
 * The :mod:`curses` module now supports the ncurses extension
   :func:`use_default_colors`.  On platforms where the terminal supports
@@ -1097,53 +1097,53 @@
   itself.  :func:`groupby` then groups the elements into subsequences which have
   matching values of the key, and returns a series of 2-tuples containing the key
   value and an iterator over the subsequence.
 
   Here's an example to make this clearer.  The *key* function simply returns
   whether a number is even or odd, so the result of :func:`groupby` is to return
   consecutive runs of odd or even numbers. ::
 
      >>> import itertools
      >>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]
      >>> for key_val, it in itertools.groupby(L, lambda x: x % 2):
      ...    print key_val, list(it)
-     ... 
+     ...
      0 [2, 4, 6]
      1 [7]
      0 [8]
      1 [9, 11]
      0 [12, 14]
-     >>> 
+     >>>
 
   :func:`groupby` is typically used with sorted input.  The logic for
   :func:`groupby` is similar to the Unix ``uniq`` filter which makes it handy for
   eliminating, counting, or identifying duplicate elements::
 
      >>> word = 'abracadabra'
      >>> letters = sorted(word)   # Turn string into a sorted list of letters
-     >>> letters 
+     >>> letters
      ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']
      >>> for k, g in itertools.groupby(letters):
      ...    print k, list(g)
-     ... 
+     ...
      a ['a', 'a', 'a', 'a', 'a']
      b ['b', 'b']
      c ['c']
      d ['d']
      r ['r', 'r']
      >>> # List unique letters
-     >>> [k for k, g in groupby(letters)]                     
+     >>> [k for k, g in groupby(letters)]
      ['a', 'b', 'c', 'd', 'r']
      >>> # Count letter occurrences
-     >>> [(k, len(list(g))) for k, g in groupby(letters)]     
+     >>> [(k, len(list(g))) for k, g in groupby(letters)]
      [('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]
 
   (Contributed by Hye-Shik Chang.)
 
 * :mod:`itertools` also gained a function named :func:`tee(iterator, N)` that
   returns *N* independent iterators that replicate *iterator*.  If *N* is omitted,
   the default is 2. ::
 
      >>> L = [1,2,3]
      >>> i1, i2 = itertools.tee(L)
      >>> i1,i2
      (<itertools.tee object at 0x402c2080>, <itertools.tee object at 0x402c2090>)
@@ -1166,25 +1166,25 @@
   :func:`l\*gettext` functions that return messages in the chosen encoding.
   (Contributed by Gustavo Niemeyer.)
 
 * Some keyword arguments were added to the :mod:`logging` package's
   :func:`basicConfig` function to simplify log configuration.  The default
   behavior is to log messages to standard error, but various keyword arguments can
   be specified to log to a particular file, change the logging format, or set the
   logging level. For example::
 
      import logging
      logging.basicConfig(filename='/var/log/application.log',
          level=0,  # Log all messages
-         format='%(levelname):%(process):%(thread):%(message)')	            
+         format='%(levelname):%(process):%(thread):%(message)')
 
   Other additions to the :mod:`logging` package include a :meth:`log(level, msg)`
   convenience method, as well as a :class:`TimedRotatingFileHandler` class that
   rotates its log files at a timed interval.  The module already had
   :class:`RotatingFileHandler`, which rotated logs once the file exceeded a
   certain size.  Both classes derive from a new :class:`BaseRotatingHandler` class
   that can be used to implement other rotating handlers.
 
   (Changes implemented by Vinay Sajip.)
 
 * The :mod:`marshal` module now shares interned strings on unpacking a  data
   structure.  This may shrink the size of certain pickle strings, but the primary
@@ -1419,25 +1419,25 @@
    is
    a
    lengthy
    >>>"""
        L = 'here is a rather lengthy list of words'.split()
        for word in L[:n]:
            print word
 
 Running the above function's tests with :const:`doctest.REPORT_UDIFF` specified,
 you get the following output::
 
    **********************************************************************
-   File ``t.py'', line 15, in g
+   File "t.py", line 15, in g
    Failed example:
        g(4)
    Differences (unified diff with -expected +actual):
        @@ -2,3 +2,3 @@
         is
         a
        -lengthy
        +rather
    **********************************************************************
 
 .. ======================================================================
 
@@ -1542,22 +1542,22 @@
   initialized module object in ``sys.modules``.
 
 * :const:`None` is now a constant; code that binds a new value to  the name
   ``None`` is now a syntax error.
 
 * The :func:`signals.signal` function now raises a :exc:`RuntimeError` exception
   for certain illegal values; previously these errors would pass silently.  For
   example, you can no longer set a handler on the :const:`SIGKILL` signal.
 
 .. ======================================================================
 
 
-.. _acks:
+.. _24acks:
 
 Acknowledgements
 ================
 
 The author would like to thank the following people for offering suggestions,
 corrections and assistance with various drafts of this article: Koray Can, Hye-
 Shik Chang, Michael Dyck, Raymond Hettinger, Brian Hurt, Hamish Lawson, Fredrik
 Lundh, Sean Reifschneider, Sadruddin Rejeb.
 
