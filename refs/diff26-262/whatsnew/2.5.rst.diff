--- rest26/whatsnew/2.5.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/whatsnew/2.5.rst	2009-04-05 05:01:47.000000000 +0900
@@ -1,33 +1,33 @@
 ****************************
-  What's New in Python 2.5  
+  What's New in Python 2.5
 ****************************
 
 :Author: A.M. Kuchling
 
 .. |release| replace:: 1.01
 
 .. $Id: whatsnew25.tex 56611 2007-07-29 08:26:10Z georg.brandl $
 .. Fix XXX comments
 
 This article explains the new features in Python 2.5.  The final release of
 Python 2.5 is scheduled for August 2006; :pep:`356` describes the planned
 release schedule.
 
 The changes in Python 2.5 are an interesting mix of language and library
 improvements. The library enhancements will be more important to Python's user
 community, I think, because several widely-useful packages were added.  New
-modules include ElementTree for XML processing (section :ref:`module-etree`),
-the SQLite database module (section :ref:`module-sqlite`), and the :mod:`ctypes`
-module for calling C functions (section :ref:`module-ctypes`).
+modules include ElementTree for XML processing (:mod:`xml.etree`),
+the SQLite database module (:mod:`sqlite`), and the :mod:`ctypes`
+module for calling C functions.
 
 The language changes are of middling significance.  Some pleasant new features
 were added, but most of them aren't features that you'll use every day.
 Conditional expressions were finally added to the language using a novel syntax;
 see section :ref:`pep-308`.  The new ':keyword:`with`' statement will make
 writing cleanup code easier (section :ref:`pep-343`).  Values can now be passed
 into generators (section :ref:`pep-342`).  Imports are now visible as either
 absolute or relative (section :ref:`pep-328`).  Some corner cases of exception
 handling are handled better (section :ref:`pep-341`).  All these improvements
 are worthwhile, but they're improvements to one specific language feature or
 another; none of them are broad modifications to Python's semantics.
 
@@ -211,25 +211,25 @@
 
 Some simple dependency support was added to Distutils.  The :func:`setup`
 function now has ``requires``, ``provides``, and ``obsoletes`` keyword
 parameters.  When you build a source distribution using the ``sdist`` command,
 the dependency information will be recorded in the :file:`PKG-INFO` file.
 
 Another new keyword parameter is ``download_url``, which should be set to a URL
 for the package's source code.  This means it's now possible to look up an entry
 in the package index, determine the dependencies for a package, and download the
 required packages. ::
 
    VERSION = '1.0'
-   setup(name='PyPackage', 
+   setup(name='PyPackage',
          version=VERSION,
          requires=['numarray', 'zlib (>=1.1.4)'],
          obsoletes=['OldPackage']
          download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'
                        % VERSION),
         )
 
 Another new enhancement to the Python package index at
 http://cheeseshop.python.org is storing source and binary archives for a
 package.  The new :command:`upload` Distutils command will upload a package to
 the repository.
 
@@ -379,25 +379,25 @@
 and this clarified what the statement should mean.  In Python 2.5, you can now
 write::
 
    try:
        block-1 ...
    except Exception1:
        handler-1 ...
    except Exception2:
        handler-2 ...
    else:
        else-block
    finally:
-       final-block 
+       final-block
 
 The code in *block-1* is executed.  If the code raises an exception, the various
 :keyword:`except` blocks are tested: if the exception is of class
 :class:`Exception1`, *handler-1* is executed; otherwise if it's of class
 :class:`Exception2`, *handler-2* is executed, and so forth.  If no exception is
 raised, the *else-block* is executed.
 
 No matter what happened previously, the *final-block* is executed once the code
 block is complete and any raised exceptions handled. Even if there's an error in
 an exception handler or the *else-block* and a new exception is raised, the code
 in the *final-block* is still run.
 
@@ -476,25 +476,25 @@
 
    >>> it = counter(10)
    >>> print it.next()
    0
    >>> print it.next()
    1
    >>> print it.send(8)
    8
    >>> print it.next()
    9
    >>> print it.next()
    Traceback (most recent call last):
-     File ``t.py'', line 15, in ?
+     File "t.py", line 15, in ?
        print it.next()
    StopIteration
 
 :keyword:`yield` will usually return :const:`None`, so you should always check
 for this case.  Don't just use its value in expressions unless you're sure that
 the :meth:`send` method will be the only method used to resume your generator
 function.
 
 In addition to :meth:`send`, there are two other new methods on generators:
 
 * :meth:`throw(type, value=None, traceback=None)` is used to raise an exception
   inside the generator; the exception is raised by the :keyword:`yield` expression
@@ -727,25 +727,25 @@
    class DatabaseConnection:
        ...
        def __exit__ (self, type, value, tb):
            if tb is None:
                # No exception, so commit
                self.commit()
            else:
                # Exception occurred, so rollback.
                self.rollback()
                # return False
 
 
-.. _module-contextlib:
+.. _contextlibmod:
 
 The contextlib module
 ---------------------
 
 The new :mod:`contextlib` module provides some functions and a decorator that
 are useful for writing objects for use with the ':keyword:`with`' statement.
 
 The decorator is called :func:`contextmanager`, and lets you write a single
 generator function instead of defining a new class.  The generator should yield
 exactly one value.  The code up to the :keyword:`yield` will be executed as the
 :meth:`__enter__` method, and the value yielded will be the method's return
 value that will get bound to the variable in the ':keyword:`with`' statement's
@@ -826,26 +826,26 @@
 
 This rearrangement was done because people often want to catch all exceptions
 that indicate program errors.  :exc:`KeyboardInterrupt` and :exc:`SystemExit`
 aren't errors, though, and usually represent an explicit action such as the user
 hitting Control-C or code calling :func:`sys.exit`.  A bare ``except:`` will
 catch all exceptions, so you commonly need to list :exc:`KeyboardInterrupt` and
 :exc:`SystemExit` in order to re-raise them.  The usual pattern is::
 
    try:
        ...
    except (KeyboardInterrupt, SystemExit):
        raise
-   except: 
-       # Log error...  
+   except:
+       # Log error...
        # Continue running program...
 
 In Python 2.5, you can now write ``except Exception`` to achieve the same
 result, catching all the exceptions that usually indicate errors  but leaving
 :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in previous versions,
 a bare ``except:`` still catches all exceptions.
 
 The goal for Python 3.0 is to require any class raised as an exception to derive
 from :exc:`BaseException` or some descendant of :exc:`BaseException`, and future
 releases in the Python 2.x series may begin to enforce this constraint.
 Therefore, I suggest you begin making all your exception classes derive from
 :exc:`Exception` now.  It's been suggested that the bare ``except:`` form should
@@ -938,25 +938,25 @@
 used as slice indexes.
 
 Slicing can't just use the existing :meth:`__int__` method because that method
 is also used to implement coercion to integers.  If slicing used
 :meth:`__int__`, floating-point numbers would also become legal slice indexes
 and that's clearly an undesirable behaviour.
 
 Instead, a new special method called :meth:`__index__` was added.  It takes no
 arguments and returns an integer giving the slice index to use.  For example::
 
    class C:
        def __index__ (self):
-           return self.value  
+           return self.value
 
 The return value must be either a Python integer or long integer. The
 interpreter will check that the type returned is correct, and raises a
 :exc:`TypeError` if this requirement isn't met.
 
 A corresponding :attr:`nb_index` slot was added to the C-level
 :ctype:`PyNumberMethods` structure to let C extensions implement this protocol.
 :cfunc:`PyNumber_Index(obj)` can be used in extension code to call the
 :meth:`__index__` function and retrieve its result.
 
 
 .. seealso::
@@ -1026,27 +1026,27 @@
 
   .. RFE #1491485
 
 * The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword
   parameter analogous to the ``key`` argument for :meth:`sort`.  This parameter
   supplies a function that takes a single argument and is called for every value
   in the list; :func:`min`/:func:`max` will return the element with the
   smallest/largest return value from this function. For example, to find the
   longest string in a list, you can do::
 
      L = ['medium', 'longest', 'short']
      # Prints 'longest'
-     print max(L, key=len)              
+     print max(L, key=len)
      # Prints 'short', because lexicographically 'short' has the largest value
-     print max(L)         
+     print max(L)
 
   (Contributed by Steven Bethard and Raymond Hettinger.)
 
 * Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an
   iterator contains any true or false values.  :func:`any` returns :const:`True`
   if any value returned by the iterator is true; otherwise it will return
   :const:`False`.  :func:`all` returns :const:`True` only if all of the values
   returned by the iterator evaluate as true. (Suggested by Guido van Rossum, and
   implemented by Raymond Hettinger.)
 
 * The result of a class's :meth:`__hash__` method can now be either a long
   integer or a regular integer.  If a long integer is returned, the hash of that
@@ -1061,26 +1061,26 @@
   module contains string literals with 8-bit characters but doesn't have an
   encoding declaration.  In Python 2.4 this triggered a warning, not a syntax
   error.  See :pep:`263`  for how to declare a module's encoding; for example, you
   might add  a line like this near the top of the source file::
 
      # -*- coding: latin1 -*-
 
 * A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to
   compare a Unicode string and an 8-bit string  that can't be converted to Unicode
   using the default ASCII encoding.   The result of the comparison is false::
 
      >>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode
-     __main__:1: UnicodeWarning: Unicode equal comparison failed 
-       to convert both arguments to Unicode - interpreting them 
+     __main__:1: UnicodeWarning: Unicode equal comparison failed
+       to convert both arguments to Unicode - interpreting them
        as being unequal
      False
      >>> chr(127) == unichr(127)   # chr(127) can be converted
      True
 
   Previously this would raise a :class:`UnicodeDecodeError` exception, but in 2.5
   this could result in puzzling problems when accessing a dictionary.  If you
   looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, you'd get a
   :class:`UnicodeDecodeError` exception.  Other changes in 2.5 resulted in this
   exception being raised instead of suppressed by the code in :file:`dictobject.c`
   that implements dictionaries.
 
@@ -1100,25 +1100,25 @@
 
 * The list of base classes in a class definition can now be empty.   As an
   example, this is now legal::
 
      class C():
          pass
 
   (Implemented by Brett Cannon.)
 
 .. ======================================================================
 
 
-.. _interactive:
+.. _25interactive:
 
 Interactive Interpreter Changes
 -------------------------------
 
 In the interactive interpreter, ``quit`` and ``exit``  have long been strings so
 that new users get a somewhat helpful message when they try to quit::
 
    >>> quit
    'Use Ctrl-D (i.e. EOF) to exit.'
 
 In Python 2.5, ``quit`` and ``exit`` are now objects that still produce string
 representations of themselves, but are also callable. Newbies who try ``quit()``
@@ -1202,25 +1202,25 @@
   about 30% faster than in 2.4. (Contributed by Richard Jones, Georg Brandl and
   Sean Reifschneider at the NeedForSpeed sprint.)
 
 * Importing now caches the paths tried, recording whether  they exist or not so
   that the interpreter makes fewer  :cfunc:`open` and :cfunc:`stat` calls on
   startup. (Contributed by Martin von Löwis and Georg Brandl.)
 
   .. Patch 921466
 
 .. ======================================================================
 
 
-.. _modules:
+.. _25modules:
 
 New, Improved, and Removed Modules
 ==================================
 
 The standard library received many enhancements and bug fixes in Python 2.5.
 Here's a partial list of the most notable changes, sorted alphabetically by
 module name. Consult the :file:`Misc/NEWS` file in the source tree for a more
 complete list of changes, or look through the SVN logs for all the details.
 
 * The :mod:`audioop` module now supports the a-LAW encoding, and the code for
   u-LAW encoding has been improved.  (Contributed by Lars Immisch.)
 
@@ -1250,39 +1250,39 @@
      words = """Nel mezzo del cammin di nostra vita
      mi ritrovai per una selva oscura
      che la diritta via era smarrita""".lower().split()
 
      index = defaultdict(list)
 
      for w in words:
          init_letter = w[0]
          index[init_letter].append(w)
 
   Printing ``index`` results in the following output::
 
-     defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'], 
-             'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'], 
-             'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'], 
-             'p': ['per'], 's': ['selva', 'smarrita'], 
+     defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],
+             'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],
+             'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],
+             'p': ['per'], 's': ['selva', 'smarrita'],
              'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}
 
   (Contributed by Guido van Rossum.)
 
 * The :class:`deque` double-ended queue type supplied by the :mod:`collections`
   module now has a :meth:`remove(value)` method that removes the first occurrence
   of *value* in the queue, raising :exc:`ValueError` if the value isn't found.
   (Contributed by Raymond Hettinger.)
 
 * New module: The :mod:`contextlib` module contains helper functions for use
-  with the new ':keyword:`with`' statement.  See section :ref:`module-contextlib`
+  with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod`
   for more about this module.
 
 * New module: The :mod:`cProfile` module is a C implementation of  the existing
   :mod:`profile` module that has much lower overhead. The module's interface is
   the same as :mod:`profile`: you run ``cProfile.run('main()')`` to profile a
   function, can save profile data to a file, etc.  It's not yet known if the
   Hotshot profiler, which is also written in C but doesn't match the
   :mod:`profile` module's interface, will continue to be maintained in future
   versions of Python.  (Contributed by Armin Rigo.)
 
   Also, the :mod:`pstats` module for analyzing the data measured by the profiler
   now supports directing the output to any file object by supplying a *stream*
@@ -1752,26 +1752,26 @@
 .. _module-etree:
 
 The ElementTree package
 -----------------------
 
 A subset of Fredrik Lundh's ElementTree library for processing XML has been
 added to the standard library as :mod:`xml.etree`.  The available modules are
 :mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from
 ElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also
 included.
 
 The rest of this section will provide a brief overview of using ElementTree.
-Full documentation for ElementTree is available at http://effbot.org/zone
-/element-index.htm.
+Full documentation for ElementTree is available at
+http://effbot.org/zone/element-index.htm.
 
 ElementTree represents an XML document as a tree of element nodes. The text
 content of the document is stored as the :attr:`.text` and :attr:`.tail`
 attributes of  (This is one of the major differences between ElementTree and
 the Document Object Model; in the DOM there are many different types of node,
 including :class:`TextNode`.)
 
 The most commonly used parsing function is :func:`parse`, that takes either a
 string (assumed to contain a filename) or a file-like object and returns an
 :class:`ElementTree` instance::
 
    from xml.etree import ElementTree as ET
@@ -1875,35 +1875,35 @@
 replace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds support for
 additional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When
 available, the module uses OpenSSL for fast platform optimized implementations
 of algorithms.
 
 The old :mod:`md5` and :mod:`sha` modules still exist as wrappers around hashlib
 to preserve backwards compatibility.  The new module's interface is very close
 to that of the old modules, but not identical. The most significant difference
 is that the constructor functions for creating new hashing objects are named
 differently. ::
 
    # Old versions
-   h = md5.md5()   
-   h = md5.new()   
+   h = md5.md5()
+   h = md5.new()
 
-   # New version 
+   # New version
    h = hashlib.md5()
 
    # Old versions
-   h = sha.sha()   
-   h = sha.new()   
+   h = sha.sha()
+   h = sha.new()
 
-   # New version 
+   # New version
    h = hashlib.sha1()
 
    # Hash that weren't previously available
    h = hashlib.sha224()
    h = hashlib.sha256()
    h = hashlib.sha384()
    h = hashlib.sha512()
 
    # Alternative form
    h = hashlib.new('md5')          # Provide algorithm as a string
 
 Once a hash object has been created, its methods are the same as before:
@@ -2182,25 +2182,25 @@
   *stacklevel* of 1 is the function calling :cfunc:`PyErr_WarnEx`, 2 is the
   function above that, and so forth.  (Added by Neal Norwitz.)
 
 * The CPython interpreter is still written in C, but  the code can now be
   compiled with a C++ compiler without errors.   (Implemented by Anthony Baxter,
   Martin von Löwis, Skip Montanaro.)
 
 * The :cfunc:`PyRange_New` function was removed.  It was never documented, never
   used in the core code, and had dangerously lax error checking.  In the unlikely
   case that your extensions were using it, you can replace it by something like
   the following::
 
-     range = PyObject_CallFunction((PyObject*) &PyRange_Type, "lll", 
+     range = PyObject_CallFunction((PyObject*) &PyRange_Type, "lll",
                                    start, stop, step);
 
 .. ======================================================================
 
 
 .. _ports:
 
 Port-Specific Changes
 ---------------------
 
 * MacOS X (10.3 and higher): dynamic loading of modules now uses the
   :cfunc:`dlopen` function instead of MacOS-specific functions.
@@ -2263,24 +2263,22 @@
   allow processing more data on 64-bit machines.  Extension code may need to make
   the same change to avoid warnings and to support 64-bit machines.  See the
   earlier section :ref:`pep-353` for a discussion of this change.
 
 * C API:  The obmalloc changes mean that  you must be careful to not mix usage
   of the :cfunc:`PyMem_\*` and :cfunc:`PyObject_\*` families of functions. Memory
   allocated with  one family's :cfunc:`\*_Malloc` must be  freed with the
   corresponding family's :cfunc:`\*_Free` function.
 
 .. ======================================================================
 
 
-.. _acks:
-
 Acknowledgements
 ================
 
 The author would like to thank the following people for offering suggestions,
 corrections and assistance with various drafts of this article: Georg Brandl,
 Nick Coghlan, Phillip J. Eby, Lars Gustäbel, Raymond Hettinger, Ralf W. Grosse-
 Kunstleve, Kent Johnson, Iain Lowe, Martin von Löwis, Fredrik Lundh, Andrew
 McNamara, Skip Montanaro, Gustavo Niemeyer, Paul Prescod, James Pryor, Mike
 Rovner, Scott Weikart, Barry Warsaw, Thomas Wouters.
 
