--- rest26/whatsnew/2.3.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/whatsnew/2.3.rst	2009-04-05 05:01:47.000000000 +0900
@@ -1,14 +1,14 @@
 ****************************
-  What's New in Python 2.3  
+  What's New in Python 2.3
 ****************************
 
 :Author: A.M. Kuchling
 
 .. |release| replace:: 1.01
 
 .. $Id: whatsnew23.tex 54631 2007-03-31 11:58:36Z georg.brandl $
 
 This article explains the new features in Python 2.3.  Python 2.3 was released
 on July 29, 2003.
 
 The main themes for Python 2.3 are polishing some of the features added in 2.2,
@@ -292,25 +292,25 @@
 format archive.  You don't need to import the module explicitly; it will be
 automatically imported if a ZIP archive's filename is added to ``sys.path``.
 For example::
 
    amk@nyman:~/src/python$ unzip -l /tmp/example.zip
    Archive:  /tmp/example.zip
      Length     Date   Time    Name
     --------    ----   ----    ----
         8467  11-26-02 22:30   jwzthreading.py
     --------                   -------
         8467                   1 file
    amk@nyman:~/src/python$ ./python
-   Python 2.3 (#1, Aug 1 2003, 19:54:32) 
+   Python 2.3 (#1, Aug 1 2003, 19:54:32)
    >>> import sys
    >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path
    >>> import jwzthreading
    >>> jwzthreading.__file__
    '/tmp/example.zip/jwzthreading.py'
    >>>
 
 An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP
 archive can contain any kind of files, but only files named :file:`\*.py`,
 :file:`\*.pyc`, or :file:`\*.pyo` can be imported.  If an archive only contains
 :file:`\*.py` files, Python will not attempt to modify the archive by adding the
 corresponding :file:`\*.pyc` file, meaning that if a ZIP archive doesn't contain
@@ -662,25 +662,25 @@
 classify the software.
 
 Here's an example :file:`setup.py` with classifiers, written to be compatible
 with older versions of the Distutils::
 
    from distutils import core
    kw = {'name': "Quixote",
          'version': "0.5.1",
          'description': "A highly Pythonic Web application framework",
          # ...
          }
 
-   if (hasattr(core, 'setup_keywords') and 
+   if (hasattr(core, 'setup_keywords') and
        'classifiers' in core.setup_keywords):
        kw['classifiers'] = \
            ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',
             'Environment :: No Input/Output (Daemon)',
             'Intended Audience :: Developers'],
 
    core.setup(**kw)
 
 The full list of classifiers can be obtained by running  ``python setup.py
 register --list-classifiers``.
 
 
@@ -1018,25 +1018,25 @@
      >>>
 
   There's also a new class method,  :meth:`dict.fromkeys(iterable, value)`, that
   creates a dictionary with keys taken from the supplied iterator *iterable* and
   all values set to *value*, defaulting to ``None``.
 
   (Patches contributed by Raymond Hettinger.)
 
   Also, the :func:`dict` constructor now accepts keyword arguments to simplify
   creating small dictionaries::
 
      >>> dict(red=1, blue=2, green=3, black=4)
-     {'blue': 2, 'black': 4, 'green': 3, 'red': 1}    
+     {'blue': 2, 'black': 4, 'green': 3, 'red': 1}
 
   (Contributed by Just van Rossum.)
 
 * The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so
   you can no longer disable assertions by assigning to ``__debug__``. Running
   Python with the :option:`-O` switch will still generate code that doesn't
   execute any assertions.
 
 * Most type objects are now callable, so you can use them to create new objects
   such as functions, classes, and modules.  (This means that the :mod:`new` module
   can be deprecated in a future Python version, because you can now use the type
   objects available in the :mod:`types` module.) For example, you can create a new
@@ -1613,25 +1613,25 @@
      ...         except ValueError:
      ...             self.keylist.append(key)
      ...             self.valuelist.append(value)
      ...     def __delitem__(self, key):
      ...         try:
      ...             i = self.keylist.index(key)
      ...         except ValueError:
      ...             raise KeyError
      ...         self.keylist.pop(i)
      ...         self.valuelist.pop(i)
      ...     def keys(self):
      ...         return list(self.keylist)
-     ... 
+     ...
      >>> s = SeqDict()
      >>> dir(s)      # See that other dictionary methods are implemented
      ['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',
       '__init__', '__iter__', '__len__', '__module__', '__repr__',
       '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',
       'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',
       'setdefault', 'update', 'valuelist', 'values']
 
   (Contributed by Raymond Hettinger.)
 
 * The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output
   in a particular encoding by providing an optional encoding argument to the
@@ -1770,25 +1770,25 @@
 
 The help message is automatically generated for you::
 
    $ ./python opt.py --help
    usage: opt.py [options]
 
    options:
      -h, --help            show this help message and exit
      -iINPUT, --input=INPUT
                            set input filename
      -lLENGTH, --length=LENGTH
                            set maximum length of output
-   $ 
+   $
 
 See the module's documentation for more details.
 
 
 Optik was written by Greg Ward, with suggestions from the readers of the Getopt
 SIG.
 
 .. ======================================================================
 
 
 .. _section-pymalloc:
 
@@ -2053,25 +2053,25 @@
          kw['depends'] = ['foo.h']
      ext = Extension(**kw)
 
 * Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning`
   warning.
 
 * Names of extension types defined by the modules included with Python now
   contain the module and a ``'.'`` in front of the type name.
 
 .. ======================================================================
 
 
-.. _acks:
+.. _23acks:
 
 Acknowledgements
 ================
 
 The author would like to thank the following people for offering suggestions,
 corrections and assistance with various drafts of this article: Jeff Bauer,
 Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, Scott David
 Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, Raymond Hettinger,
 Michael Hudson, Chris Lambert, Detlef Lannert, Martin von LÃ¶wis, Andrew
 MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans
 Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, Roman
 Suzi, Jason Tishler, Just van Rossum.
