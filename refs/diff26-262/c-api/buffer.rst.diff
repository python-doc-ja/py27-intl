--- rest26/c-api/buffer.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/c-api/buffer.rst	2009-04-05 05:01:43.000000000 +0900
@@ -21,25 +21,25 @@
 arrays. The string object exposes the character contents in the buffer
 interface's byte-oriented form. An array can also expose its contents, but it
 should be noted that array elements may be multi-byte values.
 
 An example user of the buffer interface is the file object's :meth:`write`
 method. Any object that can export a series of bytes through the buffer
 interface can be written to a file. There are a number of format codes to
 :cfunc:`PyArg_ParseTuple` that operate against an object's buffer interface,
 returning data from the target object.
 
 .. index:: single: PyBufferProcs
 
-More information on the buffer interface is provided in the section 
+More information on the buffer interface is provided in the section
 :ref:`buffer-structs`, under the description for :ctype:`PyBufferProcs`.
 
 A "buffer object" is defined in the :file:`bufferobject.h` header (included by
 :file:`Python.h`). These objects look very similar to string objects at the
 Python programming level: they support slicing, indexing, concatenation, and
 some other standard string operations. However, their data can come from one of
 two sources: from a block of memory, or from another object which exports the
 buffer interface.
 
 Buffer objects are useful as a way to expose the data from another object's
 buffer interface to the Python programmer. They can also be used as a zero-copy
 slicing mechanism. Using their ability to reference a block of memory, it is
