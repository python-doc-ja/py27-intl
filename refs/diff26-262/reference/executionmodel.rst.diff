--- rest26/reference/executionmodel.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/reference/executionmodel.rst	2009-04-07 00:06:52.000000000 +0900
@@ -78,27 +78,28 @@
    single: UnboundLocalError
 
 When a name is not found at all, a :exc:`NameError` exception is raised.  If the
 name refers to a local variable that has not been bound, a
 :exc:`UnboundLocalError` exception is raised.  :exc:`UnboundLocalError` is a
 subclass of :exc:`NameError`.
 
 .. index:: statement: from
 
 The following constructs bind names: formal parameters to functions,
 :keyword:`import` statements, class and function definitions (these bind the
 class or function name in the defining block), and targets that are identifiers
-if occurring in an assignment, :keyword:`for` loop header, or in the second
-position of an :keyword:`except` clause header.  The :keyword:`import` statement
-of the form "``from ...import *``" binds all names defined in the imported
+if occurring in an assignment, :keyword:`for` loop header, in the second
+position of an :keyword:`except` clause header or after :keyword:`as` in a
+:keyword:`with` statement.  The :keyword:`import` statement
+of the form ``from ... import *`` binds all names defined in the imported
 module, except those beginning with an underscore.  This form may only be used
 at the module level.
 
 A target occurring in a :keyword:`del` statement is also considered bound for
 this purpose (though the actual semantics are to unbind the name).  It is
 illegal to unbind a name that is referenced by an enclosing scope; the compiler
 will report a :exc:`SyntaxError`.
 
 Each assignment or import statement occurs within a block defined by a class or
 function definition or at the module level (the top-level code block).
 
 If a name binding operation occurs anywhere within a code block, all uses of the
