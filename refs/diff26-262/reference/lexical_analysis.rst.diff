--- rest26/reference/lexical_analysis.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/reference/lexical_analysis.rst	2009-04-05 05:01:44.000000000 +0900
@@ -332,31 +332,31 @@
 
 Keywords
 --------
 
 .. index::
    single: keyword
    single: reserved word
 
 The following identifiers are used as reserved words, or *keywords* of the
 language, and cannot be used as ordinary identifiers.  They must be spelled
 exactly as written here::
 
-   and       del       from      not       while    
-   as        elif      global    or        with     
-   assert    else      if        pass      yield    
-   break     except    import    print              
-   class     exec      in        raise              
-   continue  finally   is        return             
-   def       for       lambda    try 
+   and       del       from      not       while
+   as        elif      global    or        with
+   assert    else      if        pass      yield
+   break     except    import    print
+   class     exec      in        raise
+   continue  finally   is        return
+   def       for       lambda    try
 
 .. versionchanged:: 2.4
    :const:`None` became a constant and is now recognized by the compiler as a name
    for the built-in object :const:`None`.  Although it is not a keyword, you cannot
    assign a different object to it.
 
 .. versionchanged:: 2.5
    Both :keyword:`as` and :keyword:`with` are only recognized when the
    ``with_statement`` future feature has been enabled. It will always be enabled in
    Python 2.6.  See section :ref:`with` for details.  Note that using :keyword:`as`
    and :keyword:`with` as identifiers will always issue a warning, even when the
    ``with_statement`` future directive is not in effect.
@@ -596,71 +596,74 @@
 
 Numeric literals
 ----------------
 
 .. index::
    single: number
    single: numeric literal
    single: integer literal
    single: plain integer literal
    single: long integer literal
    single: floating point literal
    single: hexadecimal literal
+   single: binary literal
    single: octal literal
    single: decimal literal
    single: imaginary literal
    single: complex; literal
 
 There are four types of numeric literals: plain integers, long integers,
 floating point numbers, and imaginary numbers.  There are no complex literals
 (complex numbers can be formed by adding a real number and an imaginary number).
 
 Note that numeric literals do not include a sign; a phrase like ``-1`` is
 actually an expression composed of the unary operator '``-``' and the literal
 ``1``.
 
 
 .. _integers:
 
 Integer and long integer literals
 ---------------------------------
 
 Integer and long integer literals are described by the following lexical
 definitions:
 
 .. productionlist::
    longinteger: `integer` ("l" | "L")
-   integer: `decimalinteger` | `octinteger` | `hexinteger`
+   integer: `decimalinteger` | `octinteger` | `hexinteger` | `bininteger`
    decimalinteger: `nonzerodigit` `digit`* | "0"
-   octinteger: "0" `octdigit`+
+   octinteger: "0" ("o" | "O") `octdigit`+ | "0" `octdigit`+
    hexinteger: "0" ("x" | "X") `hexdigit`+
+   bininteger: "0" ("b" | "B") `bindigit`+
    nonzerodigit: "1"..."9"
    octdigit: "0"..."7"
+   bindigit: "0" | "1"
    hexdigit: `digit` | "a"..."f" | "A"..."F"
 
 Although both lower case ``'l'`` and upper case ``'L'`` are allowed as suffix
 for long integers, it is strongly recommended to always use ``'L'``, since the
 letter ``'l'`` looks too much like the digit ``'1'``.
 
 Plain integer literals that are above the largest representable plain integer
 (e.g., 2147483647 when using 32-bit arithmetic) are accepted as if they were
 long integers instead. [#]_  There is no limit for long integer literals apart
 from what can be stored in available memory.
 
 Some examples of plain integer literals (first row) and long integer literals
 (second and third rows)::
 
    7     2147483647                        0177
    3L    79228162514264337593543950336L    0377L   0x100000000L
-         79228162514264337593543950336             0xdeadbeef						    
+         79228162514264337593543950336             0xdeadbeef
 
 
 .. _floating:
 
 Floating point literals
 -----------------------
 
 Floating point literals are described by the following lexical definitions:
 
 .. productionlist::
    floatnumber: `pointfloat` | `exponentfloat`
    pointfloat: [`intpart`] `fraction` | `intpart` "."
@@ -689,25 +692,25 @@
 
 Imaginary literals are described by the following lexical definitions:
 
 .. productionlist::
    imagnumber: (`floatnumber` | `intpart`) ("j" | "J")
 
 An imaginary literal yields a complex number with a real part of 0.0.  Complex
 numbers are represented as a pair of floating point numbers and have the same
 restrictions on their range.  To create a complex number with a nonzero real
 part, add a floating point number to it, e.g., ``(3+4j)``.  Some examples of
 imaginary literals::
 
-   3.14j   10.j    10j     .001j   1e100j  3.14e-10j 
+   3.14j   10.j    10j     .001j   1e100j  3.14e-10j
 
 
 .. _operators:
 
 Operators
 =========
 
 .. index:: single: operators
 
 The following tokens are operators::
 
    +       -       *       **      /       //      %
