--- rest26/using/windows.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/using/windows.rst	2009-04-05 05:01:40.000000000 +0900
@@ -79,27 +79,27 @@
 
 Configuring Python
 ==================
 
 In order to run Python flawlessly, you might have to change certain environment
 settings in Windows.
 
 
 Excursus: Setting environment variables
 ---------------------------------------
 
 Windows has a built-in dialog for changing environment variables (following
-guide applies to XP classical view): Right-click the icon for your machine 
-(usually located on your Desktop and called "My Computer") and choose 
-:menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab 
+guide applies to XP classical view): Right-click the icon for your machine
+(usually located on your Desktop and called "My Computer") and choose
+:menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab
 and click the :guilabel:`Environment Variables` button.
 
 In short, your path is:
 
     :menuselection:`My Computer
     --> Properties
     --> Advanced
     --> Environment Variables`
 
 In this dialog, you can add or modify User and System variables. To change
 System variables, you need non-restricted access to your machine
 (i.e. Administrator rights).
@@ -184,29 +184,29 @@
 open even if the program uses a GUI.  If you do not want this to happen, use the
 extension ``.pyw`` which will cause the script to be executed by
 :program:`pythonw.exe` by default (both executables are located in the top-level
 of your Python installation directory).  This suppresses the terminal window on
 startup.
 
 You can also make all ``.py`` scripts execute with :program:`pythonw.exe`,
 setting this through the usual facilities, for example (might require
 administrative rights):
 
 #. Launch a command prompt.
 #. Associate the correct file group with ``.py`` scripts::
-   
+
       assoc .py=Python.File
 
 #. Redirect all Python files to the new executable::
-   
+
       ftype Python.File=C:\Path\to\pythonw.exe "%1" %*
 
 
 Additional modules
 ==================
 
 Even though Python aims to be portable among all platforms, there are features
 that are unique to Windows.  A couple of modules, both in the standard library
 and external, and snippets exist to use these features.
 
 The Windows-specific standard modules are documented in
 :ref:`mswin-specific-services`.
