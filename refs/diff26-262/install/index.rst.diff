--- rest26/install/index.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/install/index.rst	2009-04-05 05:02:09.000000000 +0900
@@ -1,33 +1,33 @@
 .. highlightlang:: none
 
 .. _install-index:
 
 *****************************
-  Installing Python Modules  
+  Installing Python Modules
 *****************************
 
 :Author: Greg Ward
 :Release: |version|
 :Date: |today|
 
 .. TODO: Fill in XXX comments
 
 .. The audience for this document includes people who don't know anything
    about Python and aren't about to learn the language just in order to
    install and maintain it for their users, i.e. system administrators.
    Thus, I have to be sure to explain the basics at some point:
    sys.path and PYTHONPATH at least.  Should probably give pointers to
    other docs on "import site", PYTHONSTARTUP, PYTHONHOME, etc.
-   
+
    Finally, it might be useful to include all the material from my "Care
    and Feeding of a Python Installation" talk in here somewhere.  Yow!
 
 .. topic:: Abstract
 
    This document describes the Python Distribution Utilities ("Distutils") from the
    end-user's point-of-view, describing how to extend the capabilities of a
    standard Python installation by building and installing third-party Python
    modules and extensions.
 
 
 .. _inst-intro:
@@ -259,25 +259,25 @@
 :file:`{prefix}` and :file:`{exec-prefix}` stand for the directories that Python
 is installed to, and where it finds its libraries at run-time.  They are always
 the same under Windows, and very often the same under Unix and Mac OS X.  You
 can find out what your Python installation uses for :file:`{prefix}` and
 :file:`{exec-prefix}` by running Python in interactive mode and typing a few
 simple commands. Under Unix, just type ``python`` at the shell prompt.  Under
 Windows, choose :menuselection:`Start --> Programs --> Python X.Y -->
 Python (command line)`.   Once the interpreter is started, you type Python code
 at the prompt.  For example, on my Linux system, I type the three Python
 statements shown below, and get the output as shown, to find out my
 :file:`{prefix}` and :file:`{exec-prefix}`::
 
-   Python 2.4 (#26, Aug  7 2004, 17:19:02) 
+   Python 2.4 (#26, Aug  7 2004, 17:19:02)
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import sys
    >>> sys.prefix
    '/usr'
    >>> sys.exec_prefix
    '/usr'
 
 If you don't want to install modules to the standard location, or if you don't
 have permission to write there, then you need to read about alternate
 installations in section :ref:`inst-alt-install`.  If you want to customize your
 installation directories more heavily, see section :ref:`inst-custom-install` on
 custom installations.
@@ -578,29 +578,29 @@
 Modifying Python's Search Path
 ------------------------------
 
 When the Python interpreter executes an :keyword:`import` statement, it searches
 for both Python code and extension modules along a search path.  A default value
 for the path is configured into the Python binary when the interpreter is built.
 You can determine the path by importing the :mod:`sys` module and printing the
 value of ``sys.path``.   ::
 
    $ python
    Python 2.2 (#11, Oct  3 2002, 13:31:27)
    [GCC 2.96 20000731 (Red Hat Linux 7.3 2.96-112)] on linux2
-   Type ``help'', ``copyright'', ``credits'' or ``license'' for more information.
+   Type "help", "copyright", "credits" or "license" for more information.
    >>> import sys
    >>> sys.path
-   ['', '/usr/local/lib/python2.3', '/usr/local/lib/python2.3/plat-linux2', 
-    '/usr/local/lib/python2.3/lib-tk', '/usr/local/lib/python2.3/lib-dynload', 
+   ['', '/usr/local/lib/python2.3', '/usr/local/lib/python2.3/plat-linux2',
+    '/usr/local/lib/python2.3/lib-tk', '/usr/local/lib/python2.3/lib-dynload',
     '/usr/local/lib/python2.3/site-packages']
    >>>
 
 The null string in ``sys.path`` represents the current working directory.
 
 The expected convention for locally installed packages is to put them in the
 :file:`{...}/site-packages/` directory, but you may want to install Python
 modules into some arbitrary directory.  For example, your site may have a
 convention of keeping all software related to the web server under :file:`/www`.
 Add-on Python modules might then belong in :file:`/www/python`, and in order to
 import them, this directory must be added to ``sys.path``.  There are several
 different ways to add the directory.
