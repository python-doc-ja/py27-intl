--- rest26/library/email.message.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/email.message.rst	2009-04-15 11:13:50.000000000 +0900
@@ -364,31 +364,31 @@
       :mailheader:`Content-Type`.
 
       Parameter keys are always compared case insensitively.  The return value
       can either be a string, or a 3-tuple if the parameter was :rfc:`2231`
       encoded.  When it's a 3-tuple, the elements of the value are of the form
       ``(CHARSET, LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and
       ``LANGUAGE`` can be ``None``, in which case you should consider ``VALUE``
       to be encoded in the ``us-ascii`` charset.  You can usually ignore
       ``LANGUAGE``.
 
       If your application doesn't care whether the parameter was encoded as in
       :rfc:`2231`, you can collapse the parameter value by calling
-      :func:`email.Utils.collapse_rfc2231_value`, passing in the return value
+      :func:`email.utils.collapse_rfc2231_value`, passing in the return value
       from :meth:`get_param`.  This will return a suitably decoded Unicode
       string whn the value is a tuple, or the original string unquoted if it
       isn't.  For example::
 
          rawparam = msg.get_param('foo')
-         param = email.Utils.collapse_rfc2231_value(rawparam)
+         param = email.utils.collapse_rfc2231_value(rawparam)
 
       In any case, the parameter value (either the returned string, or the
       ``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set
       to ``False``.
 
       .. versionchanged:: 2.2.2
          *unquote* argument added, and 3-tuple return value possible.
 
 
    .. method:: set_param(param, value[, header[, requote[, charset[, language]]]])
 
       Set a parameter in the :mailheader:`Content-Type` header.  If the
@@ -436,33 +436,33 @@
       header is also added.
 
       .. versionadded:: 2.2.2
 
 
    .. method:: get_filename([failobj])
 
       Return the value of the ``filename`` parameter of the
       :mailheader:`Content-Disposition` header of the message.  If the header
       does not have a ``filename`` parameter, this method falls back to looking
       for the ``name`` parameter.  If neither is found, or the header is
       missing, then *failobj* is returned.  The returned string will always be
-      unquoted as per :meth:`Utils.unquote`.
+      unquoted as per :func:`email.utils.unquote`.
 
 
    .. method:: get_boundary([failobj])
 
       Return the value of the ``boundary`` parameter of the
       :mailheader:`Content-Type` header of the message, or *failobj* if either
       the header is missing, or has no ``boundary`` parameter.  The returned
-      string will always be unquoted as per :meth:`Utils.unquote`.
+      string will always be unquoted as per :func:`email.utils.unquote`.
 
 
    .. method:: set_boundary(boundary)
 
       Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to
       *boundary*.  :meth:`set_boundary` will always quote *boundary* if
       necessary.  A :exc:`HeaderParseError` is raised if the message object has
       no :mailheader:`Content-Type` header.
 
       Note that using this method is subtly different than deleting the old
       :mailheader:`Content-Type` header and adding a new one with the new
       boundary via :meth:`add_header`, because :meth:`set_boundary` preserves
