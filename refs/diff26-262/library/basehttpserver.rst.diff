--- rest26/library/basehttpserver.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/basehttpserver.rst	2009-04-07 00:06:53.000000000 +0900
@@ -6,36 +6,35 @@
 
 .. note::
    The :mod:`BaseHTTPServer` module has been merged into :mod:`http.server` in
    Python 3.0.  The :term:`2to3` tool will automatically adapt imports when
    converting your sources to 3.0.
 
 
 .. index::
    pair: WWW; server
    pair: HTTP; protocol
    single: URL
    single: httpd
-
-.. index::
    module: SimpleHTTPServer
    module: CGIHTTPServer
 
 This module defines two classes for implementing HTTP servers (Web servers).
 Usually, this module isn't used directly, but is used as a basis for building
 functioning Web servers. See the :mod:`SimpleHTTPServer` and
 :mod:`CGIHTTPServer` modules.
 
 The first class, :class:`HTTPServer`, is a :class:`SocketServer.TCPServer`
-subclass.  It creates and listens at the HTTP socket, dispatching the requests
+subclass, and therefore implements the :class:`SocketServer.BaseServer`
+interface.  It creates and listens at the HTTP socket, dispatching the requests
 to a handler.  Code to create and run the server looks like this::
 
    def run(server_class=BaseHTTPServer.HTTPServer,
            handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
        server_address = ('', 8000)
        httpd = server_class(server_address, handler_class)
        httpd.serve_forever()
 
 
 .. class:: HTTPServer(server_address, RequestHandlerClass)
 
    This class builds on the :class:`TCPServer` class by storing the server
@@ -260,21 +259,40 @@
 
    .. method:: log_date_time_string()
 
       Returns the current date and time, formatted for logging.
 
 
    .. method:: address_string()
 
       Returns the client address, formatted for logging. A name lookup is
       performed on the client's IP address.
 
 
+More examples
+-------------
+
+To create a server that doesn't run forever, but until some condition is
+fulfilled::
+
+   def run_while_true(server_class=BaseHTTPServer.HTTPServer,
+                      handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
+       """
+       This assumes that keep_running() is a function of no arguments which
+       is tested initially and after each request.  If its return value
+       is true, the server continues.
+       """
+       server_address = ('', 8000)
+       httpd = server_class(server_address, handler_class)
+       while keep_running():
+           httpd.handle_request()
+
+
 .. seealso::
 
    Module :mod:`CGIHTTPServer`
       Extended request handler that supports CGI scripts.
 
    Module :mod:`SimpleHTTPServer`
-      Basic request handler that limits response to files actually under the document
-      root.
+      Basic request handler that limits response to files actually under the
+      document root.
 
