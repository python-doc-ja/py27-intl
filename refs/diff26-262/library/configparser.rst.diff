--- rest26/library/configparser.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/configparser.rst	2009-04-05 05:02:09.000000000 +0900
@@ -2,27 +2,27 @@
 =================================================
 
 .. module:: ConfigParser
    :synopsis: Configuration file parser.
 
 .. moduleauthor:: Ken Manheimer <klm@zope.com>
 .. moduleauthor:: Barry Warsaw <bwarsaw@python.org>
 .. moduleauthor:: Eric S. Raymond <esr@thyrsus.com>
 .. sectionauthor:: Christopher G. Petrilli <petrilli@amber.org>
 
 .. note::
 
-   The :mod:`ConfigParser` module has been renamed to `configparser` in Python
-   3.0.  The :term:`2to3` tool will automatically adapt imports when converting
-   your sources to 3.0.
+   The :mod:`ConfigParser` module has been renamed to :mod:`configparser` in
+   Python 3.0.  The :term:`2to3` tool will automatically adapt imports when
+   converting your sources to 3.0.
 
 .. index::
    pair: .ini; file
    pair: configuration; file
    single: ini file
    single: Windows ini file
 
 This module defines the class :class:`ConfigParser`.   The :class:`ConfigParser`
 class implements a basic configuration file parser language which provides a
 structure similar to what you would find on Microsoft Windows INI files.  You
 can use this to write Python programs which can be customized by end users
 easily.
@@ -67,41 +67,41 @@
    The basic configuration object.  When *defaults* is given, it is initialized
    into the dictionary of intrinsic defaults.  When *dict_type* is given, it will
    be used to create the dictionary objects for the list of sections, for the
    options within a section, and for the default values. This class does not
    support the magical interpolation behavior.
 
    .. versionadded:: 2.3
 
    .. versionchanged:: 2.6
       *dict_type* was added.
 
 
-.. class:: ConfigParser([defaults])
+.. class:: ConfigParser([defaults[, dict_type]])
 
    Derived class of :class:`RawConfigParser` that implements the magical
    interpolation feature and adds optional arguments to the :meth:`get` and
    :meth:`items` methods.  The values in *defaults* must be appropriate for the
    ``%()s`` string interpolation.  Note that *__name__* is an intrinsic default;
    its value is the section name, and will override any value provided in
    *defaults*.
 
    All option names used in interpolation will be passed through the
    :meth:`optionxform` method just like any other option name reference.  For
    example, using the default implementation of :meth:`optionxform` (which converts
    option names to lower case), the values ``foo %(bar)s`` and ``foo %(BAR)s`` are
    equivalent.
 
 
-.. class:: SafeConfigParser([defaults])
+.. class:: SafeConfigParser([defaults[, dict_type]])
 
    Derived class of :class:`ConfigParser` that implements a more-sane variant of
    the magical interpolation feature.  This implementation is more predictable as
    well. New applications should prefer this version if they don't need to be
    compatible with older versions of Python.
 
    .. XXX Need to explain what's safer/more predictable about it.
 
    .. versionadded:: 2.3
 
 
 .. exception:: NoSectionError
