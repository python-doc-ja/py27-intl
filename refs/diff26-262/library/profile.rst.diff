--- rest26/library/profile.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/profile.rst	2009-04-05 05:02:09.000000000 +0900
@@ -42,46 +42,46 @@
    single: profiling, deterministic
 
 A :dfn:`profiler` is a program that describes the run time performance
 of a program, providing a variety of statistics.  This documentation
 describes the profiler functionality provided in the modules
 :mod:`cProfile`, :mod:`profile` and :mod:`pstats`.  This profiler
 provides :dfn:`deterministic profiling` of Python programs.  It also
 provides a series of report generation tools to allow users to rapidly
 examine the results of a profile operation.
 
 The Python standard library provides three different profilers:
 
-#. :mod:`cProfile` is recommended for most users; it's a C extension 
+#. :mod:`cProfile` is recommended for most users; it's a C extension
    with reasonable overhead
-   that makes it suitable for profiling long-running programs. 
+   that makes it suitable for profiling long-running programs.
    Based on :mod:`lsprof`,
-   contributed by Brett Rosen and Ted Czotter.  
+   contributed by Brett Rosen and Ted Czotter.
 
    .. versionadded:: 2.5
 
 #. :mod:`profile`, a pure Python module whose interface is imitated by
-   :mod:`cProfile`.  Adds significant overhead to profiled programs. 
-   If you're trying to extend 
+   :mod:`cProfile`.  Adds significant overhead to profiled programs.
+   If you're trying to extend
    the profiler in some way, the task might be easier with this module.
    Copyright Â© 1994, by InfoSeek Corporation.
 
    .. versionchanged:: 2.4
       Now also reports the time spent in calls to built-in functions and methods.
 
 #. :mod:`hotshot` was an experimental C module that focused on minimizing
    the overhead of profiling, at the expense of longer data
    post-processing times.  It is no longer maintained and may be
    dropped in a future version of Python.
- 
+
 
    .. versionchanged:: 2.5
       The results should be more meaningful than in the past: the timing core
       contained a critical bug.
 
 The :mod:`profile` and :mod:`cProfile` modules export the same interface, so
 they are mostly interchangeable; :mod:`cProfile` has a much lower overhead but
 is newer and might not be available on all systems.
 :mod:`cProfile` is really a compatibility layer on top of the internal
 :mod:`_lsprof` module.  The :mod:`hotshot` module is reserved for specialized
 usage.
 
@@ -267,42 +267,42 @@
 
       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)
         43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)
        ...
 
    The first line indicates that 2706 calls were monitored.  Of those calls, 2004
    were :dfn:`primitive`.  We define :dfn:`primitive` to mean that the call was not
    induced via recursion. The next line: ``Ordered by: standard name``, indicates
    that the text string in the far right column was used to sort the output. The
    column headings include:
 
-   ncalls 
+   ncalls
       for the number of calls,
 
-   tottime 
+   tottime
       for the total time spent in the given function (and excluding time made in calls
       to sub-functions),
 
-   percall 
+   percall
       is the quotient of ``tottime`` divided by ``ncalls``
 
-   cumtime 
+   cumtime
       is the total time spent in this and all subfunctions (from invocation till
       exit). This figure is accurate *even* for recursive functions.
 
-   percall 
+   percall
       is the quotient of ``cumtime`` divided by primitive calls
 
-   filename:lineno(function) 
+   filename:lineno(function)
       provides the respective data of each function
 
    When there are two numbers in the first column (for example, ``43/3``), then the
    latter is the number of primitive calls, and the former is the actual number of
    calls.  Note that when the function does not recurse, these two values are the
    same, and only the single figure is printed.
 
 
 .. function:: runctx(command, globals, locals[, filename])
 
    This function is similar to :func:`run`, with added arguments to supply the
    globals and locals dictionaries for the *command* string.
