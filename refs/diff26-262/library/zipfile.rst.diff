--- rest26/library/zipfile.rst	2009-01-18 12:18:11.000000000 +0900
+++ rest262/library/zipfile.rst	2009-04-05 05:02:09.000000000 +0900
@@ -191,25 +191,25 @@
 
    Extract a member from the archive to the current working directory; *member*
    must be its full name or a :class:`ZipInfo` object).  Its file information is
    extracted as accurately as possible.  *path* specifies a different directory
    to extract to.  *member* can be a filename or a :class:`ZipInfo` object.
    *pwd* is the password used for encrypted files.
 
    .. versionadded:: 2.6
 
 
 .. method:: ZipFile.extractall([path[, members[, pwd]]])
 
-   Extract all members from the archive to the current working directory.  *path* 
+   Extract all members from the archive to the current working directory.  *path*
    specifies a different directory to extract to.  *members* is optional and must
    be a subset of the list returned by :meth:`namelist`.  *pwd* is the password
    used for encrypted files.
 
    .. versionadded:: 2.6
 
 
 .. method:: ZipFile.printdir()
 
    Print a table of contents for the archive to ``sys.stdout``.
 
 
@@ -271,43 +271,43 @@
 .. method:: ZipFile.writestr(zinfo_or_arcname, bytes)
 
    Write the string *bytes* to the archive; *zinfo_or_arcname* is either the file
    name it will be given in the archive, or a :class:`ZipInfo` instance.  If it's
    an instance, at least the filename, date, and time must be given.  If it's a
    name, the date and time is set to the current date and time. The archive must be
    opened with mode ``'w'`` or ``'a'`` -- calling  :meth:`writestr` on a ZipFile
    created with mode ``'r'``  will raise a :exc:`RuntimeError`.  Calling
    :meth:`writestr` on a closed ZipFile will raise a :exc:`RuntimeError`.
 
    .. note::
 
-      When passing a :class:`ZipInfo` instance as the *zinfo_or_acrname* parameter, 
-      the compression method used will be that specified in the *compress_type* 
-      member of the given :class:`ZipInfo` instance.  By default, the 
+      When passing a :class:`ZipInfo` instance as the *zinfo_or_acrname* parameter,
+      the compression method used will be that specified in the *compress_type*
+      member of the given :class:`ZipInfo` instance.  By default, the
       :class:`ZipInfo` constructor sets this member to :const:`ZIP_STORED`.
 
 The following data attributes are also available:
 
 
 .. attribute:: ZipFile.debug
 
    The level of debug output to use.  This may be set from ``0`` (the default, no
    output) to ``3`` (the most output).  Debugging information is written to
    ``sys.stdout``.
 
 .. attribute:: ZipFile.comment
 
-   The comment text associated with the ZIP file.  If assigning a comment to a 
-   :class:`ZipFile` instance created with mode 'a' or 'w', this should be a 
-   string no longer than 65535 bytes.  Comments longer than this will be 
+   The comment text associated with the ZIP file.  If assigning a comment to a
+   :class:`ZipFile` instance created with mode 'a' or 'w', this should be a
+   string no longer than 65535 bytes.  Comments longer than this will be
    truncated in the written archive when :meth:`ZipFile.close` is called.
 
 .. _pyzipfile-objects:
 
 PyZipFile Objects
 -----------------
 
 The :class:`PyZipFile` constructor takes the same parameters as the
 :class:`ZipFile` constructor.  Instances have one method in addition to those of
 :class:`ZipFile` objects.
 
 
@@ -318,28 +318,28 @@
    :file:`\*.pyc` file, compiling if necessary.  If the pathname is a file, the
    filename must end with :file:`.py`, and just the (corresponding
    :file:`\*.py[co]`) file is added at the top level (no path information).  If the
    pathname is a file that does not end with :file:`.py`, a :exc:`RuntimeError`
    will be raised.  If it is a directory, and the directory is not a package
    directory, then all the files :file:`\*.py[co]` are added at the top level.  If
    the directory is a package directory, then all :file:`\*.py[co]` are added under
    the package name as a file path, and if any subdirectories are package
    directories, all of these are added recursively.  *basename* is intended for
    internal use only.  The :meth:`writepy` method makes archives with file names
    like this::
 
-      string.pyc                                # Top level name 
-      test/__init__.pyc                         # Package directory 
+      string.pyc                                # Top level name
+      test/__init__.pyc                         # Package directory
       test/test_support.pyc                          # Module test.test_support
-      test/bogus/__init__.pyc                   # Subpackage directory 
+      test/bogus/__init__.pyc                   # Subpackage directory
       test/bogus/myfile.pyc                     # Submodule test.bogus.myfile
 
 
 .. _zipinfo-objects:
 
 ZipInfo Objects
 ---------------
 
 Instances of the :class:`ZipInfo` class are returned by the :meth:`getinfo` and
 :meth:`infolist` methods of :class:`ZipFile` objects.  Each object stores
 information about a single member of the ZIP archive.
 
