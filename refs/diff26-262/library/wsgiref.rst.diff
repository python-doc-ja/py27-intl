--- rest26/library/wsgiref.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/wsgiref.rst	2009-04-05 05:02:09.000000000 +0900
@@ -161,25 +161,25 @@
    :meth:`close` method, and it will invoke the *filelike* object's :meth:`close`
    method when called.
 
    Example usage::
 
       from StringIO import StringIO
       from wsgiref.util import FileWrapper
 
       # We're using a StringIO-buffer for as the file-like object
       filelike = StringIO("This is an example file-like object"*10)
       wrapper = FileWrapper(filelike, blksize=5)
 
-      for chunk in wrapper: 
+      for chunk in wrapper:
           print chunk
 
 
 
 :mod:`wsgiref.headers` -- WSGI response header tools
 ----------------------------------------------------
 
 .. module:: wsgiref.headers
    :synopsis: WSGI response header tools.
 
 
 This module provides a single class, :class:`Headers`, for convenient
@@ -406,25 +406,25 @@
    This wrapper may also generate output using the :mod:`warnings` module to
    indicate behaviors that are questionable but which may not actually be
    prohibited by :pep:`333`.  Unless they are suppressed using Python command-line
    options or the :mod:`warnings` API, any such warnings will be written to
    ``sys.stderr`` (*not* ``wsgi.errors``, unless they happen to be the same
    object).
 
    Example usage::
 
       from wsgiref.validate import validator
       from wsgiref.simple_server import make_server
 
-      # Our callable object which is intentionally not compliant to the 
+      # Our callable object which is intentionally not compliant to the
       # standard, so the validator is going to break
       def simple_app(environ, start_response):
           status = '200 OK' # HTTP Status
           headers = [('Content-type', 'text/plain')] # HTTP Headers
           start_response(status, headers)
 
           # This is going to break because we need to return a list, and
           # the validator is going to inform us
           return "Hello World"
 
       # This is the application wrapped in a validator
       validator_app = validator(simple_app)
