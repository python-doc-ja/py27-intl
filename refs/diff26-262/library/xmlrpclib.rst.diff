--- rest26/library/xmlrpclib.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/xmlrpclib.rst	2009-04-05 05:02:09.000000000 +0900
@@ -309,42 +309,40 @@
    XML-RPC spec was written.
 
 It also supports certain of Python's built-in operators through a
 :meth:`__cmp__` method.
 
 Example usage of the binary objects.  We're going to transfer an image over
 XMLRPC::
 
    from SimpleXMLRPCServer import SimpleXMLRPCServer
    import xmlrpclib
 
    def python_logo():
-        handle = open("python_logo.jpg")
-        return xmlrpclib.Binary(handle.read())
-        handle.close()
+        with open("python_logo.jpg") as handle:
+            return xmlrpclib.Binary(handle.read())
 
    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(python_logo, 'python_logo')
 
    server.serve_forever()
 
 The client gets the image and saves it to a file::
 
    import xmlrpclib
 
    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
-   handle = open("fetched_python_logo.jpg", "w")
-   handle.write(proxy.python_logo().data)
-   handle.close()
+   with open("fetched_python_logo.jpg", "w") as handle:
+       handle.write(proxy.python_logo().data)
 
 .. _fault-objects:
 
 Fault Objects
 -------------
 
 A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. Fault
 objects have the following members:
 
 
 .. attribute:: Fault.faultCode
 
@@ -551,26 +549,26 @@
 
 .. Example taken from http://lowlife.jp/nobonobo/wiki/xmlrpcwithproxy.html
 
 ::
 
    import xmlrpclib, httplib
 
    class ProxiedTransport(xmlrpclib.Transport):
        def set_proxy(self, proxy):
            self.proxy = proxy
        def make_connection(self, host):
            self.realhost = host
-   	h = httplib.HTTP(self.proxy)
-   	return h
+           h = httplib.HTTP(self.proxy)
+           return h
        def send_request(self, connection, handler, request_body):
            connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))
        def send_host(self, connection, host):
            connection.putheader('Host', self.realhost)
 
    p = ProxiedTransport()
    p.set_proxy('proxy-server:8080')
    server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=p)
    print server.currentTime.getCurrentTime()
 
 
 Example of Client and Server Usage
