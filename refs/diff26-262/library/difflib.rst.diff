--- rest26/library/difflib.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/difflib.rst	2009-04-05 05:02:09.000000000 +0900
@@ -419,25 +419,25 @@
       Return list of triples describing matching subsequences. Each triple is of
       the form ``(i, j, n)``, and means that ``a[i:i+n] == b[j:j+n]``.  The
       triples are monotonically increasing in *i* and *j*.
 
       The last triple is a dummy, and has the value ``(len(a), len(b), 0)``.  It
       is the only triple with ``n == 0``.  If ``(i, j, n)`` and ``(i', j', n')``
       are adjacent triples in the list, and the second is not the last triple in
       the list, then ``i+n != i'`` or ``j+n != j'``; in other words, adjacent
       triples always describe non-adjacent equal blocks.
 
       .. XXX Explain why a dummy is used!
 
-      .. versionchanged:: 2.5 
+      .. versionchanged:: 2.5
          The guarantee that adjacent triples always describe non-adjacent blocks
          was implemented.
 
       .. doctest::
 
          >>> s = SequenceMatcher(None, "abxcd", "abcd")
          >>> s.get_matching_blocks()
          [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
 
 
    .. method:: get_opcodes()
 
