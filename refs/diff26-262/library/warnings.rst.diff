--- rest26/library/warnings.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/warnings.rst	2009-04-05 05:02:09.000000000 +0900
@@ -265,51 +265,51 @@
 
    *module_globals*, if supplied, should be the global namespace in use by the code
    for which the warning is issued.  (This argument is used to support displaying
    source for modules found in zipfiles or other non-filesystem import
    sources).
 
    .. versionchanged:: 2.5
       Added the *module_globals* parameter.
 
 
 .. function:: warnpy3k(message[, category[, stacklevel]])
 
-   Issue a warning related to Python 3.x deprecation. Warnings are only shown 
+   Issue a warning related to Python 3.x deprecation. Warnings are only shown
    when Python is started with the -3 option. Like :func:`warn` *message* must
    be a string and *category* a subclass of :exc:`Warning`. :func:`warnpy3k`
    is using :exc:`DeprecationWarning` as default warning class.
 
 
 .. function:: showwarning(message, category, filename, lineno[, file[, line]])
 
    Write a warning to a file.  The default implementation calls
    ``formatwarning(message, category, filename, lineno, line)`` and writes the
    resulting string to *file*, which defaults to ``sys.stderr``.  You may replace
    this function with an alternative implementation by assigning to
    ``warnings.showwarning``.
    *line* is a line of source code to be included in the warning
-   message; if *line* is not supplied, :func:`showwarning` will 
+   message; if *line* is not supplied, :func:`showwarning` will
    try to read the line specified by *filename* and *lineno*.
 
    .. versionchanged:: 2.6
       Added the *line* argument. Implementations that lack the new argument
       will trigger a :exc:`DeprecationWarning`.
 
 
 .. function:: formatwarning(message, category, filename, lineno[, line])
 
    Format a warning the standard way.  This returns a string  which may contain
-   embedded newlines and ends in a newline.  *line* is 
-   a line of source code to be included in the warning message; if *line* is not supplied, 
+   embedded newlines and ends in a newline.  *line* is
+   a line of source code to be included in the warning message; if *line* is not supplied,
    :func:`formatwarning` will try to read the line specified by *filename* and *lineno*.
 
    .. versionchanged:: 2.6
       Added the *line* argument.
 
 
 .. function:: filterwarnings(action[, message[, category[, module[, lineno[, append]]]]])
 
    Insert an entry into the list of warnings filters.  The entry is inserted at the
    front by default; if *append* is true, it is inserted at the end. This checks
    the types of the arguments, compiles the message and module regular expressions,
    and inserts them as a tuple in the  list of warnings filters.  Entries closer to
