--- rest26/library/turtle.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/turtle.rst	2009-04-07 00:06:53.000000000 +0900
@@ -52,25 +52,25 @@
    on a :class:`TurtleScreen`.  Its constructor needs a Canvas, ScrolledCanvas
    or TurtleScreen as argument, so the RawTurtle objects know where to draw.
 
    Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:`Pen`),
    which draws on "the" :class:`Screen` - instance which is automatically
    created, if not already present.
 
    All methods of RawTurtle/Turtle also exist as functions, i.e. part of the
    procedure-oriented interface.
 
 The procedural interface provides functions which are derived from the methods
 of the classes :class:`Screen` and :class:`Turtle`.  They have the same names as
-the corresponding methods.  A screen object is automativally created whenever a
+the corresponding methods.  A screen object is automatically created whenever a
 function derived from a Screen method is called.  An (unnamed) turtle object is
 automatically created whenever any of the functions derived from a Turtle method
 is called.
 
 To use multiple turtles an a screen one has to use the object-oriented interface.
 
 .. note::
    In the following documentation the argument list for functions is given.
    Methods, of course, have the additional first argument *self* which is
    omitted here.
 
 
@@ -316,26 +316,25 @@
 
    >>> turtle.position()
    (0.00, 240.00)
    >>> turtle.setx(10)
    >>> turtle.position()
    (10.00, 240.00)
 
 
 .. function:: sety(y)
 
    :param y: a number (integer or float)
 
-   Set the turtle's first coordinate to *y*, leave second coordinate
-   unchanged.
+   Set the turtle's second coordinate to *y*, leave first coordinate unchanged.
 
    >>> turtle.position()
    (0.00, 40.00)
    >>> turtle.sety(-10)
    >>> turtle.position()
    (0.00, -10.00)
 
 
 .. function:: setheading(to_angle)
               seth(to_angle)
 
    :param to_angle: a number (integer or float)
@@ -1578,56 +1577,56 @@
 
 .. class:: TurtleScreen(cv)
 
    :param cv: a :class:`Tkinter.Canvas`
 
    Provides screen oriented methods like :func:`setbg` etc. that are described
    above.
 
 .. class:: Screen()
 
    Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`.
 
-   
+
 .. class:: ScrolledCavas(master)
 
    :param master: some Tkinter widget to contain the ScrolledCanvas, i.e.
       a Tkinter-canvas with scrollbars added
 
    Used by class Screen, which thus automatically provides a ScrolledCanvas as
    playground for the turtles.
 
 .. class:: Shape(type_, data)
 
    :param type\_: one of the strings "polygon", "image", "compound"
 
    Data structure modeling shapes.  The pair ``(type_, data)`` must follow this
    specification:
 
 
    =========== ===========
    *type_*     *data*
    =========== ===========
    "polygon"   a polygon-tuple, i.e. a tuple of pairs of coordinates
    "image"     an image  (in this form only used internally!)
-   "compound"  ``None`` (a compund shape has to be constructed using the
+   "compound"  ``None`` (a compound shape has to be constructed using the
                :meth:`addcomponent` method)
    =========== ===========
-                
+
    .. method:: addcomponent(poly, fill, outline=None)
 
       :param poly: a polygon, i.e. a tuple of pairs of numbers
       :param fill: a color the *poly* will be filled with
       :param outline: a color for the poly's outline (if given)
-     
+
       Example:
 
       >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
       >>> s = Shape("compound")
       >>> s.addcomponent(poly, "red", "blue")
       # .. add more components and then use register_shape()
 
       See :ref:`compoundshapes`.
 
 
 .. class:: Vec2D(x, y)
 
@@ -1653,82 +1652,82 @@
 
 The public methods of the Screen and Turtle classes are documented extensively
 via docstrings.  So these can be used as online-help via the Python help
 facilities:
 
 - When using IDLE, tooltips show the signatures and first lines of the
   docstrings of typed in function-/method calls.
 
 - Calling :func:`help` on methods or functions displays the docstrings::
 
      >>> help(Screen.bgcolor)
      Help on method bgcolor in module turtle:
-    
+
      bgcolor(self, *args) unbound turtle.Screen method
          Set or return backgroundcolor of the TurtleScreen.
-    
+
          Arguments (if given): a color string or three numbers
          in the range 0..colormode or a 3-tuple of such numbers.
-    
-    
+
+
            >>> screen.bgcolor("orange")
            >>> screen.bgcolor()
            "orange"
            >>> screen.bgcolor(0.5,0,0.5)
            >>> screen.bgcolor()
            "#800080"
-    
+
      >>> help(Turtle.penup)
      Help on method penup in module turtle:
-    
+
      penup(self) unbound turtle.Turtle method
          Pull the pen up -- no drawing when moving.
-    
+
          Aliases: penup | pu | up
-    
+
          No argument
-    
+
          >>> turtle.penup()
 
 - The docstrings of the functions which are derived from methods have a modified
   form::
 
      >>> help(bgcolor)
      Help on function bgcolor in module turtle:
-    
+
      bgcolor(*args)
          Set or return backgroundcolor of the TurtleScreen.
-    
+
          Arguments (if given): a color string or three numbers
          in the range 0..colormode or a 3-tuple of such numbers.
-    
+
          Example::
-    
+
            >>> bgcolor("orange")
            >>> bgcolor()
            "orange"
            >>> bgcolor(0.5,0,0.5)
            >>> bgcolor()
            "#800080"
-    
+
      >>> help(penup)
      Help on function penup in module turtle:
-    
+
      penup()
          Pull the pen up -- no drawing when moving.
-    
+
          Aliases: penup | pu | up
-    
+
          No argument
-    
+
          Example:
          >>> penup()
 
 These modified docstrings are created automatically together with the function
 definitions that are derived from the methods at import time.
 
 
 Translation of docstrings into different languages
 --------------------------------------------------
 
 There is a utility to create a dictionary the keys of which are the method names
 and the values of which are the docstrings of the public methods of the classes
@@ -1822,25 +1821,25 @@
 study it as an example and see its effects when running the demos (preferably
 not from within the demo-viewer).
 
 
 Demo scripts
 ============
 
 There is a set of demo scripts in the turtledemo directory located in the
 :file:`Demo/turtle` directory in the source distribution.
 
 It contains:
 
-- a set of 15 demo scripts demonstrating differet features of the new module
+- a set of 15 demo scripts demonstrating different features of the new module
   :mod:`turtle`
 - a demo viewer :file:`turtleDemo.py` which can be used to view the sourcecode
   of the scripts and run them at the same time. 14 of the examples can be
   accessed via the Examples menu; all of them can also be run standalone.
 - The example :file:`turtledemo_two_canvases.py` demonstrates the simultaneous
   use of two canvases with the turtle module.  Therefore it only can be run
   standalone.
 - There is a :file:`turtle.cfg` file in this directory, which also serves as an
   example for how to write and use such files.
 
 The demoscripts are:
 
