--- rest26/library/cgi.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/cgi.rst	2009-04-05 05:02:09.000000000 +0900
@@ -58,34 +58,36 @@
    print "Hello, world!"
 
 
 .. _using-the-cgi-module:
 
 Using the cgi module
 --------------------
 
 Begin by writing ``import cgi``.  Do not use ``from cgi import *`` --- the
 module defines all sorts of names for its own use or for backward compatibility
 that you don't want in your namespace.
 
-When you write a new script, consider adding the line::
+When you write a new script, consider adding these lines::
 
-   import cgitb; cgitb.enable()
+   import cgitb
+   cgitb.enable()
 
 This activates a special exception handler that will display detailed reports in
 the Web browser if any errors occur.  If you'd rather not show the guts of your
 program to users of your script, you can have the reports saved to files
-instead, with a line like this::
+instead, with code like this::
 
-   import cgitb; cgitb.enable(display=0, logdir="/tmp")
+   import cgitb
+   cgitb.enable(display=0, logdir="/tmp")
 
 It's very helpful to use this feature during script development. The reports
 produced by :mod:`cgitb` provide information that can save you a lot of time in
 tracking down bugs.  You can always remove the ``cgitb`` line later when you
 have tested your script and are confident that it works correctly.
 
 To get at submitted form data, it's best to use the :class:`FieldStorage` class.
 The other classes defined in this module are provided mostly for backward
 compatibility. Instantiate it exactly once, without arguments.  This reads the
 form contents from standard input or the environment (depending on the value of
 various environment variables set according to the CGI standard).  Since it may
 consume standard input, it should be instantiated only once.
@@ -461,27 +463,28 @@
 This should produce the same results as those gotten from installing the
 :file:`cgi.py` file itself.
 
 When an ordinary Python script raises an unhandled exception (for whatever
 reason: of a typo in a module name, a file that can't be opened, etc.), the
 Python interpreter prints a nice traceback and exits.  While the Python
 interpreter will still do this when your CGI script raises an exception, most
 likely the traceback will end up in one of the HTTP server's log files, or be
 discarded altogether.
 
 Fortunately, once you have managed to get your script to execute *some* code,
 you can easily send tracebacks to the Web browser using the :mod:`cgitb` module.
-If you haven't done so already, just add the line::
+If you haven't done so already, just add the lines::
 
-   import cgitb; cgitb.enable()
+   import cgitb
+   cgitb.enable()
 
 to the top of your script.  Then try running it again; when a problem occurs,
 you should see a detailed report that will likely make apparent the cause of the
 crash.
 
 If you suspect that there may be a problem in importing the :mod:`cgitb` module,
 you can use an even more robust approach (which only uses built-in modules)::
 
    import sys
    sys.stderr = sys.stdout
    print "Content-Type: text/plain"
    print
