--- rest26/library/stringio.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/stringio.rst	2009-04-05 05:02:09.000000000 +0900
@@ -28,39 +28,40 @@
 
 
 .. method:: StringIO.getvalue()
 
    Retrieve the entire contents of the "file" at any time before the
    :class:`StringIO` object's :meth:`close` method is called.  See the note above
    for information about mixing Unicode and 8-bit strings; such mixing can cause
    this method to raise :exc:`UnicodeError`.
 
 
 .. method:: StringIO.close()
 
-   Free the memory buffer.
+   Free the memory buffer.  Attempting to do further operations with a closed
+   :class:`StringIO` object will raise a :exc:`ValueError`.
 
 Example usage::
 
    import StringIO
 
    output = StringIO.StringIO()
    output.write('First line.\n')
    print >>output, 'Second line.'
 
    # Retrieve file contents -- this will be
    # 'First line.\nSecond line.\n'
    contents = output.getvalue()
 
-   # Close object and discard memory buffer -- 
+   # Close object and discard memory buffer --
    # .getvalue() will now raise an exception.
    output.close()
 
 
 :mod:`cStringIO` --- Faster version of :mod:`StringIO`
 ======================================================
 
 .. module:: cStringIO
    :synopsis: Faster version of StringIO, but not subclassable.
 .. moduleauthor:: Jim Fulton <jim@zope.com>
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
@@ -71,25 +72,25 @@
 instead.
 
 Since this module provides a factory function which returns objects of built-in
 types, there's no way to build your own version using subclassing.  Use the
 original :mod:`StringIO` module in that case.
 
 Unlike the memory files implemented by the :mod:`StringIO` module, those
 provided by this module are not able to accept Unicode strings that cannot be
 encoded as plain ASCII strings.
 
 Calling :func:`StringIO` with a Unicode string parameter populates
 the object with the buffer representation of the Unicode string, instead of
-encoding the string. 
+encoding the string.
 
 Another difference from the :mod:`StringIO` module is that calling
 :func:`StringIO` with a string parameter creates a read-only object. Unlike an
 object created without a string parameter, it does not have write methods.
 These objects are not generally visible.  They turn up in tracebacks as
 :class:`StringI` and :class:`StringO`.
 
 The following data objects are provided as well:
 
 
 .. data:: InputType
 
@@ -108,16 +109,16 @@
 Example usage::
 
    import cStringIO
 
    output = cStringIO.StringIO()
    output.write('First line.\n')
    print >>output, 'Second line.'
 
    # Retrieve file contents -- this will be
    # 'First line.\nSecond line.\n'
    contents = output.getvalue()
 
-   # Close object and discard memory buffer -- 
+   # Close object and discard memory buffer --
    # .getvalue() will now raise an exception.
    output.close()
 
