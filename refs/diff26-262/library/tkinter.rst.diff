--- rest26/library/tkinter.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/tkinter.rst	2009-04-05 05:02:09.000000000 +0900
@@ -275,25 +275,25 @@
    button   .fred   -fg red -text "hi there"
       ^       ^     \_____________________/
       |       |                |
     class    new            options
    command  widget  (-opt val -opt val ...)
 
 Once created, the pathname to the widget becomes a new command.  This new
 *widget command* is the programmer's handle for getting the new widget to
 perform some *action*.  In C, you'd express this as someAction(fred,
 someOptions), in C++, you would express this as fred.someAction(someOptions),
 and in Tk, you say::
 
-   .fred someAction someOptions 
+   .fred someAction someOptions
 
 Note that the object name, ``.fred``, starts with a dot.
 
 As you'd expect, the legal values for *someAction* will depend on the widget's
 class: ``.fred disable`` works if fred is a button (fred gets greyed out), but
 does not work if fred is a label (disabling of labels is not supported in Tk).
 
 The legal values of *someOptions* is action dependent.  Some actions, like
 ``disable``, require no arguments, others, like a text-entry box's ``delete``
 command, would need arguments to specify what range of text to delete.
 
 
@@ -481,25 +481,25 @@
 
    fred.pack()                     # defaults to side = "top"
    fred.pack(side = "left")
    fred.pack(expand = 1)
 
 
 Packer Options
 ^^^^^^^^^^^^^^
 
 For more extensive information on the packer and the options that it can take,
 see the man pages and page 183 of John Ousterhout's book.
 
-anchor 
+anchor
    Anchor type.  Denotes where the packer is to place each slave in its parcel.
 
 expand
    Boolean, ``0`` or ``1``.
 
 fill
    Legal values: ``'x'``, ``'y'``, ``'both'``, ``'none'``.
 
 ipadx and ipady
    A distance - designating internal padding on each side of the slave widget.
 
 padx and pady
@@ -711,25 +711,25 @@
 
    def turnRed(self, event):
        event.widget["activeforeground"] = "red"
 
    self.button.bind("<Enter>", self.turnRed)
 
 Notice how the widget field of the event is being accessed in the
 :meth:`turnRed` callback.  This field contains the widget that caught the X
 event.  The following table lists the other event fields you can access, and how
 they are denoted in Tk, which can be useful when referring to the Tk man pages.
 ::
 
-   Tk      Tkinter Event Field             Tk      Tkinter Event Field 
+   Tk      Tkinter Event Field             Tk      Tkinter Event Field
    --      -------------------             --      -------------------
    %f      focus                           %A      char
    %h      height                          %E      send_event
    %k      keycode                         %K      keysym
    %s      state                           %N      keysym_num
    %t      time                            %T      type
    %w      width                           %W      widget
    %x      x                               %X      x_root
    %y      y                               %Y      y_root
 
 
 The index Parameter
