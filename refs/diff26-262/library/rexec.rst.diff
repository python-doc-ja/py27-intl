--- rest26/library/rexec.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/rexec.rst	2009-04-05 05:02:09.000000000 +0900
@@ -1,20 +1,20 @@
 
 :mod:`rexec` --- Restricted execution framework
 ===============================================
 
 .. module:: rexec
    :synopsis: Basic restricted execution framework.
    :deprecated:
-   
+
 .. deprecated:: 2.6
    The :mod:`rexec` module has been removed in Python 3.0.
 
 .. versionchanged:: 2.3
    Disabled module.
 
 .. warning::
 
    The documentation has been left in place to help in reading old code that uses
    the module.
 
 This module contains the :class:`RExec` class, which supports :meth:`r_eval`,
@@ -263,25 +263,25 @@
 ----------
 
 Let us say that we want a slightly more relaxed policy than the standard
 :class:`RExec` class.  For example, if we're willing to allow files in
 :file:`/tmp` to be written, we can subclass the :class:`RExec` class::
 
    class TmpWriterRExec(rexec.RExec):
        def r_open(self, file, mode='r', buf=-1):
            if mode in ('r', 'rb'):
                pass
            elif mode in ('w', 'wb', 'a', 'ab'):
                # check filename : must begin with /tmp/
-               if file[:5]!='/tmp/': 
+               if file[:5]!='/tmp/':
                    raise IOError, "can't write outside /tmp"
                elif (string.find(file, '/../') >= 0 or
                     file[:3] == '../' or file[-3:] == '/..'):
                    raise IOError, "'..' in filename forbidden"
            else: raise IOError, "Illegal open() mode"
            return open(file, mode, buf)
 
 Notice that the above code will occasionally forbid a perfectly valid filename;
 for example, code in the restricted environment won't be able to open a file
 called :file:`/tmp/foo/../bar`.  To fix this, the :meth:`r_open` method would
 have to simplify the filename to :file:`/tmp/bar`, which would require splitting
 apart the filename and performing various operations on it.  In cases where
