--- rest26/library/pydoc.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/pydoc.rst	2009-04-05 05:02:09.000000000 +0900
@@ -27,24 +27,31 @@
 
    pydoc sys
 
 at a shell prompt will display documentation on the :mod:`sys` module, in a
 style similar to the manual pages shown by the Unix :program:`man` command.  The
 argument to :program:`pydoc` can be the name of a function, module, or package,
 or a dotted reference to a class, method, or function within a module or module
 in a package.  If the argument to :program:`pydoc` looks like a path (that is,
 it contains the path separator for your operating system, such as a slash in
 Unix), and refers to an existing Python source file, then documentation is
 produced for that file.
 
+.. note::
+
+   In order to find objects and their documentation, :mod:`pydoc` imports the
+   module(s) to be documented.  Therefore, any code on module level will be
+   executed on that occasion.  Use an ``if __name__ == '__main__':`` guard to
+   only execute code when a file is invoked as a script and not just imported.
+
 Specifying a :option:`-w` flag before the argument will cause HTML documentation
 to be written out to a file in the current directory, instead of displaying text
 on the console.
 
 Specifying a :option:`-k` flag before the argument will search the synopsis
 lines of all available modules for the keyword given as the argument, again in a
 manner similar to the Unix :program:`man` command.  The synopsis line of a
 module is the first line of its documentation string.
 
 You can also use :program:`pydoc` to start an HTTP server on the local machine
 that will serve documentation to visiting Web browsers. :program:`pydoc`
 :option:`-p 1234` will start a HTTP server on port 1234, allowing you to browse
