--- rest26/library/math.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/math.rst	2009-04-05 05:02:09.000000000 +0900
@@ -12,26 +12,27 @@
 These functions cannot be used with complex numbers; use the functions of the
 same name from the :mod:`cmath` module if you require support for complex
 numbers.  The distinction between functions which support complex numbers and
 those which don't is made since most users do not want to learn quite as much
 mathematics as required to understand complex numbers.  Receiving an exception
 instead of a complex result allows earlier detection of the unexpected complex
 number used as a parameter, so that the programmer can determine how and why it
 was generated in the first place.
 
 The following functions are provided by this module.  Except when explicitly
 noted otherwise, all return values are floats.
 
-Number-theoretic and representation functions:
 
+Number-theoretic and representation functions
+---------------------------------------------
 
 .. function:: ceil(x)
 
    Return the ceiling of *x* as a float, the smallest integer value greater than or
    equal to *x*.
 
 
 .. function:: copysign(x, y)
 
    Return *x* with the sign of *y*. ``copysign`` copies the sign bit of an IEEE
    754 float, ``copysign(1, -0.0)`` returns *-1.0*.
 
@@ -77,85 +78,95 @@
 
 .. function:: frexp(x)
 
    Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a float
    and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is zero,
    returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used to "pick
    apart" the internal representation of a float in a portable way.
 
 
 .. function:: fsum(iterable)
 
    Return an accurate floating point sum of values in the iterable.  Avoids
-   loss of precision by tracking multiple intermediate partial sums.  The
-   algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the
-   typical case where the rounding mode is half-even.
+   loss of precision by tracking multiple intermediate partial sums::
 
-   .. note::
-
-      The accuracy of fsum() may be impaired on builds that use
-      extended precision addition and then double-round the results.
+        >>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
+        0.99999999999999989
+        >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
+        1.0
+
+   The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the
+   typical case where the rounding mode is half-even.  On some non-Windows
+   builds, the underlying C library uses extended precision addition and may
+   occasionally double-round an intermediate sum causing it to be off in its
+   least significant bit.
+
+   For further discussion and two alternative approaches, see the `ASPN cookbook
+   recipes for accurate floating point summation
+   <http://code.activestate.com/recipes/393090/>`_\.
 
    .. versionadded:: 2.6
 
 
 .. function:: isinf(x)
 
    Checks if the float *x* is positive or negative infinite.
 
    .. versionadded:: 2.6
 
 
 .. function:: isnan(x)
 
    Checks if the float *x* is a NaN (not a number). NaNs are part of the
-   IEEE 754 standards. Operation like but not limited to ``inf * 0``, 
+   IEEE 754 standards. Operation like but not limited to ``inf * 0``,
    ``inf / inf`` or any operation involving a NaN, e.g. ``nan * 1``, return
    a NaN.
 
    .. versionadded:: 2.6
 
 
 .. function:: ldexp(x, i)
 
    Return ``x * (2**i)``.  This is essentially the inverse of function
    :func:`frexp`.
 
 
 .. function:: modf(x)
 
-   Return the fractional and integer parts of *x*.  Both results carry the sign of
-   *x*, and both are floats.
+   Return the fractional and integer parts of *x*.  Both results carry the sign
+   of *x* and are floats.
 
 
 .. function:: trunc(x)
 
    Return the :class:`Real` value *x* truncated to an :class:`Integral` (usually
    a long integer). Delegates to ``x.__trunc__()``.
 
    .. versionadded:: 2.6
 
 
 Note that :func:`frexp` and :func:`modf` have a different call/return pattern
 than their C equivalents: they take a single argument and return a pair of
 values, rather than returning their second return value through an 'output
 parameter' (there is no such thing in Python).
 
 For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that *all*
 floating-point numbers of sufficiently large magnitude are exact integers.
 Python floats typically carry no more than 53 bits of precision (the same as the
 platform C double type), in which case any float *x* with ``abs(x) >= 2**52``
 necessarily has no fractional bits.
 
-Power and logarithmic functions:
+
+Power and logarithmic functions
+-------------------------------
 
 .. function:: exp(x)
 
    Return ``e**x``.
 
 
 .. function:: log(x[, base])
 
    Return the logarithm of *x* to the given *base*. If the *base* is not specified,
    return the natural logarithm of *x* (that is, the logarithm to base *e*).
 
    .. versionchanged:: 2.3
@@ -184,25 +195,26 @@
    ``x`` is negative, and ``y`` is not an integer then ``pow(x, y)``
    is undefined, and raises :exc:`ValueError`.
 
    .. versionchanged:: 2.6
       The outcome of ``1**nan`` and ``nan**0`` was undefined.
 
 
 .. function:: sqrt(x)
 
    Return the square root of *x*.
 
 
-Trigonometric functions:
+Trigonometric functions
+-----------------------
 
 .. function:: acos(x)
 
    Return the arc cosine of *x*, in radians.
 
 
 .. function:: asin(x)
 
    Return the arc sine of *x*, in radians.
 
 
 .. function:: atan(x)
@@ -232,37 +244,39 @@
 
 
 .. function:: sin(x)
 
    Return the sine of *x* radians.
 
 
 .. function:: tan(x)
 
    Return the tangent of *x* radians.
 
 
-Angular conversion:
+Angular conversion
+------------------
 
 .. function:: degrees(x)
 
    Converts angle *x* from radians to degrees.
 
 
 .. function:: radians(x)
 
    Converts angle *x* from degrees to radians.
 
 
-Hyperbolic functions:
+Hyperbolic functions
+--------------------
 
 .. function:: acosh(x)
 
    Return the inverse hyperbolic cosine of *x*.
 
    .. versionadded:: 2.6
 
 
 .. function:: asinh(x)
 
    Return the inverse hyperbolic sine of *x*.
 
@@ -282,25 +296,26 @@
 
 
 .. function:: sinh(x)
 
    Return the hyperbolic sine of *x*.
 
 
 .. function:: tanh(x)
 
    Return the hyperbolic tangent of *x*.
 
 
-The module also defines two mathematical constants:
+Constants
+---------
 
 .. data:: pi
 
    The mathematical constant *pi*.
 
 
 .. data:: e
 
    The mathematical constant *e*.
 
 
 .. note::
