--- rest26/library/unittest.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/unittest.rst	2009-04-05 05:02:09.000000000 +0900
@@ -71,24 +71,30 @@
 graphical environments) without any need to derive from a specific class.
 
 
 .. seealso::
 
    Module :mod:`doctest`
       Another test-support module with a very different flavor.
 
    `Simple Smalltalk Testing: With Patterns <http://www.XProgramming.com/testfram.htm>`_
       Kent Beck's original paper on testing frameworks using the pattern shared by
       :mod:`unittest`.
 
+   `Nose <http://code.google.com/p/python-nose/>`_ and `py.test <http://pytest.org>`_
+      Third-party unittest frameworks with a lighter-weight syntax
+      for writing tests.  For example, ``assert func(10) == 42``.
+
+   `python-mock <http://python-mock.sourceforge.net/>`_ and `minimock <http://blog.ianbicking.org/minimock.html>`_
+      Tools for creating mock test objects (objects simulating external resources).
 
 .. _unittest-minimal-example:
 
 Basic example
 -------------
 
 The :mod:`unittest` module provides a rich set of tools for constructing and
 running tests.  This section demonstrates that a small subset of the tools
 suffice to meet the needs of most users.
 
 Here is a short script to test three functions from the :mod:`random` module::
 
@@ -586,36 +592,36 @@
 
    Test that *first* and *second* are not equal.  If the values do compare equal,
    the test will fail with the explanation given by *msg*, or :const:`None`.  Note
    that using :meth:`failIfEqual` improves upon doing the comparison as the first
    parameter to :meth:`failUnless` is that the default value for *msg* can be
    computed to include representations of both *first* and *second*.
 
 
 .. method:: TestCase.assertAlmostEqual(first, second[, places[, msg]])
             TestCase.failUnlessAlmostEqual(first, second[, places[, msg]])
 
    Test that *first* and *second* are approximately equal by computing the
-   difference, rounding to the given number of decimal *places* (default 7), 
+   difference, rounding to the given number of decimal *places* (default 7),
    and comparing to zero.
    Note that comparing a given number of decimal places is not the same as
    comparing a given number of significant digits. If the values do not compare
    equal, the test will fail with the explanation given by *msg*, or :const:`None`.
 
 
 .. method:: TestCase.assertNotAlmostEqual(first, second[, places[, msg]])
             TestCase.failIfAlmostEqual(first, second[, places[, msg]])
 
    Test that *first* and *second* are not approximately equal by computing the
-   difference, rounding to the given number of decimal *places* (default 7), 
+   difference, rounding to the given number of decimal *places* (default 7),
    and comparing to zero.
    Note that comparing a given number of decimal places is not the same as
    comparing a given number of significant digits. If the values do not compare
    equal, the test will fail with the explanation given by *msg*, or :const:`None`.
 
 
 .. method:: TestCase.assertRaises(exception, callable, ...)
             TestCase.failUnlessRaises(exception, callable, ...)
 
    Test that an exception is raised when *callable* is called with any positional
    or keyword arguments that are also passed to :meth:`assertRaises`.  The test
    passes if *exception* is raised, is an error if another exception is raised, or
