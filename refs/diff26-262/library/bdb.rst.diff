--- rest26/library/bdb.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/bdb.rst	2009-04-05 05:02:09.000000000 +0900
@@ -98,26 +98,27 @@
         entered.
       * ``"return"``: A function or other code block is about to return.
       * ``"exception"``: An exception has occurred.
       * ``"c_call"``: A C function is about to be called.
       * ``"c_return"``: A C function has returned.
       * ``"c_exception"``: A C function has thrown an exception.
 
       For the Python events, specialized functions (see below) are called.  For
       the C events, no action is taken.
 
       The *arg* parameter depends on the previous event.
 
-      For more information on trace functions, see :ref:`debugger-hooks`.  For
-      more information on code and frame objects, refer to :ref:`types`.
+      See the documentation for :func:`sys.settrace` for more information on the
+      trace function.  For more information on code and frame objects, refer to
+      :ref:`types`.
 
    .. method:: dispatch_line(frame)
 
       If the debugger should stop on the current line, invoke the
       :meth:`user_line` method (which should be overridden in subclasses).
       Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
       (which can be set from :meth:`user_line`).  Return a reference to the
       :meth:`trace_dispatch` method for further tracing in that scope.
 
    .. method:: dispatch_call(frame, arg)
 
       If the debugger should stop on this function call, invoke the
@@ -315,30 +316,30 @@
 
    .. method:: runcall(func, *args, **kwds)
 
       Debug a single function call, and return its result.
 
 
 Finally, the module defines the following functions:
 
 .. function:: checkfuncname(b, frame)
 
    Check whether we should break here, depending on the way the breakpoint *b*
    was set.
-   
+
    If it was set via line number, it checks if ``b.line`` is the same as the one
    in the frame also passed as argument.  If the breakpoint was set via function
    name, we have to check we are in the right frame (the right function) and if
    we are in its first executable line.
 
 .. function:: effective(file, line, frame)
 
    Determine if there is an effective (active) breakpoint at this line of code.
    Return breakpoint number or 0 if none.
-	
+
    Called only if we know there is a breakpoint at this location.  Returns the
    breakpoint that was triggered and a flag that indicates if it is ok to delete
    a temporary breakpoint.
 
 .. function:: set_trace()
 
    Starts debugging with a :class:`Bdb` instance from caller's frame.
