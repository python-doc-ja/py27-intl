--- rest26/library/gettext.rst	2008-12-19 16:58:10.000000000 +0900
+++ rest262/library/gettext.rst	2009-04-05 05:02:09.000000000 +0900
@@ -639,72 +639,69 @@
    lang3.install()
 
 
 Deferred translations
 ^^^^^^^^^^^^^^^^^^^^^
 
 In most coding situations, strings are translated where they are coded.
 Occasionally however, you need to mark strings for translation, but defer actual
 translation until later.  A classic example is::
 
    animals = ['mollusk',
               'albatross',
-   	   'rat',
-   	   'penguin',
-   	   'python',
-   	   ]
+              'rat',
+              'penguin',
+              'python', ]
    # ...
    for a in animals:
        print a
 
 Here, you want to mark the strings in the ``animals`` list as being
 translatable, but you don't actually want to translate them until they are
 printed.
 
 Here is one way you can handle this situation::
 
    def _(message): return message
 
    animals = [_('mollusk'),
               _('albatross'),
-   	   _('rat'),
-   	   _('penguin'),
-   	   _('python'),
-   	   ]
+              _('rat'),
+              _('penguin'),
+              _('python'), ]
 
    del _
 
    # ...
    for a in animals:
        print _(a)
 
 This works because the dummy definition of :func:`_` simply returns the string
 unchanged.  And this dummy definition will temporarily override any definition
 of :func:`_` in the built-in namespace (until the :keyword:`del` command). Take
 care, though if you have a previous definition of :func:`_` in the local
 namespace.
 
 Note that the second use of :func:`_` will not identify "a" as being
 translatable to the :program:`pygettext` program, since it is not a string.
 
 Another way to handle this is with the following example::
 
    def N_(message): return message
 
    animals = [N_('mollusk'),
               N_('albatross'),
-   	   N_('rat'),
-   	   N_('penguin'),
-   	   N_('python'),
-   	   ]
+              N_('rat'),
+              N_('penguin'),
+              N_('python'), ]
 
    # ...
    for a in animals:
        print _(a)
 
 In this case, you are marking translatable strings with the function :func:`N_`,
 [#]_ which won't conflict with any definition of :func:`_`.  However, you will
 need to teach your message extraction program to look for translatable strings
 marked with :func:`N_`. :program:`pygettext` and :program:`xpot` both support
 this through the use of command line switches.
 
 
