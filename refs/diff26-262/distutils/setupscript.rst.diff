--- rest26/distutils/setupscript.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/distutils/setupscript.rst	2009-04-05 05:01:40.000000000 +0900
@@ -204,25 +204,25 @@
 
 However, you can also include SWIG interface (:file:`.i`) files in the list; the
 :command:`build_ext` command knows how to deal with SWIG extensions: it will run
 SWIG on the interface file and compile the resulting C/C++ file into your
 extension.
 
 **\*\*** SWIG support is rough around the edges and largely untested! **\*\***
 
 This warning notwithstanding, options to SWIG can be currently passed like
 this::
 
    setup(...,
-         ext_modules=[Extension('_foo', ['foo.i'], 
+         ext_modules=[Extension('_foo', ['foo.i'],
                                 swig_opts=['-modern', '-I../include'])],
          py_modules=['foo'],
         )
 
 Or on the commandline like this::
 
    > python setup.py build_ext --swig-opts="-modern -I../include"
 
 On some platforms, you can include non-source files that are processed by the
 compiler and included in your extension.  Currently, this just means Windows
 message text (:file:`.mc`) files and resource definition (:file:`.rc`) files for
 Visual C++. These will be compiled to binary resource (:file:`.res`) files and
@@ -554,24 +554,26 @@
 | ``description``      | short, summary            | short string    |        |
 |                      | description of the        |                 |        |
 |                      | package                   |                 |        |
 +----------------------+---------------------------+-----------------+--------+
 | ``long_description`` | longer description of the | long string     |        |
 |                      | package                   |                 |        |
 +----------------------+---------------------------+-----------------+--------+
 | ``download_url``     | location where the        | URL             | \(4)   |
 |                      | package may be downloaded |                 |        |
 +----------------------+---------------------------+-----------------+--------+
 | ``classifiers``      | a list of classifiers     | list of strings | \(4)   |
 +----------------------+---------------------------+-----------------+--------+
+| ``platforms``        | a list of platforms       | list of strings |        |
++----------------------+---------------------------+-----------------+--------+
 
 Notes:
 
 (1)
    These fields are required.
 
 (2)
    It is recommended that versions take the form *major.minor[.patch[.sub]]*.
 
 (3)
    Either the author or the maintainer must be identified.
 
