--- rest26/extending/windows.rst	2008-12-19 16:58:09.000000000 +0900
+++ rest262/extending/windows.rst	2009-04-05 05:01:41.000000000 +0900
@@ -93,25 +93,25 @@
       >>>
 
    Congratulations!  You've successfully built your first Python extension module.
 
 #. **Creating your own project** ---  Choose a name and create a directory for
    it.  Copy your C sources into it.  Note that the module source file name does
    not necessarily have to match the module name, but the name of the
    initialization function should match the module name --- you can only import a
    module :mod:`spam` if its initialization function is called :cfunc:`initspam`,
    and it should call :cfunc:`Py_InitModule` with the string ``"spam"`` as its
    first argument (use the minimal :file:`example.c` in this directory as a guide).
    By convention, it lives in a file called :file:`spam.c` or :file:`spammodule.c`.
-   The output file should be called :file:`spam.pyd` (in Release mode) or  
+   The output file should be called :file:`spam.pyd` (in Release mode) or
    :file:`spam_d.pyd` (in Debug mode). The extension :file:`.pyd` was chosen
    to avoid confusion with a system library :file:`spam.dll` to which your module
    could be a Python interface.
 
    .. versionchanged:: 2.5
       Previously, file names like :file:`spam.dll` (in release mode) or
       :file:`spam_d.dll` (in debug mode) were also recognized.
 
    Now your options are:
 
 #. Copy :file:`example.sln` and :file:`example.vcproj`, rename them to
       :file:`spam.\*`, and edit them by hand, or
