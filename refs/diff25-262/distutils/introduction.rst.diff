--- rest25/distutils/introduction.rst	2008-12-19 16:58:05.000000000 +0900
+++ rest262/distutils/introduction.rst	2009-04-05 05:01:40.000000000 +0900
@@ -1,25 +1,25 @@
-.. _intro:
+.. _distutils-intro:
 
 ****************************
 An Introduction to Distutils
 ****************************
 
 This document covers using the Distutils to distribute your Python modules,
 concentrating on the role of developer/distributor: if you're looking for
-information on installing Python modules, you should refer to the Installing
-Python Modules (XXX reference: ../inst/inst.html) manual.
+information on installing Python modules, you should refer to the
+:ref:`install-index` chapter.
 
 
-.. _concepts:
+.. _distutils-concepts:
 
 Concepts & Terminology
 ======================
 
 Using the Distutils is quite simple, both for module developers and for
 users/administrators installing third-party modules.  As a developer, your
 responsibilities (apart from writing solid, well-documented and well-tested
 code, of course!) are:
 
 * write a setup script (:file:`setup.py` by convention)
 
 * (optional) write a setup configuration file
@@ -32,25 +32,25 @@
 
 Not all module developers have access to a multitude of platforms, so it's not
 always feasible to expect them to create a multitude of built distributions.  It
 is hoped that a class of intermediaries, called *packagers*, will arise to
 address this need.  Packagers will take source distributions released by module
 developers, build them on one or more platforms, and release the resulting built
 distributions.  Thus, users on the most popular platforms will be able to
 install most popular Python module distributions in the most natural way for
 their platform, without having to run a single setup script or compile a line of
 code.
 
 
-.. _simple-example:
+.. _distutils-simple-example:
 
 A Simple Example
 ================
 
 The setup script is usually quite simple, although since it's written in Python,
 there are no arbitrary limits to what you can do with it, though you should be
 careful about putting arbitrarily expensive operations in your setup script.
 Unlike, say, Autoconf-style configure scripts, the setup script may be run
 multiple times in the course of building and installing your module
 distribution.
 
 If all you want to do is distribute a module called :mod:`foo`, contained in a
