--- rest25/library/pipes.rst	2008-12-19 16:58:07.000000000 +0900
+++ rest262/library/pipes.rst	2009-04-05 05:02:09.000000000 +0900
@@ -32,61 +32,61 @@
    >>> open('/tmp/1').read()
    'HELLO WORLD'
 
 
 .. _template-objects:
 
 Template Objects
 ----------------
 
 Template objects following methods:
 
 
-.. method:: XXX Class.reset()
+.. method:: Template.reset()
 
    Restore a pipeline template to its initial state.
 
 
-.. method:: XXX Class.clone()
+.. method:: Template.clone()
 
    Return a new, equivalent, pipeline template.
 
 
-.. method:: XXX Class.debug(flag)
+.. method:: Template.debug(flag)
 
    If *flag* is true, turn debugging on. Otherwise, turn debugging off. When
    debugging is on, commands to be executed are printed, and the shell is given
    ``set -x`` command to be more verbose.
 
 
-.. method:: XXX Class.append(cmd, kind)
+.. method:: Template.append(cmd, kind)
 
    Append a new action at the end. The *cmd* variable must be a valid bourne shell
    command. The *kind* variable consists of two letters.
 
    The first letter can be either of ``'-'`` (which means the command reads its
    standard input), ``'f'`` (which means the commands reads a given file on the
    command line) or ``'.'`` (which means the commands reads no input, and hence
    must be first.)
 
    Similarly, the second letter can be either of ``'-'`` (which means  the command
    writes to standard output), ``'f'`` (which means the  command writes a file on
    the command line) or ``'.'`` (which means the command does not write anything,
    and hence must be last.)
 
 
-.. method:: XXX Class.prepend(cmd, kind)
+.. method:: Template.prepend(cmd, kind)
 
    Add a new action at the beginning. See :meth:`append` for explanations of the
    arguments.
 
 
-.. method:: XXX Class.open(file, mode)
+.. method:: Template.open(file, mode)
 
    Return a file-like object, open to *file*, but read from or written to by the
    pipeline.  Note that only one of ``'r'``, ``'w'`` may be given.
 
 
-.. method:: XXX Class.copy(infile, outfile)
+.. method:: Template.copy(infile, outfile)
 
    Copy *infile* to *outfile* through the pipe.
 
