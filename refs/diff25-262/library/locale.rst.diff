--- rest25/library/locale.rst	2008-12-19 16:58:08.000000000 +0900
+++ rest262/library/locale.rst	2009-04-05 05:02:09.000000000 +0900
@@ -483,27 +483,27 @@
    This return value can be used as a format string for :func:`strftime` to
    represent time in a locale-specific era-based way.
 
 
 .. data:: ALT_DIGITS
 
    The return value is a representation of up to 100 values used to represent the
    values 0 to 99.
 
 Example::
 
    >>> import locale
-   >>> loc = locale.getlocale(locale.LC_ALL) # get current locale
+   >>> loc = locale.getlocale() # get current locale
    >>> locale.setlocale(locale.LC_ALL, 'de_DE') # use German locale; name might vary with platform
-   >>> locale.strcoll('f\xe4n', 'foo') # compare a string containing an umlaut 
+   >>> locale.strcoll('f\xe4n', 'foo') # compare a string containing an umlaut
    >>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale
    >>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale
    >>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale
 
 
 Background, details, hints, tips and caveats
 --------------------------------------------
 
 The C standard defines the locale as a program-wide property that may be
 relatively expensive to change.  On top of that, some implementation are broken
 in such a way that frequent locale changes may cause core dumps.  This makes the
 locale somewhat painful to use correctly.
@@ -520,27 +520,27 @@
 If, when coding a module for general use, you need a locale independent version
 of an operation that is affected by the locale (such as :func:`string.lower`, or
 certain formats used with :func:`time.strftime`), you will have to find a way to
 do it without using the standard library routine.  Even better is convincing
 yourself that using locale settings is okay.  Only as a last resort should you
 document that your module is not compatible with non-\ ``C`` locale settings.
 
 .. index:: module: string
 
 The case conversion functions in the :mod:`string` module are affected by the
 locale settings.  When a call to the :func:`setlocale` function changes the
 :const:`LC_CTYPE` settings, the variables ``string.lowercase``,
-``string.uppercase`` and ``string.letters`` are recalculated.  Note that this
-code that uses these variable through ':keyword:`from` ... :keyword:`import`
-...', e.g. ``from string import letters``, is not affected by subsequent
+``string.uppercase`` and ``string.letters`` are recalculated.  Note that code
+that uses these variable through ':keyword:`from` ... :keyword:`import` ...',
+e.g. ``from string import letters``, is not affected by subsequent
 :func:`setlocale` calls.
 
 The only way to perform numeric operations according to the locale is to use the
 special functions defined by this module: :func:`atof`, :func:`atoi`,
 :func:`format`, :func:`str`.
 
 
 .. _embedding-locale:
 
 For extension writers and programs that embed Python
 ----------------------------------------------------
 
