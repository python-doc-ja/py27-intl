@@ -1,95 +1,97 @@
 :tocdepth: 2
 
 ==========================
 Graphic User Interface FAQ
 ==========================
 
 .. contents::
 
-General GUI Questions
-=====================
-
 What platform-independent GUI toolkits exist for Python?
---------------------------------------------------------
+========================================================
 
 Depending on what platform(s) you are aiming at, there are several.
 
 .. XXX check links
 
 Tkinter
-'''''''
+-------
 
 Standard builds of Python include an object-oriented interface to the Tcl/Tk
 widget set, called Tkinter.  This is probably the easiest to install and use.
 For more info about Tk, including pointers to the source, see the Tcl/Tk home
 page at http://www.tcl.tk.  Tcl/Tk is fully portable to the MacOS, Windows, and
 Unix platforms.
 
 wxWidgets
-'''''''''
+---------
 
-wxWidgets is a GUI class library written in C++ that's a portable
-interface to various platform-specific libraries, and that has a
-Python interface called `wxPython <http://www.wxpython.org>`__.
+wxWidgets (http://www.wxwidgets.org) is a free, portable GUI class
+library written in C++ that provides a native look and feel on a
+number of platforms, with Windows, MacOS X, GTK, X11, all listed as
+current stable targets.  Language bindings are available for a number
+of languages including Python, Perl, Ruby, etc.
 
-wxWidgets preserves the look and feel of the
-underlying graphics toolkit, and has a large set of widgets and
-collection of GDI classes.  See `the wxWidgets page
-<http://www.wxwidgets.org>`_ for more details.
+wxPython (http://www.wxpython.org) is the Python binding for
+wxwidgets.  While it often lags slightly behind the official wxWidgets
+releases, it also offers a number of features via pure Python
+extensions that are not available in other language bindings.  There
+is an active wxPython user and developer community.
 
-wxWidgets supports Windows and MacOS; on Unix variants,
-it supports both GTk+ and Motif toolkits.
+Both wxWidgets and wxPython are free, open source, software with
+permissive licences that allow their use in commercial products as
+well as in freeware or shareware.
+
 
 Qt
-'''
+---
 
 There are bindings available for the Qt toolkit (`PyQt
 <http://www.riverbankcomputing.co.uk/software/pyqt/>`_) and for KDE (`PyKDE <http://www.riverbankcomputing.co.uk/software/pykde/intro>`__).  If
 you're writing open source software, you don't need to pay for PyQt, but if you
 want to write proprietary applications, you must buy a PyQt license from
 `Riverbank Computing <http://www.riverbankcomputing.co.uk>`_ and (up to Qt 4.4;
 Qt 4.5 upwards is licensed under the LGPL license) a Qt license from `Trolltech
 <http://www.trolltech.com>`_.
 
 Gtk+
-''''
+----
 
 PyGtk bindings for the `Gtk+ toolkit <http://www.gtk.org>`_ have been
 implemented by James Henstridge; see <http://www.pygtk.org>.
 
 FLTK
-''''
+----
 
 Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet
 powerful and mature cross-platform windowing system, are available from `the
 PyFLTK project <http://pyfltk.sourceforge.net>`_.
 
 
 FOX
-'''
+----
 
 A wrapper for `the FOX toolkit <http://www.fox-toolkit.org/>`_ called `FXpy
 <http://fxpy.sourceforge.net/>`_ is available.  FOX supports both Unix variants
 and Windows.
 
 
 OpenGL
-''''''
+------
 
 For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_.
 
 
 What platform-specific GUI toolkits exist for Python?
------------------------------------------------------
+========================================================
 
 `The Mac port <http://python.org/download/mac>`_ by Jack Jansen has a rich and
 ever-growing set of modules that support the native Mac toolbox calls.  The port
 supports MacOS X's Carbon libraries.
 
 By installing the `PyObjc Objective-C bridge
 <http://pyobjc.sourceforge.net>`_, Python programs can use MacOS X's
 Cocoa libraries. See the documentation that comes with the Mac port.
 
 :ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the
 Microsoft Foundation Classes and a Python programming environment
 that's written mostly in Python using the MFC classes.
