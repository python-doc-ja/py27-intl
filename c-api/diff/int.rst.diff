=== modified file 'Doc/c-api/int.rst'
--- Doc/c-api/int.rst	2008-01-19 22:08:21 +0000
+++ Doc/c-api/int.rst	2010-11-17 12:18:12 +0000
@@ -55,32 +55,41 @@
    returned in this case.
 
 
 .. cfunction:: PyObject* PyInt_FromLong(long ival)
 
    Create a new integer object with a value of *ival*.
 
    The current implementation keeps an array of integer objects for all integers
    between ``-5`` and ``256``, when you create an int in that range you actually
    just get back a reference to the existing object. So it should be possible to
    change the value of ``1``.  I suspect the behaviour of Python in this case is
    undefined. :-)
 
 
 .. cfunction:: PyObject* PyInt_FromSsize_t(Py_ssize_t ival)
 
+   Create a new integer object with a value of *ival*. If the value is larger
+   than ``LONG_MAX`` or smaller than ``LONG_MIN``, a long integer object is
+   returned.
+
+   .. versionadded:: 2.5
+
+
+.. cfunction:: PyObject* PyInt_FromSize_t(size_t ival)
+
    Create a new integer object with a value of *ival*. If the value exceeds
    ``LONG_MAX``, a long integer object is returned.
 
    .. versionadded:: 2.5
 
 
 .. cfunction:: long PyInt_AsLong(PyObject *io)
 
    Will first attempt to cast the object to a :ctype:`PyIntObject`, if it is not
    already one, and then return its value. If there is an error, ``-1`` is
    returned, and the caller should check ``PyErr_Occurred()`` to find out whether
    there was an error, or whether the value just happened to be -1.
 
 
 .. cfunction:: long PyInt_AS_LONG(PyObject *io)
 
@@ -107,16 +116,24 @@
 
 .. cfunction:: Py_ssize_t PyInt_AsSsize_t(PyObject *io)
 
    Will first attempt to cast the object to a :ctype:`PyIntObject` or
    :ctype:`PyLongObject`, if it is not already one, and then return its value as
    :ctype:`Py_ssize_t`.
 
    .. versionadded:: 2.5
 
 
 .. cfunction:: long PyInt_GetMax()
 
    .. index:: single: LONG_MAX
 
    Return the system's idea of the largest integer it can handle
    (:const:`LONG_MAX`, as defined in the system header files).
+
+
+.. cfunction:: int PyInt_ClearFreeList()
+
+   Clear the integer free list. Return the number of items that could not
+   be freed.
+
+   .. versionadded:: 2.6

