=== modified file 'Doc/c-api/weakref.rst'
--- Doc/c-api/weakref.rst	2008-01-19 22:08:21 +0000
+++ Doc/c-api/weakref.rst	2010-11-17 12:18:12 +0000
@@ -50,27 +50,34 @@
 
    Return a weak reference proxy object for the object *ob*.  This will always
    return a new reference, but is not guaranteed to create a new object; an
    existing proxy object may be returned.  The second parameter, *callback*, can
    be a callable object that receives notification when *ob* is garbage
    collected; it should accept a single parameter, which will be the weak
    reference object itself. *callback* may also be ``None`` or *NULL*.  If *ob*
    is not a weakly-referencable object, or if *callback* is not callable,
    ``None``, or *NULL*, this will return *NULL* and raise :exc:`TypeError`.
 
    .. versionadded:: 2.2
 
 
 .. cfunction:: PyObject* PyWeakref_GetObject(PyObject *ref)
 
    Return the referenced object from a weak reference, *ref*.  If the referent is
-   no longer live, returns ``None``.
+   no longer live, returns :const:`Py_None`.
 
    .. versionadded:: 2.2
 
+   .. warning::
+
+      This function returns a **borrowed reference** to the referenced object.
+      This means that you should always call :cfunc:`Py_INCREF` on the object
+      except if you know that it cannot be destroyed while you are still
+      using it.
+
 
 .. cfunction:: PyObject* PyWeakref_GET_OBJECT(PyObject *ref)
 
    Similar to :cfunc:`PyWeakref_GetObject`, but implemented as a macro that does no
    error checking.
 
    .. versionadded:: 2.2

