--- r262/using/cmdline.rst	2009-01-14 09:00:17.794498000 +0900
+++ r266/using/cmdline.rst	2010-07-09 16:51:43.865524000 +0900
@@ -1,36 +1,36 @@
 .. highlightlang:: none
 
 .. _using-on-general:
 
 Command line and environment
 ============================
 
 The CPython interpreter scans the command line and the environment for various
 settings.
 
-.. note::
+.. impl-detail::
 
    Other implementations' command line schemes may differ.  See
    :ref:`implementations` for further resources.
 
 
 .. _using-on-cmdline:
 
 Command line
 ------------
 
 When invoking Python, you may specify any of these options::
 
-    python [-dEiOQsStuUvxX3?] [-c command | -m module-name | script | - ] [args]
+    python [-BdEiOQsStuUvVWxX3?] [-c command | -m module-name | script | - ] [args]
 
 The most common use case is, of course, a simple invocation of a script::
 
     python myscript.py
 
 
 .. _using-on-interface-options:
 
 Interface options
 ~~~~~~~~~~~~~~~~~
 
 The interpreter interface resembles that of the UNIX shell, but provides some
@@ -49,47 +49,47 @@
 * When called with ``-m module-name``, the given module is located on the
   Python module path and executed as a script.
 
 In non-interactive mode, the entire input is parsed before it is executed.
 
 An interface option terminates the list of options consumed by the interpreter,
 all consecutive arguments will end up in :data:`sys.argv` -- note that the first
 element, subscript zero (``sys.argv[0]``), is a string reflecting the program's
 source.
 
 .. cmdoption:: -c <command>
 
-   Execute the Python code in *command*.  *command* can be one ore more
+   Execute the Python code in *command*.  *command* can be one or more
    statements separated by newlines, with significant leading whitespace as in
    normal module code.
 
    If this option is given, the first element of :data:`sys.argv` will be
    ``"-c"`` and the current directory will be added to the start of
    :data:`sys.path` (allowing modules in that directory to be imported as top
    level modules).
 
 
 .. cmdoption:: -m <module-name>
 
    Search :data:`sys.path` for the named module and execute its contents as
    the :mod:`__main__` module.
 
    Since the argument is a *module* name, you must not give a file extension
    (``.py``).  The ``module-name`` should be a valid Python module name, but
    the implementation may not always enforce this (e.g. it may allow you to
    use a name that includes a hyphen).
 
    .. note::
 
-      This option cannot be used with builtin modules and extension modules
+      This option cannot be used with built-in modules and extension modules
       written in C, since they do not have Python module files. However, it
       can still be used for precompiled modules, even if the original source
       file is not available.
 
    If this option is given, the first element of :data:`sys.argv` will be the
    full path to the module file. As with the :option:`-c` option, the current
    directory will be added to the start of :data:`sys.path`.
 
    Many standard library modules contain code that is invoked on their execution
    as a script.  An example is the :mod:`timeit` module::
 
        python -mtimeit -s 'setup here' 'benchmarked code here'
@@ -267,26 +267,24 @@
 
    Force stdin, stdout and stderr to be totally unbuffered.  On systems where it
    matters, also put stdin, stdout and stderr in binary mode.
 
    Note that there is internal buffering in :meth:`file.readlines` and
    :ref:`bltin-file-objects` (``for line in sys.stdin``) which is not influenced
    by this option.  To work around this, you will want to use
    :meth:`file.readline` inside a ``while 1:`` loop.
 
    See also :envvar:`PYTHONUNBUFFERED`.
 
 
-.. XXX should the -U option be documented?
-
 .. cmdoption:: -v
 
    Print a message each time a module is initialized, showing the place
    (filename or built-in module) from which it is loaded.  When given twice
    (:option:`-vv`), print a message for each file that is checked for when
    searching for a module.  Also provides information on module cleanup at exit.
    See also :envvar:`PYTHONVERBOSE`.
 
 
 .. cmdoption:: -W arg
 
    Warning control.  Python's warning machinery by default prints warning
@@ -298,37 +296,37 @@
    By default, each warning is printed once for each source line where it
    occurs.  This option controls how often warnings are printed.
 
    Multiple :option:`-W` options may be given; when a warning matches more than
    one option, the action for the last matching option is performed.  Invalid
    :option:`-W` options are ignored (though, a warning message is printed about
    invalid options when the first warning is issued).
 
    Warnings can also be controlled from within a Python program using the
    :mod:`warnings` module.
 
    The simplest form of argument is one of the following action strings (or a
-   unique abbreviation):
+   unique abbreviation) by themselves:
 
    ``ignore``
       Ignore all warnings.
    ``default``
       Explicitly request the default behavior (printing each warning once per
       source line).
    ``all``
       Print a warning each time it occurs (this may generate many messages if a
       warning is triggered repeatedly for the same source line, such as inside a
       loop).
    ``module``
-      Print each warning only only the first time it occurs in each module.
+      Print each warning only the first time it occurs in each module.
    ``once``
       Print each warning only the first time it occurs in the program.
    ``error``
       Raise an exception instead of printing a warning message.
 
    The full form of argument is::
 
        action:message:category:module:line
 
    Here, *action* is as explained above but only applies to messages that match
    the remaining fields.  Empty fields match all values; trailing empty fields
    may be omitted.  The *message* field matches the start of the warning message
@@ -342,45 +340,67 @@
 
    .. seealso::
       :mod:`warnings` -- the warnings module
 
       :pep:`230` -- Warning framework
 
 
 .. cmdoption:: -x
 
    Skip the first line of the source, allowing use of non-Unix forms of
    ``#!cmd``.  This is intended for a DOS specific hack only.
 
-   .. warning:: The line numbers in error messages will be off by one!
-
+   .. note:: The line numbers in error messages will be off by one.
 
 .. cmdoption:: -3
 
    Warn about Python 3.x incompatibilities which cannot be fixed trivially by
    :ref:`2to3 <2to3-reference>`. Among these are:
 
    * :meth:`dict.has_key`
    * :func:`apply`
    * :func:`callable`
    * :func:`coerce`
    * :func:`execfile`
    * :func:`reduce`
    * :func:`reload`
 
    Using these will emit a :exc:`DeprecationWarning`.
 
    .. versionadded:: 2.6
 
+Options you shouldn't use
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. cmdoption:: -J
+
+   Reserved for use by Jython_.
+
+.. _Jython: http://jython.org
+
+.. cmdoption:: -U
+
+   Turns all string literals into unicodes globally.  Do not be tempted to use
+   this option as it will probably break your world.  It also produces
+   ``.pyc`` files with a different magic number than normal.  Instead, you can
+   enable unicode literals on a per-module basis by using::
+
+        from __future__ import unicode_literals
+
+   at the top of the file.  See :mod:`__future__` for details.
+
+.. cmdoption:: -X
 
+    Reserved for alternative implementations of Python to use for their own
+    purposes.
 
 .. _using-on-envvars:
 
 Environment variables
 ---------------------
 
 These environment variables influence Python's behavior.
 
 .. envvar:: PYTHONHOME
 
    Change the location of the standard Python libraries.  By default, the
    libraries are searched in :file:`{prefix}/lib/python{version}` and
