--- r262/tutorial/classes.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/tutorial/classes.rst	2010-08-03 06:45:43.685855000 +0900
@@ -3,157 +3,156 @@
 *******
 Classes
 *******
 
 Python's class mechanism adds classes to the language with a minimum of new
 syntax and semantics.  It is a mixture of the class mechanisms found in C++ and
 Modula-3.  As is true for modules, classes in Python do not put an absolute
 barrier between definition and user, but rather rely on the politeness of the
 user not to "break into the definition."  The most important features of classes
 are retained with full power, however: the class inheritance mechanism allows
 multiple base classes, a derived class can override any methods of its base
 class or classes, and a method can call the method of a base class with the same
-name.  Objects can contain an arbitrary amount of private data.
+name.  Objects can contain an arbitrary amount of data.
 
 In C++ terminology, all class members (including the data members) are *public*,
-and all member functions are *virtual*.
+and all member functions are *virtual*.
-There are no special constructors or
-destructors.  As in Modula-3, there are no shorthands for referencing the
-object's members from its methods: the method function is declared with an
+As in Modula-3, there are no shorthands
+for referencing the object's members from its methods: the method function is
-explicit first argument representing the object, which is provided implicitly by
+declared with an explicit first argument representing the object, which is
-the call.  As in Smalltalk, classes themselves are objects, albeit in the wider
+provided implicitly by the call.  As in Smalltalk, classes themselves are
-sense of the word: in Python, all data types are objects.  This provides
+objects.  This provides semantics for importing and renaming.  Unlike C++ and
-semantics for importing and renaming.  Unlike  C++ and Modula-3, built-in types
-can be used as base classes for extension by the user.  Also, like in C++ but
-unlike in Modula-3, most built-in operators with special syntax (arithmetic
+Modula-3, built-in types can be used as base classes for extension by the user.
+Also, like in C++, most built-in operators with special syntax (arithmetic
 operators, subscripting etc.) can be redefined for class instances.
 
+(Lacking universally accepted terminology to talk about classes, I will make
+occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since
+its object-oriented semantics are closer to those of Python than C++, but I
+expect that few readers have heard of it.)
 
-.. _tut-terminology:
 
-A Word About Terminology
-========================
+.. _tut-object:
 
-Lacking universally accepted terminology to talk about classes, I will make
-occasional use of Smalltalk and C++ terms.  (I would use Modula-3 terms, since
-its object-oriented semantics are closer to those of Python than C++, but I
-expect that few readers have heard of it.)
+A Word About Names and Objects
+==============================
 
 Objects have individuality, and multiple names (in multiple scopes) can be bound
 to the same object.  This is known as aliasing in other languages.  This is
 usually not appreciated on a first glance at Python, and can be safely ignored
 when dealing with immutable basic types (numbers, strings, tuples).  However,
-aliasing has an (intended!) effect on the semantics of Python code involving
+aliasing has a possibly surprising effect on the semantics of Python code
-mutable objects such as lists, dictionaries, and most types representing
+involving mutable objects such as lists, dictionaries, and most other types.
-entities outside the program (files, windows, etc.).  This is usually used to
-the benefit of the program, since aliases behave like pointers in some respects.
-For example, passing an object is cheap since only a pointer is passed by the
-implementation; and if a function modifies an object passed as an argument, the
-caller will see the change --- this eliminates the need for two different
-argument passing mechanisms as in Pascal.
+This is usually used to the benefit of the program, since aliases behave like
+pointers in some respects.  For example, passing an object is cheap since only a
+pointer is passed by the implementation; and if a function modifies an object
+passed as an argument, the caller will see the change --- this eliminates the
+need for two different argument passing mechanisms as in Pascal.
 
 
 .. _tut-scopes:
 
-Python Scopes and Name Spaces
-=============================
+Python Scopes and Namespaces
+============================
 
 Before introducing classes, I first have to tell you something about Python's
 scope rules.  Class definitions play some neat tricks with namespaces, and you
 need to know how scopes and namespaces work to fully understand what's going on.
 Incidentally, knowledge about this subject is useful for any advanced Python
 programmer.
 
 Let's begin with some definitions.
 
 A *namespace* is a mapping from names to objects.  Most namespaces are currently
 implemented as Python dictionaries, but that's normally not noticeable in any
 way (except for performance), and it may change in the future.  Examples of
-namespaces are: the set of built-in names (functions such as :func:`abs`, and
+namespaces are: the set of built-in names (containing functions such as :func:`abs`, and
 built-in exception names); the global names in a module; and the local names in
 a function invocation.  In a sense the set of attributes of an object also form
 a namespace.  The important thing to know about namespaces is that there is
 absolutely no relation between names in different namespaces; for instance, two
-different modules may both define a function "maximize" without confusion ---
+different modules may both define a function ``maximize`` without confusion ---
 users of the modules must prefix it with the module name.
 
 By the way, I use the word *attribute* for any name following a dot --- for
 example, in the expression ``z.real``, ``real`` is an attribute of the object
 ``z``.  Strictly speaking, references to names in modules are attribute
 references: in the expression ``modname.funcname``, ``modname`` is a module
 object and ``funcname`` is an attribute of it.  In this case there happens to be
 a straightforward mapping between the module's attributes and the global names
 defined in the module: they share the same namespace!  [#]_
 
 Attributes may be read-only or writable.  In the latter case, assignment to
 attributes is possible.  Module attributes are writable: you can write
 ``modname.the_answer = 42``.  Writable attributes may also be deleted with the
 :keyword:`del` statement.  For example, ``del modname.the_answer`` will remove
 the attribute :attr:`the_answer` from the object named by ``modname``.
 
-Name spaces are created at different moments and have different lifetimes.  The
+Namespaces are created at different moments and have different lifetimes.  The
 namespace containing the built-in names is created when the Python interpreter
 starts up, and is never deleted.  The global namespace for a module is created
 when the module definition is read in; normally, module namespaces also last
 until the interpreter quits.  The statements executed by the top-level
 invocation of the interpreter, either read from a script file or interactively,
 are considered part of a module called :mod:`__main__`, so they have their own
 global namespace.  (The built-in names actually also live in a module; this is
 called :mod:`__builtin__`.)
 
 The local namespace for a function is created when the function is called, and
 deleted when the function returns or raises an exception that is not handled
 within the function.  (Actually, forgetting would be a better way to describe
 what actually happens.)  Of course, recursive invocations each have their own
 local namespace.
 
 A *scope* is a textual region of a Python program where a namespace is directly
 accessible.  "Directly accessible" here means that an unqualified reference to a
 name attempts to find the name in the namespace.
 
 Although scopes are determined statically, they are used dynamically. At any
 time during execution, there are at least three nested scopes whose namespaces
-are directly accessible: the innermost scope, which is searched first, contains
-the local names; the namespaces of any enclosing functions, which are searched
-starting with the nearest enclosing scope; the middle scope, searched next,
-contains the current module's global names; and the outermost scope (searched
-last) is the namespace containing built-in names.
+are directly accessible:
+
+* the innermost scope, which is searched first, contains the local names
+* the scopes of any enclosing functions, which are searched starting with the
+  nearest enclosing scope, contains non-local, but also non-global names
+* the next-to-last scope contains the current module's global names
+* the outermost scope (searched last) is the namespace containing built-in names
 
 If a name is declared global, then all references and assignments go directly to
 the middle scope containing the module's global names. Otherwise, all variables
 found outside of the innermost scope are read-only (an attempt to write to such
 a variable will simply create a *new* local variable in the innermost scope,
 leaving the identically named outer variable unchanged).
 
 Usually, the local scope references the local names of the (textually) current
 function.  Outside functions, the local scope references the same namespace as
 the global scope: the module's namespace. Class definitions place yet another
 namespace in the local scope.
 
 It is important to realize that scopes are determined textually: the global
 scope of a function defined in a module is that module's namespace, no matter
 from where or by what alias the function is called.  On the other hand, the
 actual search for names is done dynamically, at run time --- however, the
 language definition is evolving towards static name resolution, at "compile"
 time, so don't rely on dynamic name resolution!  (In fact, local variables are
 already determined statically.)
 
-A special quirk of Python is that -- if no :keyword:`global`
+A special quirk of Python is that -- if no :keyword:`global` statement is in
-statement is in effect -- assignments to names always go
+effect -- assignments to names always go into the innermost scope.  Assignments
-into the innermost scope.  Assignments do not copy data --- they just bind names
+do not copy data --- they just bind names to objects.  The same is true for
-to objects.  The same is true for deletions: the statement ``del x`` removes the
+deletions: the statement ``del x`` removes the binding of ``x`` from the
-binding of ``x`` from the namespace referenced by the local scope.  In fact, all
+namespace referenced by the local scope.  In fact, all operations that introduce
-operations that introduce new names use the local scope: in particular, import
+new names use the local scope: in particular, :keyword:`import` statements and
-statements and function definitions bind the module or function name in the
+function definitions bind the module or function name in the local scope.  (The
-local scope.  (The :keyword:`global` statement can be used to indicate that
+:keyword:`global` statement can be used to indicate that particular variables
-particular variables live in the global scope.)
+live in the global scope.)
 
 
 .. _tut-firstclasses:
 
 A First Look at Classes
 =======================
 
 Classes introduce a little bit of new syntax, three new object types, and some
 new semantics.
 
 
 .. _tut-classdefinition:
@@ -323,27 +322,27 @@
 that the object is passed as the first argument of the function.  In our
 example, the call ``x.f()`` is exactly equivalent to ``MyClass.f(x)``.  In
 general, calling a method with a list of *n* arguments is equivalent to calling
 the corresponding function with an argument list that is created by inserting
 the method's object before the first argument.
 
 If you still don't understand how methods work, a look at the implementation can
 perhaps clarify matters.  When an instance attribute is referenced that isn't a
 data attribute, its class is searched.  If the name denotes a valid class
 attribute that is a function object, a method object is created by packing
 (pointers to) the instance object and the function object just found together in
 an abstract object: this is the method object.  When the method object is called
-with an argument list, it is unpacked again, a new argument list is constructed
+with an argument list, a new argument list is constructed from the instance
-from the instance object and the original argument list, and the function object
-is called with this new argument list.
+object and the argument list, and the function object is called with this new
+argument list.
 
 
 .. _tut-remarks:
 
 Random Remarks
 ==============
 
 .. These should perhaps be placed more carefully...
 
 Data attributes override method attributes with the same name; to avoid
 accidental name conflicts, which may cause hard-to-find bugs in large programs,
 it is wise to use some kind of convention that minimizes the chance of
@@ -363,27 +362,27 @@
 maintained by the methods by stamping on their data attributes.  Note that
 clients may add data attributes of their own to an instance object without
 affecting the validity of the methods, as long as name conflicts are avoided ---
 again, a naming convention can save a lot of headaches here.
 
 There is no shorthand for referencing data attributes (or other methods!) from
 within methods.  I find that this actually increases the readability of methods:
 there is no chance of confusing local variables and instance variables when
 glancing through a method.
 
 Often, the first argument of a method is called ``self``.  This is nothing more
 than a convention: the name ``self`` has absolutely no special meaning to
-Python.  (Note, however, that by not following the convention your code may be
+Python.  Note, however, that by not following the convention your code may be
 less readable to other Python programmers, and it is also conceivable that a
-*class browser* program might be written that relies upon such a convention.)
+*class browser* program might be written that relies upon such a convention.
 
 Any function object that is a class attribute defines a method for instances of
 that class.  It is not necessary that the function definition is textually
 enclosed in the class definition: assigning a function object to a local
 variable in the class is also ok.  For example::
 
    # Function defined outside the class
    def f1(self, x, y):
        return min(x, x+y)
 
    class C:
        f = f1
@@ -401,31 +400,31 @@
 
    class Bag:
        def __init__(self):
            self.data = []
        def add(self, x):
            self.data.append(x)
        def addtwice(self, x):
            self.add(x)
            self.add(x)
 
 Methods may reference global names in the same way as ordinary functions.  The
 global scope associated with a method is the module containing the class
-definition.  (The class itself is never used as a global scope!)  While one
+definition.  (The class itself is never used as a global scope.)  While one
 rarely encounters a good reason for using global data in a method, there are
 many legitimate uses of the global scope: for one thing, functions and modules
 imported into the global scope can be used by methods, as well as functions and
 classes defined in it.  Usually, the class containing the method is itself
 defined in this global scope, and in the next section we'll find some good
-reasons why a method would want to reference its own class!
+reasons why a method would want to reference its own class.
 
 Each value is an object, and therefore has a *class* (also called its *type*).
 It is stored as ``object.__class__``.
 
 
 .. _tut-inheritance:
 
 Inheritance
 ===========
 
 Of course, a language feature would not be worthy of the name "class" without
 supporting inheritance.  The syntax for a derived class definition looks like
@@ -458,30 +457,30 @@
 is valid if this yields a function object.
 
 Derived classes may override methods of their base classes.  Because methods
 have no special privileges when calling other methods of the same object, a
 method of a base class that calls another method defined in the same base class
 may end up calling a method of a derived class that overrides it.  (For C++
 programmers: all methods in Python are effectively ``virtual``.)
 
 An overriding method in a derived class may in fact want to extend rather than
 simply replace the base class method of the same name. There is a simple way to
 call the base class method directly: just call ``BaseClassName.methodname(self,
 arguments)``.  This is occasionally useful to clients as well.  (Note that this
-only works if the base class is defined or imported directly in the global
+only works if the base class is accessible as ``BaseClassName`` in the global
 scope.)
 
-Python has two builtin functions that work with inheritance:
+Python has two built-in functions that work with inheritance:
 
-* Use :func:`isinstance` to check an object's type: ``isinstance(obj, int)``
+* Use :func:`isinstance` to check an instance's type: ``isinstance(obj, int)``
   will be ``True`` only if ``obj.__class__`` is :class:`int` or some class
   derived from :class:`int`.
 
 * Use :func:`issubclass` to check class inheritance: ``issubclass(bool, int)``
   is ``True`` since :class:`bool` is a subclass of :class:`int`.  However,
   ``issubclass(unicode, str)`` is ``False`` since :class:`unicode` is not a
   subclass of :class:`str` (they only share a common ancestor,
   :class:`basestring`).
 
 
 
 .. _tut-multiple:
@@ -528,44 +527,43 @@
 parent only once, and that is monotonic (meaning that a class can be subclassed
 without affecting the precedence order of its parents).  Taken together, these
 properties make it possible to design reliable and extensible classes with
 multiple inheritance.  For more detail, see
 http://www.python.org/download/releases/2.3/mro/.
 
 
 .. _tut-private:
 
 Private Variables
 =================
 
+"Private" instance variables that cannot be accessed except from inside an
+object, don't exist in Python.  However, there is a convention that is followed
+by most Python code: a name prefixed with an underscore (e.g. ``_spam``) should
+be treated as a non-public part of the API (whether it is a function, a method
+or a data member).  It should be considered an implementation detail and subject
+to change without notice.
+
+Since there is a valid use-case for class-private members (namely to avoid name
+clashes of names with names defined by subclasses), there is limited support for
-There is limited support for class-private identifiers.  Any identifier of the
+such a mechanism, called :dfn:`name mangling`.  Any identifier of the form
-form ``__spam`` (at least two leading underscores, at most one trailing
+``__spam`` (at least two leading underscores, at most one trailing underscore)
-underscore) is textually replaced with ``_classname__spam``, where ``classname``
+is textually replaced with ``_classname__spam``, where ``classname`` is the
-is the current class name with leading underscore(s) stripped.  This mangling is
+current class name with leading underscore(s) stripped.  This mangling is done
-done without regard to the syntactic position of the identifier, so it can be
+without regard to the syntactic position of the identifier, as long as it
-used to define class-private instance and class variables, methods, variables
+occurs within the definition of a class.
-stored in globals, and even variables stored in instances. private to this class
-on instances of *other* classes.  Truncation may occur when the mangled name
-would be longer than 255 characters. Outside classes, or when the class name
-consists of only underscores, no mangling occurs.
+
-
-Name mangling is intended to give classes an easy way to define "private"
-instance variables and methods, without having to worry about instance variables
-defined by derived classes, or mucking with instance variables by code outside
-the class.  Note that the mangling rules are designed mostly to avoid accidents;
-it still is possible for a determined soul to access or modify a variable that
-is considered private.  This can even be useful in special circumstances, such
-as in the debugger, and that's one reason why this loophole is not closed.
-(Buglet: derivation of a class with the same name as the base class makes use of
-private variables of the base class possible.)
+Note that the mangling rules are designed mostly to avoid accidents; it still is
+possible to access or modify a variable that is considered private.  This can
+even be useful in special circumstances, such as in the debugger.
 
 Notice that code passed to ``exec``, ``eval()`` or ``execfile()`` does not
 consider the classname of the invoking  class to be the current class; this is
 similar to the effect of the  ``global`` statement, the effect of which is
 likewise restricted to  code that is byte-compiled together.  The same
 restriction applies to ``getattr()``, ``setattr()`` and ``delattr()``, as well
 as when referencing ``__dict__`` directly.
 
 
 .. _tut-odds:
 
 Odds and Ends
@@ -600,39 +598,39 @@
 object with the method :meth:`m`, and ``m.im_func`` is the function object
 corresponding to the method.
 
 
 .. _tut-exceptionclasses:
 
 Exceptions Are Classes Too
 ==========================
 
 User-defined exceptions are identified by classes as well.  Using this mechanism
 it is possible to create extensible hierarchies of exceptions.
 
-There are two new valid (semantic) forms for the raise statement::
+There are two new valid (semantic) forms for the :keyword:`raise` statement::
 
    raise Class, instance
 
    raise instance
 
 In the first form, ``instance`` must be an instance of :class:`Class` or of a
 class derived from it.  The second form is a shorthand for::
 
    raise instance.__class__, instance
 
-A class in an except clause is compatible with an exception if it is the same
+A class in an :keyword:`except` clause is compatible with an exception if it is
-class or a base class thereof (but not the other way around --- an except clause
+the same class or a base class thereof (but not the other way around --- an
-listing a derived class is not compatible with a base class).  For example, the
-following code will print B, C, D in that order::
+except clause listing a derived class is not compatible with a base class).  For
+example, the following code will print B, C, D in that order::
 
    class B:
        pass
    class C(B):
        pass
    class D(C):
        pass
 
    for c in [B, C, D]:
        try:
            raise c()
        except D:
@@ -686,42 +684,45 @@
    >>> it.next()
    'b'
    >>> it.next()
    'c'
    >>> it.next()
 
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
        it.next()
    StopIteration
 
 Having seen the mechanics behind the iterator protocol, it is easy to add
-iterator behavior to your classes.  Define a :meth:`__iter__` method which
+iterator behavior to your classes.  Define an :meth:`__iter__` method which
 returns an object with a :meth:`next` method.  If the class defines
 :meth:`next`, then :meth:`__iter__` can just return ``self``::
 
    class Reverse:
        "Iterator for looping over a sequence backwards"
        def __init__(self, data):
            self.data = data
            self.index = len(data)
        def __iter__(self):
            return self
        def next(self):
            if self.index == 0:
                raise StopIteration
            self.index = self.index - 1
            return self.data[self.index]
 
-   >>> for char in Reverse('spam'):
+   >>> rev = Reverse('spam')
+   >>> iter(rev)
+   <__main__.Reverse object at 0x00A1DB50>
+   >>> for char in rev:
    ...     print char
    ...
    m
    a
    p
    s
 
 
 .. _tut-generators:
 
 Generators
 ==========
