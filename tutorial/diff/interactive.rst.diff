--- rest25/tutorial/interactive.rst	2008-12-19 16:58:06.000000000 +0900
+++ rest262/tutorial/interactive.rst	2009-04-05 05:01:50.000000000 +0900
@@ -106,33 +106,33 @@
 :kbd:`Tab` key twice suggests completions; it looks at Python statement names,
 the current local variables, and the available module names.  For dotted
 expressions such as ``string.a``, it will evaluate the expression up to the
 final ``'.'`` and then suggest completions from the attributes of the resulting
 object.  Note that this may execute application-defined code if an object with a
 :meth:`__getattr__` method is part of the expression.
 
 A more capable startup file might look like this example.  Note that this
 deletes the names it creates once they are no longer needed; this is done since
 the startup file is executed in the same namespace as the interactive commands,
 and removing the names avoids creating side effects in the interactive
 environment.  You may find it convenient to keep some of the imported modules,
-such as :mod:`os` (XXX reference: ../lib/module-os.html), which turn out to be
-needed in most sessions with the interpreter. ::
+such as :mod:`os`, which turn out to be needed in most sessions with the
+interpreter. ::
 
    # Add auto-completion and a stored history file of commands to your Python
    # interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
    # bound to the Esc key by default (you can change it - see readline docs).
    #
    # Store the file in ~/.pystartup, and set an environment variable to point
-   # to it:  "export PYTHONSTARTUP=/max/home/itamar/.pystartup" in bash.
+   # to it:  "export PYTHONSTARTUP=/home/user/.pystartup" in bash.
    #
    # Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
    # full path to your home directory.
 
    import atexit
    import os
    import readline
    import rlcompleter
 
    historyPath = os.path.expanduser("~/.pyhistory")
 
    def save_history(historyPath=historyPath):
