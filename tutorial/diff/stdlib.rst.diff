--- r262/tutorial/stdlib.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/tutorial/stdlib.rst	2009-12-20 07:59:01.003699000 +0900
@@ -12,30 +12,30 @@
 
 The :mod:`os` module provides dozens of functions for interacting with the
 operating system::
 
    >>> import os
    >>> os.system('time 0:02')
    0
    >>> os.getcwd()      # Return the current working directory
    'C:\\Python26'
    >>> os.chdir('/server/accesslogs')
 
 Be sure to use the ``import os`` style instead of ``from os import *``.  This
-will keep :func:`os.open` from shadowing the builtin :func:`open` function which
+will keep :func:`os.open` from shadowing the built-in :func:`open` function which
 operates much differently.
 
 .. index:: builtin: help
 
-The builtin :func:`dir` and :func:`help` functions are useful as interactive
+The built-in :func:`dir` and :func:`help` functions are useful as interactive
 aids for working with large modules like :mod:`os`::
 
    >>> import os
    >>> dir(os)
    <returns a list of all module functions>
    >>> help(os)
    <returns an extensive manual page created from the module's docstrings>
 
 For daily file and directory management tasks, the :mod:`shutil` module provides
 a higher level interface that is easier to use::
 
    >>> import shutil
@@ -170,33 +170,33 @@
 
 .. _tut-dates-and-times:
 
 Dates and Times
 ===============
 
 The :mod:`datetime` module supplies classes for manipulating dates and times in
 both simple and complex ways. While date and time arithmetic is supported, the
 focus of the implementation is on efficient member extraction for output
 formatting and manipulation.  The module also supports objects that are timezone
 aware. ::
 
-   # dates are easily constructed and formatted
+   >>> # dates are easily constructed and formatted
    >>> from datetime import date
    >>> now = date.today()
    >>> now
    datetime.date(2003, 12, 2)
    >>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
    '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
 
-   # dates support calendar arithmetic
+   >>> # dates support calendar arithmetic
    >>> birthday = date(1964, 7, 31)
    >>> age = now - birthday
    >>> age.days
    14368
 
 
 .. _tut-data-compression:
 
 Data Compression
 ================
 
 Common data archiving and compression formats are directly supported by modules
@@ -297,19 +297,19 @@
   names, no direct knowledge or handling of XML is needed.
 
 * The :mod:`email` package is a library for managing email messages, including
   MIME and other RFC 2822-based message documents. Unlike :mod:`smtplib` and
   :mod:`poplib` which actually send and receive messages, the email package has
   a complete toolset for building or decoding complex message structures
   (including attachments) and for implementing internet encoding and header
   protocols.
 
 * The :mod:`xml.dom` and :mod:`xml.sax` packages provide robust support for
   parsing this popular data interchange format. Likewise, the :mod:`csv` module
   supports direct reads and writes in a common database format. Together, these
-  modules and packages greatly simplify data interchange between python
+  modules and packages greatly simplify data interchange between Python
   applications and other tools.
 
 * Internationalization is supported by a number of modules including
   :mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package.
 
 
