
:mod:`warnings` --- 警告の制御
==============================

.. index:: single: warnings

.. module:: warnings
   :synopsis: 警告メッセージを送出したり、その処理方法を制御したり します。


.. versionadded:: 2.1

警告メッセージは一般に、ユーザに警告しておいた方がよいような状況下に プログラムが置かれているが、その状況は (通常は) 例外を送出したり
そのプログラムを終了させるほどの正当な理由がないといった状況で 発されます。例えば、プログラムが古いモジュールを使っている場合
には警告を発したくなるかもしれません。

Python プログラマは、このモジュールの :func:`warn` 関数を 使うことで警告を発することができます。(C 言語のプログラマは
:cfunc:`PyErr_Warn` を使います; 詳細は Python/C API Reference Manual (XXX reference:
../api/exceptionHandling.html) を参照してください)。

警告メッセージは通常 ``sys.stderr`` に出力されますが、その処理 方法は、全ての警告に対する無視する処理から警告を例外に変更する
処理まで、柔軟に変更することができます。警告の処理方法は 警告カテゴリ (以下参照)、警告メッセージテキスト、そして警告を
発したソースコード上の場所に基づいて変更することができます。 ソースコード上の同じ場所に対して特定の警告が繰り返された場合、 通常は抑制されます。

警告制御には 2 つの段階 (stage) があります: 第一に、警告が発される たびに、メッセージを出力すべきかどうか決定が行われます; 次に、
メッセージを出力するなら、メッセージはユーザによって設定が可能なフック を使って書式化され印字されます。

警告メッセージを出力するかどうかの決定は、警告フィルタによって制御 されます。警告フィルタは一致規則 (matching
rule)と動作からなるシーケンスです。 :func:`filterwarnings` を呼び出して一致規則をフィルタに追加する
ことができ、:func:`resetwarnings` を呼び出してフィルタを標準 設定の状態にリセットすることができます。

警告メッセージの印字は :func:`showwarning` を呼び出して行うことが でき、この関数は上書きすることができます; この関数の標準の実装では、
:func:`formatwarning` を呼び出して警告メッセージを書式化しますが、 この関数についても自作の実装を使うことができます。


.. _warning-categories:

警告カテゴリ
------------

警告カテゴリを表現する組み込み例外は数多くあります。このカテゴリ化は 警告をグループごとフィルタする上で便利です。現在以下の警告カテゴリ
クラスが定義されています:

+----------------------------------+---------------------------------------------------------------------------------------+
| クラス                           | 記述                                                                                  |
+==================================+=======================================================================================+
| :exc:`Warning`                   | 全ての警告カテゴリクラスの基底クラスです。 :exc:`Exception`                           |
|                                  | のサブクラスです。                                                                    |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`UserWarning`               | :func:`warn` の標準のカテゴリです。                                                   |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`DeprecationWarning`        | その機能が廃用化されていることを示す 警告カテゴリの基底クラスです。                   |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`SyntaxWarning`             | その文法機能があいまいであることを示す警告 カテゴリの基底クラスです。                 |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`RuntimeWarning`            | その実行時システム機能があいまいであることを 示す警告カテゴリの基底クラスです。       |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`FutureWarning`             | その構文の意味付けが将来変更される予定である ことを示す警告カテゴリの基底クラスです。 |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`PendingDeprecationWarning` | 将来その機能が廃用化されることを示す                                                  |
|                                  | 警告カテゴリの基底クラスです(デフォルトでは無視されます)。                            |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`ImportWarning`             | モジュールのインポート処理中に引き起こされる                                          |
|                                  | 警告カテゴリの基底クラスです(デフォルトでは無視されます)。                            |
+----------------------------------+---------------------------------------------------------------------------------------+
| :exc:`UnicodeWarning`            | Unicode に関係した警告カテゴリの基底クラスです。                                      |
+----------------------------------+---------------------------------------------------------------------------------------+

これらは技術的には組み込み例外ですが、概念的には警告メカニズムに 属しているのでここで記述されています。

標準の警告カテゴリをユーザの作成したコード上でサブクラス化することで、 さらに別の警告カテゴリを定義することができます。 警告カテゴリは常に
:exc:`Warning` クラスのサブクラスでなければ なりません。


.. _warning-filter:

警告フィルタ
------------

警告フィルタは、ある警告を無視すべきか、表示すべきか、あるいは (例外を送出する) エラーにするべきかを制御します。

概念的には、警告フィルタは複数のフィルタ仕様からなる順番付けられた リストを維持しています; 何らかの特定の警告が生じると、フィルタ仕様の
一致するものが見つかるまで、リスト中の各フィルタとの照合が行われます; 一致したフィルタ仕様がその警告の処理方法を決定します。 フィルタの各エントリは
(*action*, *message*, *category*, *module*, *lineno*) からなるタプルです。ここで:

* *action* は以下の文字列のうちの一つです:

  +---------------+-------------------------------------------------------------------------------------+
  | 値            | 処理方法                                                                            |
  +===============+=====================================================================================+
  | ``"error"``   | 一致した警告を例外に変えます                                                        |
  +---------------+-------------------------------------------------------------------------------------+
  | ``"ignore"``  | 一致した警告を決して出力しません                                                    |
  +---------------+-------------------------------------------------------------------------------------+
  | ``"always"``  | 一致した警告を常に出力します                                                        |
  +---------------+-------------------------------------------------------------------------------------+
  | ``"default"`` | 一致した警告のうち、警告の原因になった                                              |
  |               | ソースコード上の場所ごとに、最初の警告のみ出力します。                              |
  +---------------+-------------------------------------------------------------------------------------+
  | ``"module"``  | 一致した警告のうち、警告の原因になった モジュールごとに、最初の警告のみ出力します。 |
  +---------------+-------------------------------------------------------------------------------------+
  | ``"once"``    | 一致した警告のうち、警告の原因になった 場所にかかわらず最初の警告のみ出力します。   |
  +---------------+-------------------------------------------------------------------------------------+

* *message* は正規表現を含む文字列で、メッセージはこの パタンに一致しなければなりません (照合時には常に大小文字の区別を
  しないようにコンパイルされます)。

* *category* はクラス (:exc:`Warning` のサブクラス) です。 警告クラスはこのクラスのサブクラスに一致しなければなりません。

* *module* は正規表現を含む文字列で、モジュール名はこのパタン に一致しなければなりません (照合時には常に大小文字の区別を
  しないようにコンパイルされます)。

* *lineno* 整数で、警告が発生した場所の行番号に一致しなければ なりません、すべての行に一致する場合には ``0`` になります。

:exc:`Warning` クラスは組み込みの :exc:`Exception` クラスから 導出されているので、警告をエラーに変えるには単に
``category(message)`` を ``raise`` します。

警告フィルタは Python インタプリタのコマンドラインに渡される :option:`-W` オプションで初期化されます。インタプリタは
:option:`-W` オプションに渡される全ての引数を ``sys.warnoptions``; に変換せずに保存します; :mod:`warnings`
モジュールは最初に ``import`` された際にこれらの引数を解釈します (無効なオプションは``sys.stderr`` にメッセージを出力した後
無視されます)。

デフォルトでは無視される警告を :option:`-Wd` をインタプリタに渡すこ とで有効にすることができます。このオプションは通常はデフォルトで無視さ
れるようなものを含む全ての警告のデフォルトでの扱いを有効化します。この ような振る舞いは開発中のパッケージをインポートする問題をデバッグする時
にImportWarning を有効化するために使えます。ImportWarning は次のよう な Python
コードを使って明示的に有効化することもできます。 ::

   warnings.simplefilter('default', ImportWarning)


.. _warning-functions:

利用可能な関数
--------------


.. function:: warn(message[, category[, stacklevel]])

   警告を発するか、無視するか、あるいは例外を送出します。 *category* 引数が与えられた場合、警告カテゴリクラスでなければ なりません
   (上を参照してください); 標準の値は :exc:`UserWarning` です。*message* を :exc:`Warning` インスタンスで代用する
   こともできますが、この場合 *category* は無視され、 ``message.__class__`` が使われ、メッセージ文は
   ``str(message)`` になります。発された例外が前述した警告フィルタによってエラーに 変更された場合、この関数は例外を送出します。引数
   *stacklevel* は Python でラッパ関数を書く際に利用することができます。例えば::

      def deprecation(message):
          warnings.warn(message, DeprecationWarning, stacklevel=2)

   こうすることで、警告が参照するソースコード部分を、 :func:`deprecation` 自身ではなく :func:`deprecation` を
   呼び出した側にできます (というのも、前者の場合は警告メッセージ の目的を台無しにしてしまうからです)。


.. function:: warn_explicit(message, category, filename, lineno[, module[, registry[, module_globals]]])

   :func:`warn` の機能に対する低レベルのインタフェースで、 メッセージ、警告カテゴリ、ファイル名および行番号、そしてオプションの
   モジュール名およびレジストリ情報 (モジュールの  ``__warningregistry__`` 辞書) を明示的に渡します。 モジュール名は標準で
   ``.py`` が取り去られたファイル名になります; レジストリが渡されなかった場合、警告が抑制されることはありません。 *message*
   は文字列のとき、*category* は :exc:`Warning` のサブクラスでなければなりません。また *message* は
   :exc:`Warning` のインスタンスであってもよく、この場合 *category* は無視されます。

   *module_globals* は、もし与えられるならば、警告が発せられるコードが 使っているグローバル名前空間でなければなりません。(この引数は
   zipfile やその他の非ファイルシステムのインポート元の中にあるモジュールのソース を表示することをサポートするためのもので、Python 2.5
   で追加されました。)


.. function:: showwarning(message, category, filename, lineno[, file])

   警告をファイルに書き込みます。標準の実装では、 ``formatwarning(message, category, filename, lineno)``
   を呼び出し、返された文字列を *file* に書き込み ます。*file* は標準では ``sys.stderr`` です。 この関数は
   ``warnings.showwarning`` に別の実装を代入して 置き換えることができます。


.. function:: formatwarning(message, category, filename, lineno)

   警告を通常の方法で書式化します。返される文字列内には改行が埋め込まれて いる可能性があり、かつ文字列は改行で終端されています。


.. function:: filterwarnings(action[, message[, category[, module[, lineno[, append]]]]])

   警告フィルタのリストにエントリを一つ挿入します。標準ではエントリは 先頭に挿入されます; *append* が真ならば、末尾に挿入されます。
   この関数は引数の型をチェックし、*message* および *module* の正規表現をコンパイルしてから、これらをタプルにして警告フィルタ
   のリストに挿入します。二つのエントリが特定の警告に合致した場合、 リストの先頭に近い方のエントリが後方にあるエントリに優先します。
   引数が省略されると、標準では全てにマッチする値に設定されます。


.. function:: simplefilter(action[, category[, lineno[, append]]])

   単純なエントリを警告フィルタのリストに挿入します。引数の意味 は :func:`filterwarnings` と同じですが、この関数により挿入されるフィ
   ルタはカテゴリと行番号が一致していれば全てのモジュールの全てのメッセー ジに合致しますので、正規表現は必要ありません。


.. function:: resetwarnings()

   警告フィルタをリセットします。これにより、:option:`-W` コマンドラ インオプションによるもの :func:`simplefilter`
   呼び出しによるもの を含め、:func:`filterwarnings` の呼び出しによる影響はすべて無効化 されます。

