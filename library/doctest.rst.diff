@@ -86,25 +86,25 @@
 
    if __name__ == "__main__":
        import doctest
        doctest.testmod()
 
 If you run :file:`example.py` directly from the command line, :mod:`doctest`
 works its magic::
 
    $ python example.py
    $
 
 There's no output!  That's normal, and it means all the examples worked.  Pass
-:option:`-v` to the script, and :mod:`doctest` prints a detailed log of what
+``-v`` to the script, and :mod:`doctest` prints a detailed log of what
 it's trying, and prints a summary at the end::
 
    $ python example.py -v
    Trying:
        factorial(5)
    Expecting:
        120
    ok
    Trying:
        [factorial(n) for n in range(6)]
    Expecting:
        [1, 1, 2, 6, 24, 120]
@@ -154,34 +154,34 @@
 :mod:`doctest` then examines docstrings in module :mod:`M`.
 
 Running the module as a script causes the examples in the docstrings to get
 executed and verified::
 
    python M.py
 
 This won't display anything unless an example fails, in which case the failing
 example(s) and the cause(s) of the failure(s) are printed to stdout, and the
 final line of output is ``***Test Failed*** N failures.``, where *N* is the
 number of examples that failed.
 
-Run it with the :option:`-v` switch instead::
+Run it with the ``-v`` switch instead::
 
    python M.py -v
 
 and a detailed report of all examples tried is printed to standard output, along
 with assorted summaries at the end.
 
 You can force verbose mode by passing ``verbose=True`` to :func:`testmod`, or
 prohibit it by passing ``verbose=False``.  In either of those cases,
-``sys.argv`` is not examined by :func:`testmod` (so passing :option:`-v` or not
+``sys.argv`` is not examined by :func:`testmod` (so passing ``-v`` or not
 has no effect).
 
 Since Python 2.6, there is also a command line shortcut for running
 :func:`testmod`.  You can instruct the Python interpreter to run the doctest
 module directly from the standard library and pass the module name(s) on the
 command line::
 
    python -m doctest -v example.py
 
 This will import :file:`example.py` as a standalone module and run
 :func:`testmod` on it.  Note that this may not work correctly if the file is
 part of a package and imports other submodules from that package.
@@ -233,25 +233,25 @@
        720
 
 As with :func:`testmod`, :func:`testfile` won't display anything unless an
 example fails.  If an example does fail, then the failing example(s) and the
 cause(s) of the failure(s) are printed to stdout, using the same format as
 :func:`testmod`.
 
 By default, :func:`testfile` looks for files in the calling module's directory.
 See section :ref:`doctest-basic-api` for a description of the optional arguments
 that can be used to tell it to look for files in other locations.
 
 Like :func:`testmod`, :func:`testfile`'s verbosity can be set with the
-:option:`-v` command-line switch or with the optional keyword argument
+``-v`` command-line switch or with the optional keyword argument
 *verbose*.
 
 Since Python 2.6, there is also a command line shortcut for running
 :func:`testfile`.  You can instruct the Python interpreter to run the doctest
 module directly from the standard library and pass the file name(s) on the
 command line::
 
    python -m doctest -v example.txt
 
 Because the file name does not end with :file:`.py`, :mod:`doctest` infers that
 it must be run with :func:`testfile`, not :func:`testmod`.
 
@@ -322,25 +322,25 @@
 
 Any expected output must immediately follow the final ``'>>> '`` or ``'... '``
 line containing the code, and the expected output (if any) extends to the next
 ``'>>> '`` or all-whitespace line.
 
 The fine print:
 
 * Expected output cannot contain an all-whitespace line, since such a line is
   taken to signal the end of expected output.  If expected output does contain a
   blank line, put ``<BLANKLINE>`` in your doctest example each place a blank line
   is expected.
 
-  .. versionchanged:: 2.4
+  .. versionadded:: 2.4
      ``<BLANKLINE>`` was added; there was no way to use expected output containing
      empty lines in previous versions.
 
 * All hard tab characters are expanded to spaces, using 8-column tab stops.
   Tabs in output generated by the tested code are not modified.  Because any
   hard tabs in the sample output *are* expanded, this means that if the code
   output includes hard tabs, the only way the doctest can pass is if the
   :const:`NORMALIZE_WHITESPACE` option or directive is in effect.
   Alternatively, the test can be rewritten to capture the output and compare it
   to an expected value as part of the test.  This handling of tabs in the
   source was arrived at through trial and error, and has proven to be the least
   error prone way of handling them.  It is possible to use a different
@@ -437,24 +437,27 @@
 multi-line detail::
 
    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: multi
        line
    detail
 
 The last three lines (starting with :exc:`ValueError`) are compared against the
 exception's type and detail, and the rest are ignored.
 
+.. versionchanged:: 2.4
+   Previous versions were unable to handle multi-line exception details.
+
 Best practice is to omit the traceback stack, unless it adds significant
 documentation value to the example.  So the last example is probably better as::
 
    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
        ...
    ValueError: multi
        line
    detail
 
 Note that tracebacks are treated very specially.  In particular, in the
 rewritten example, the use of ``...`` is independent of doctest's
@@ -468,26 +471,27 @@
   traceback or from ordinary printing.  So, e.g., an example that expects
   ``ValueError: 42 is prime`` will pass whether :exc:`ValueError` is actually
   raised or if the example merely prints that traceback text.  In practice,
   ordinary output rarely begins with a traceback header line, so this doesn't
   create real problems.
 
 * Each line of the traceback stack (if present) must be indented further than
   the first line of the example, *or* start with a non-alphanumeric character.
   The first line following the traceback header indented the same and starting
   with an alphanumeric is taken to be the start of the exception detail.  Of
   course this does the right thing for genuine tracebacks.
 
-* When the :const:`IGNORE_EXCEPTION_DETAIL` doctest option is is specified,
-  everything following the leftmost colon is ignored.
+* When the :const:`IGNORE_EXCEPTION_DETAIL` doctest option is specified,
+  everything following the leftmost colon and any module information in the
+  exception name is ignored.
 
 * The interactive shell omits the traceback header line for some
   :exc:`SyntaxError`\ s.  But doctest uses the traceback header line to
   distinguish exceptions from non-exceptions.  So in the rare case where you need
   to test a :exc:`SyntaxError` that omits the traceback header, you will need to
   manually add the traceback header line to your test example.
 
 * For some :exc:`SyntaxError`\ s, Python displays the character position of the
   syntax error, using a ``^`` marker::
 
      >>> 1 1
        File "<stdin>", line 1
@@ -497,28 +501,24 @@
 
   Since the lines showing the position of the error come before the exception type
   and detail, they are not checked by doctest.  For example, the following test
   would pass, even though it puts the ``^`` marker in the wrong location::
 
      >>> 1 1
      Traceback (most recent call last):
        File "<stdin>", line 1
          1 1
          ^
      SyntaxError: invalid syntax
 
-.. versionchanged:: 2.4
-   The ability to handle a multi-line exception detail, and the
-   :const:`IGNORE_EXCEPTION_DETAIL` doctest option, were added.
-
 
 .. _doctest-options:
 
 Option Flags and Directives
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 A number of option flags control various aspects of doctest's behavior.
 Symbolic names for the flags are supplied as module constants, which can be
 or'ed together and passed to various functions.  The names can also be used in
 doctest directives (see below).
 
 The first group of options define test semantics, controlling aspects of how
@@ -563,50 +563,70 @@
    Complicated uses can lead to the same kinds of "oops, it matched too much!"
    surprises that ``.*`` is prone to in regular expressions.
 
 
 .. data:: IGNORE_EXCEPTION_DETAIL
 
    When specified, an example that expects an exception passes if an exception of
    the expected type is raised, even if the exception detail does not match.  For
    example, an example expecting ``ValueError: 42`` will pass if the actual
    exception raised is ``ValueError: 3*14``, but will fail, e.g., if
    :exc:`TypeError` is raised.
 
-   Note that a similar effect can be obtained using :const:`ELLIPSIS`, and
-   :const:`IGNORE_EXCEPTION_DETAIL` may go away when Python releases prior to 2.4
-   become uninteresting.  Until then, :const:`IGNORE_EXCEPTION_DETAIL` is the only
-   clear way to write a doctest that doesn't care about the exception detail yet
-   continues to pass under Python releases prior to 2.4 (doctest directives appear
-   to be comments to them).  For example, ::
+   It will also ignore the module name used in Python 3 doctest reports. Hence
+   both these variations will work regardless of whether the test is run under
+   Python 2.7 or Python 3.2 (or later versions):
+
+      >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
+      Traceback (most recent call last):
+      CustomError: message
+
+      >>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL
+      Traceback (most recent call last):
+      my_module.CustomError: message
+
+   Note that :const:`ELLIPSIS` can also be used to ignore the
+   details of the exception message, but such a test may still fail based
+   on whether or not the module details are printed as part of the
+   exception name. Using :const:`IGNORE_EXCEPTION_DETAIL` and the details
+   from Python 2.3 is also the only clear way to write a doctest that doesn't
+   care about the exception detail yet continues to pass under Python 2.3 or
+   earlier (those releases do not support doctest directives and ignore them
+   as irrelevant comments). For example, ::
 
       >>> (1, 2)[3] = 'moo' #doctest: +IGNORE_EXCEPTION_DETAIL
       Traceback (most recent call last):
         File "<stdin>", line 1, in ?
       TypeError: object doesn't support item assignment
 
-   passes under Python 2.4 and Python 2.3.  The detail changed in 2.4, to say "does
-   not" instead of "doesn't".
+   passes under Python 2.3 and later Python versions, even though the detail
+   changed in Python 2.4 to say "does not" instead of "doesn't".
+
+   .. versionchanged:: 2.7
+      :const:`IGNORE_EXCEPTION_DETAIL` now also ignores any information
+      relating to the module containing the exception under test
 
 
 .. data:: SKIP
 
    When specified, do not run the example at all.  This can be useful in contexts
    where doctest examples serve as both documentation and test cases, and an
    example should be included for documentation purposes, but should not be
    checked.  E.g., the example's output might be random; or the example might
    depend on resources which would be unavailable to the test driver.
 
    The SKIP flag can also be used for temporarily "commenting out" examples.
 
+.. versionadded:: 2.5
+
 
 .. data:: COMPARISON_FLAGS
 
    A bitmask or'ing together all the comparison flags above.
 
 The second group of options controls how test failures are reported:
 
 
 .. data:: REPORT_UDIFF
 
    When specified, failures that involve multi-line expected and actual outputs are
    displayed using a unified diff.
@@ -691,35 +711,31 @@
 a directive to comfortably fit on the same line::
 
    >>> print range(5) + range(10,20) + range(30,40) + range(50,60)
    ... # doctest: +ELLIPSIS
    [0, ..., 4, 10, ..., 19, 30, ..., 39, 50, ..., 59]
 
 Note that since all options are disabled by default, and directives apply only
 to the example they appear in, enabling options (via ``+`` in a directive) is
 usually the only meaningful choice.  However, option flags can also be passed to
 functions that run doctests, establishing different defaults.  In such cases,
 disabling an option via ``-`` in a directive can be useful.
 
-.. versionchanged:: 2.4
-   Constants :const:`DONT_ACCEPT_BLANKLINE`, :const:`NORMALIZE_WHITESPACE`,
+.. versionadded:: 2.4
+   Doctest directives and the associated constants
+   :const:`DONT_ACCEPT_BLANKLINE`, :const:`NORMALIZE_WHITESPACE`,
    :const:`ELLIPSIS`, :const:`IGNORE_EXCEPTION_DETAIL`, :const:`REPORT_UDIFF`,
    :const:`REPORT_CDIFF`, :const:`REPORT_NDIFF`,
    :const:`REPORT_ONLY_FIRST_FAILURE`, :const:`COMPARISON_FLAGS` and
-   :const:`REPORTING_FLAGS` were added; by default ``<BLANKLINE>`` in expected
-   output matches an empty line in actual output; and doctest directives were
-   added.
-
-.. versionchanged:: 2.5
-   Constant :const:`SKIP` was added.
+   :const:`REPORTING_FLAGS` were added.
 
 There's also a way to register new option flag names, although this isn't useful
 unless you intend to extend :mod:`doctest` internals via subclassing:
 
 
 .. function:: register_optionflag(name)
 
    Create a new option flag with a given name, and return the new flag's integer
    value.  :func:`register_optionflag` can be used when subclassing
    :class:`OutputChecker` or :class:`DocTestRunner` to create new options that are
    supported by your subclasses.  :func:`register_optionflag` should always be
    called using the following idiom::
@@ -947,36 +963,35 @@
 
 Unittest API
 ------------
 
 As your collection of doctest'ed modules grows, you'll want a way to run all
 their doctests systematically.  Prior to Python 2.4, :mod:`doctest` had a barely
 documented :class:`Tester` class that supplied a rudimentary way to combine
 doctests from multiple modules. :class:`Tester` was feeble, and in practice most
 serious Python testing frameworks build on the :mod:`unittest` module, which
 supplies many flexible ways to combine tests from multiple sources.  So, in
 Python 2.4, :mod:`doctest`'s :class:`Tester` class is deprecated, and
 :mod:`doctest` provides two functions that can be used to create :mod:`unittest`
-test suites from modules and text files containing doctests.  These test suites
-can then be run using :mod:`unittest` test runners::
+test suites from modules and text files containing doctests.  To integrate with
+:mod:`unittest` test discovery, include a :func:`load_tests` function in your
+test module::
 
    import unittest
    import doctest
-   import my_module_with_doctests, and_another
-
-   suite = unittest.TestSuite()
-   for mod in my_module_with_doctests, and_another:
-       suite.addTest(doctest.DocTestSuite(mod))
-   runner = unittest.TextTestRunner()
-   runner.run(suite)
+   import my_module_with_doctests
+
+   def load_tests(loader, tests, ignore):
+       tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
+       return tests
 
 There are two main functions for creating :class:`unittest.TestSuite` instances
 from text files and modules with doctests:
 
 
 .. function:: DocFileSuite(*paths, [module_relative][, package][, setUp][, tearDown][, globs][, optionflags][, parser][, encoding])
 
    Convert doctest tests from one or more text files to a
    :class:`unittest.TestSuite`.
 
    The returned :class:`unittest.TestSuite` is to be run by the unittest framework
    and runs the interactive examples in each file.  If an example in any file
@@ -1429,25 +1444,25 @@
    customized by subclassing DocTestRunner, and overriding the methods
    :meth:`report_start`, :meth:`report_success`,
    :meth:`report_unexpected_exception`, and :meth:`report_failure`.
 
    The optional keyword argument *checker* specifies the :class:`OutputChecker`
    object (or drop-in replacement) that should be used to compare the expected
    outputs to the actual outputs of doctest examples.
 
    The optional keyword argument *verbose* controls the :class:`DocTestRunner`'s
    verbosity.  If *verbose* is ``True``, then information is printed about each
    example, as it is run.  If *verbose* is ``False``, then only failures are
    printed.  If *verbose* is unspecified, or ``None``, then verbose output is used
-   iff the command-line switch :option:`-v` is used.
+   iff the command-line switch ``-v`` is used.
 
    The optional keyword argument *optionflags* can be used to control how the test
    runner compares expected output to actual output, and how it displays failures.
    For more information, see section :ref:`doctest-options`.
 
    .. versionadded:: 2.4
 
    :class:`DocTestParser` defines the following methods:
 
 
    .. method:: report_start(out, test, example)
 
@@ -1744,51 +1759,51 @@
    example, and the original exception.  If the output doesn't match, then a
    :exc:`DocTestFailure` exception is raised, containing the test, the example, and
    the actual output.
 
    For information about the constructor parameters and methods, see the
    documentation for :class:`DocTestRunner` in section :ref:`doctest-advanced-api`.
 
 There are two exceptions that may be raised by :class:`DebugRunner` instances:
 
 
 .. exception:: DocTestFailure(test, example, got)
 
-   An exception thrown by :class:`DocTestRunner` to signal that a doctest example's
+   An exception raised by :class:`DocTestRunner` to signal that a doctest example's
    actual output did not match its expected output. The constructor arguments are
    used to initialize the member variables of the same names.
 
 :exc:`DocTestFailure` defines the following member variables:
 
 
 .. attribute:: DocTestFailure.test
 
    The :class:`DocTest` object that was being run when the example failed.
 
 
 .. attribute:: DocTestFailure.example
 
    The :class:`Example` that failed.
 
 
 .. attribute:: DocTestFailure.got
 
    The example's actual output.
 
 
 .. exception:: UnexpectedException(test, example, exc_info)
 
-   An exception thrown by :class:`DocTestRunner` to signal that a doctest example
-   raised an unexpected exception.  The constructor arguments are used to
-   initialize the member variables of the same names.
+   An exception raised by :class:`DocTestRunner` to signal that a doctest
+   example raised an unexpected exception.  The constructor arguments are used
+   to initialize the member variables of the same names.
 
 :exc:`UnexpectedException` defines the following member variables:
 
 
 .. attribute:: UnexpectedException.test
 
    The :class:`DocTest` object that was being run when the example failed.
 
 
 .. attribute:: UnexpectedException.example
 
    The :class:`Example` that failed.
