@@ -65,45 +65,60 @@
 A generic :func:`new` constructor that takes the string name of the desired
 algorithm as its first parameter also exists to allow access to the above listed
 hashes as well as any other algorithms that your OpenSSL library may offer.  The
 named constructors are much faster than :func:`new` and should be preferred.
 
 Using :func:`new` with an algorithm provided by OpenSSL:
 
    >>> h = hashlib.new('ripemd160')
    >>> h.update("Nobody inspects the spammish repetition")
    >>> h.hexdigest()
    'cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc'
 
+This module provides the following constant attribute:
+
+.. data:: hashlib.algorithms
+
+   A tuple providing the names of the hash algorithms guaranteed to be
+   supported by this module.
+
+   .. versionadded:: 2.7
+
 The following values are provided as constant attributes of the hash objects
 returned by the constructors:
 
 
 .. data:: hash.digest_size
 
    The size of the resulting hash in bytes.
 
 .. data:: hash.block_size
 
    The internal block size of the hash algorithm in bytes.
 
 A hash object has the following methods:
 
 
 .. method:: hash.update(arg)
 
    Update the hash object with the string *arg*.  Repeated calls are equivalent to
    a single call with the concatenation of all the arguments: ``m.update(a);
    m.update(b)`` is equivalent to ``m.update(a+b)``.
 
+   .. versionchanged:: 2.7
+
+      The Python GIL is released to allow other threads to run while
+      hash updates on data larger than 2048 bytes is taking place when
+      using hash algorithms supplied by OpenSSL.
+
 
 .. method:: hash.digest()
 
    Return the digest of the strings passed to the :meth:`update` method so far.
    This is a string of :attr:`digest_size` bytes which may contain non-ASCII
    characters, including null bytes.
 
 
 .. method:: hash.hexdigest()
 
    Like :meth:`digest` except the digest is returned as a string of double length,
    containing only hexadecimal digits.  This may  be used to exchange the value
