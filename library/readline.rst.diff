@@ -11,25 +11,25 @@
 completion and reading/writing of history files from the Python interpreter.
 This module can be used directly or via the :mod:`rlcompleter` module.  Settings
 made using  this module affect the behaviour of both the interpreter's
 interactive prompt  and the prompts offered by the :func:`raw_input` and
 :func:`input` built-in functions.
 
 .. note::
 
   On MacOS X the :mod:`readline` module can be implemented using
   the ``libedit`` library instead of GNU readline.
 
   The configuration file for ``libedit`` is different from that
-  of GNU readline. If you programmaticly load configuration strings
+  of GNU readline. If you programmatically load configuration strings
   you can check for the text "libedit" in :const:`readline.__doc__`
   to differentiate between GNU readline and libedit.
 
 
 The :mod:`readline` module defines the following functions:
 
 
 .. function:: parse_and_bind(string)
 
    Parse and execute single line of a readline init file.
 
 
@@ -201,25 +201,26 @@
 .. _readline-example:
 
 Example
 -------
 
 The following example demonstrates how to use the :mod:`readline` module's
 history reading and writing functions to automatically load and save a history
 file named :file:`.pyhist` from the user's home directory.  The code below would
 normally be executed automatically during interactive sessions from the user's
 :envvar:`PYTHONSTARTUP` file. ::
 
    import os
-   histfile = os.path.join(os.environ["HOME"], ".pyhist")
+   import readline
+   histfile = os.path.join(os.path.expanduser("~"), ".pyhist")
    try:
        readline.read_history_file(histfile)
    except IOError:
        pass
    import atexit
    atexit.register(readline.write_history_file, histfile)
    del os, histfile
 
 The following example extends the :class:`code.InteractiveConsole` class to
 support history save/restore. ::
 
    import code
