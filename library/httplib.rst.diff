@@ -25,67 +25,74 @@
    HTTPS support is only available if the :mod:`socket` module was compiled with
    SSL support.
 
 .. note::
 
    The public interface for this module changed substantially in Python 2.0.  The
    :class:`HTTP` class is retained only for backward compatibility with 1.5.2.  It
    should not be used in new code.  Refer to the online docstrings for usage.
 
 The module provides the following classes:
 
 
-.. class:: HTTPConnection(host[, port[, strict[, timeout]]])
+.. class:: HTTPConnection(host[, port[, strict[, timeout[, source_address]]]])
 
    An :class:`HTTPConnection` instance represents one transaction with an HTTP
    server.  It should be instantiated passing it a host and optional port
    number.  If no port number is passed, the port is extracted from the host
    string if it has the form ``host:port``, else the default HTTP port (80) is
    used.  When True, the optional parameter *strict* (which defaults to a false
    value) causes ``BadStatusLine`` to
    be raised if the status line can't be parsed as a valid HTTP/1.0 or 1.1
    status line.  If the optional *timeout* parameter is given, blocking
    operations (like connection attempts) will timeout after that many seconds
    (if it is not given, the global default timeout setting is used).
+   The optional *source_address* parameter may be a tuple of a (host, port)
+   to use as the source address the HTTP connection is made from.
 
    For example, the following calls all create instances that connect to the server
    at the same host and port::
 
       >>> h1 = httplib.HTTPConnection('www.cwi.nl')
       >>> h2 = httplib.HTTPConnection('www.cwi.nl:80')
       >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80)
       >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80, timeout=10)
 
    .. versionadded:: 2.0
 
    .. versionchanged:: 2.6
       *timeout* was added.
 
+   .. versionchanged:: 2.7
+      *source_address* was added.
 
-.. class:: HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout]]]]])
+
+.. class:: HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout[, source_address]]]]]])
 
    A subclass of :class:`HTTPConnection` that uses SSL for communication with
    secure servers.  Default port is ``443``. *key_file* is the name of a PEM
    formatted file that contains your private key. *cert_file* is a PEM formatted
    certificate chain file.
 
-   .. note::
-
-      This does not do any certificate verification.
+   .. warning::
+      This does not do any verification of the server's certificate.
 
    .. versionadded:: 2.0
 
    .. versionchanged:: 2.6
       *timeout* was added.
 
+   .. versionchanged:: 2.7
+      *source_address* was added.
+
 
 .. class:: HTTPResponse(sock[, debuglevel=0][, strict=0])
 
    Class whose instances are returned upon successful connection.  Not instantiated
    directly by user.
 
    .. versionadded:: 2.0
 
 .. class:: HTTPMessage
 
    An :class:`HTTPMessage` instance is used to hold the headers from an HTTP
    response. It is implemented using the :class:`mimetools.Message` class and
@@ -427,24 +434,35 @@
    .. note::
 
       Note that you must have read the whole response before you can send a new
       request to the server.
 
 
 .. method:: HTTPConnection.set_debuglevel(level)
 
    Set the debugging level (the amount of debugging output printed). The default
    debug level is ``0``, meaning no debugging output is printed.
 
 
+.. method:: HTTPConnection.set_tunnel(host,port=None, headers=None)
+
+   Set the host and the port for HTTP Connect Tunnelling. Normally used when
+   it is required to do HTTPS Conection through a proxy server.
+
+   The headers argument should be a mapping of extra HTTP headers to to sent
+   with the CONNECT request.
+
+   .. versionadded:: 2.7
+
+
 .. method:: HTTPConnection.connect()
 
    Connect to the server specified when the object was created.
 
 
 .. method:: HTTPConnection.close()
 
    Close the connection to the server.
 
 As an alternative to using the :meth:`request` method described above, you can
 also send your request step by step, by using the four functions below.
 
@@ -498,24 +516,27 @@
 .. method:: HTTPResponse.getheader(name[, default])
 
    Get the contents of the header *name*, or *default* if there is no matching
    header.
 
 
 .. method:: HTTPResponse.getheaders()
 
    Return a list of (header, value) tuples.
 
    .. versionadded:: 2.4
 
+.. method:: HTTPResponse.fileno()
+
+   Returns the ``fileno`` of the underlying socket.
 
 .. attribute:: HTTPResponse.msg
 
    A :class:`mimetools.Message` instance containing the response headers.
 
 
 .. attribute:: HTTPResponse.version
 
    HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1.
 
 
 .. attribute:: HTTPResponse.status
@@ -540,27 +561,26 @@
    >>> conn.request("GET", "/index.html")
    >>> r1 = conn.getresponse()
    >>> print r1.status, r1.reason
    200 OK
    >>> data1 = r1.read()
    >>> conn.request("GET", "/parrot.spam")
    >>> r2 = conn.getresponse()
    >>> print r2.status, r2.reason
    404 Not Found
    >>> data2 = r2.read()
    >>> conn.close()
 
-Here is an example session that uses ``HEAD`` method. Note that ``HEAD`` method
-never returns any data. ::
-
+Here is an example session that uses the ``HEAD`` method.  Note that the
+``HEAD`` method never returns any data. ::
 
    >>> import httplib
    >>> conn = httplib.HTTPConnection("www.python.org")
    >>> conn.request("HEAD","/index.html")
    >>> res = conn.getresponse()
    >>> print res.status, res.reason
    200 OK
    >>> data = res.read()
    >>> print len(data)
    0
    >>> data == ''
    True
