@@ -25,24 +25,28 @@
 +------------+------------------------------------+
 | ``[!seq]`` | matches any character not in *seq* |
 +------------+------------------------------------+
 
 .. index:: module: glob
 
 Note that the filename separator (``'/'`` on Unix) is *not* special to this
 module.  See module :mod:`glob` for pathname expansion (:mod:`glob` uses
 :func:`fnmatch` to match pathname segments).  Similarly, filenames starting with
 a period are not special for this module, and are matched by the ``*`` and ``?``
 patterns.
 
+.. seealso::
+
+   Latest version of the `fnmatch Python source code
+   <http://svn.python.org/view/python/branches/release27-maint/Lib/fnmatch.py?view=markup>`_
 
 .. function:: fnmatch(filename, pattern)
 
    Test whether the *filename* string matches the *pattern* string, returning
    :const:`True` or :const:`False`.  If the operating system is case-insensitive,
    then both parameters will be normalized to all lower- or upper-case before
    the comparison is performed.  :func:`fnmatchcase` can be used to perform a
    case-sensitive comparison, regardless of whether that's standard for the
    operating system.
 
    This example will print all file names in the current directory with the
    extension ``.txt``::
@@ -64,24 +68,26 @@
 .. function:: filter(names, pattern)
 
    Return the subset of the list of *names* that match *pattern*. It is the same as
    ``[n for n in names if fnmatch(n, pattern)]``, but implemented more efficiently.
 
    .. versionadded:: 2.2
 
 
 .. function:: translate(pattern)
 
    Return the shell-style *pattern* converted to a regular expression.
 
+   Be aware there is no way to quote meta-characters.
+
    Example:
 
       >>> import fnmatch, re
       >>>
       >>> regex = fnmatch.translate('*.txt')
       >>> regex
       '.*\\.txt$'
       >>> reobj = re.compile(regex)
       >>> reobj.match('foobar.txt')
       <_sre.SRE_Match object at 0x...>
 
 
