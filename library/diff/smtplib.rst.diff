--- r262/library/smtplib.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/smtplib.rst	2009-12-20 07:59:01.003699000 +0900
@@ -262,25 +262,25 @@
 
    .. versionchanged:: 2.6
 
    :exc:`SMTPHeloError`
       The server didn't reply properly to the ``HELO`` greeting.
 
    :exc:`SMTPException`
      The server does not support the STARTTLS extension.
 
    .. versionchanged:: 2.6
 
    :exc:`RuntimeError`
-     SSL/TLS support is not available to your python interpreter.
+     SSL/TLS support is not available to your Python interpreter.
 
 
 .. method:: SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])
 
    Send mail.  The required arguments are an :rfc:`822` from-address string, a list
    of :rfc:`822` to-address strings (a bare string will be treated as a list with 1
    address), and a message string.  The caller may pass a list of ESMTP options
    (such as ``8bitmime``) to be used in ``MAIL FROM`` commands as *mail_options*.
    ESMTP options (such as ``DSN`` commands) that should be used with all ``RCPT``
    commands can be passed as *rcpt_options*.  (If you need to use different ESMTP
    options to different recipients you have to use the low-level methods such as
    :meth:`mail`, :meth:`rcpt` and :meth:`data` to send the message.)
@@ -371,12 +371,17 @@
            break
        if not line:
            break
        msg = msg + line
 
    print "Message length is " + repr(len(msg))
 
    server = smtplib.SMTP('localhost')
    server.set_debuglevel(1)
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()
 
+.. note::
+
+   In general, you will want to use the :mod:`email` package's features to
+   construct an email message, which you can then convert to a string and send
+   via :meth:`sendmail`; see :ref:`email-examples`.
