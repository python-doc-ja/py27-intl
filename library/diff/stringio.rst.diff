--- r262/library/stringio.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/stringio.rst	2010-06-30 00:26:43.942055000 +0900
@@ -62,41 +62,47 @@
 
 .. module:: cStringIO
    :synopsis: Faster version of StringIO, but not subclassable.
 .. moduleauthor:: Jim Fulton <jim@zope.com>
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
 
 The module :mod:`cStringIO` provides an interface similar to that of the
 :mod:`StringIO` module.  Heavy use of :class:`StringIO.StringIO` objects can be
 made more efficient by using the function :func:`StringIO` from this module
 instead.
 
-Since this module provides a factory function which returns objects of built-in
-types, there's no way to build your own version using subclassing.  Use the
-original :mod:`StringIO` module in that case.
-
-Unlike the memory files implemented by the :mod:`StringIO` module, those
-provided by this module are not able to accept Unicode strings that cannot be
-encoded as plain ASCII strings.
-
-Calling :func:`StringIO` with a Unicode string parameter populates
-the object with the buffer representation of the Unicode string, instead of
-encoding the string.
-
-Another difference from the :mod:`StringIO` module is that calling
-:func:`StringIO` with a string parameter creates a read-only object. Unlike an
-object created without a string parameter, it does not have write methods.
-These objects are not generally visible.  They turn up in tracebacks as
-:class:`StringI` and :class:`StringO`.
+
+.. function:: StringIO([s])
+
+   Return a StringIO-like stream for reading or writing.
+
+   Since this is a factory function which returns objects of built-in types,
+   there's no way to build your own version using subclassing.  It's not
+   possible to set attributes on it.  Use the original :mod:`StringIO` module in
+   those cases.
+
+   Unlike the :mod:`StringIO` module, this module is not able to accept Unicode
+   strings that cannot be encoded as plain ASCII strings.  Calling
+   :func:`StringIO` with a Unicode string parameter populates the object with
+   the buffer representation of the Unicode string instead of encoding the
+   string.
+
+   Another difference from the :mod:`StringIO` module is that calling
+   :func:`StringIO` with a string parameter creates a read-only object. Unlike an
+   object created without a string parameter, it does not have write methods.
+   These objects are not generally visible.  They turn up in tracebacks as
+   :class:`StringI` and :class:`StringO`.
+
+
 
 The following data objects are provided as well:
 
 
 .. data:: InputType
 
    The type object of the objects created by calling :func:`StringIO` with a string
    parameter.
 
 
 .. data:: OutputType
 
