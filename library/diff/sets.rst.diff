--- r262/library/sets.rst	2008-03-23 07:04:10.557145000 +0900
+++ r266/library/sets.rst	2009-10-27 23:37:48.900246000 +0900
@@ -175,25 +175,25 @@
 +--------------------------------------+-------------+---------------------------------+
 
 Note, the non-operator versions of :meth:`update`, :meth:`intersection_update`,
 :meth:`difference_update`, and :meth:`symmetric_difference_update` will accept
 any iterable as an argument.
 
 .. versionchanged:: 2.3.1
    Formerly all arguments were required to be sets.
 
 Also note, the module also includes a :meth:`union_update` method which is an
 alias for :meth:`update`.  The method is included for backwards compatibility.
 Programmers should prefer the :meth:`update` method because it is supported by
-the builtin :class:`set()` and :class:`frozenset()` types.
+the built-in :class:`set()` and :class:`frozenset()` types.
 
 
 .. _set-example:
 
 Example
 -------
 
    >>> from sets import Set
    >>> engineers = Set(['John', 'Jane', 'Jack', 'Janice'])
    >>> programmers = Set(['Jack', 'Sam', 'Susan', 'Janice'])
    >>> managers = Set(['Jane', 'Jack', 'Susan', 'Zack'])
    >>> employees = engineers | programmers | managers           # union
