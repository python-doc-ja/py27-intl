--- r262/library/email.message.rst	2009-04-13 12:51:11.281972000 +0900
+++ r266/library/email.message.rst	2010-06-03 07:11:01.027217000 +0900
@@ -31,31 +31,34 @@
 Here are the methods of the :class:`Message` class:
 
 
 .. class:: Message()
 
    The constructor takes no arguments.
 
 
    .. method:: as_string([unixfrom])
 
       Return the entire message flattened as a string.  When optional *unixfrom*
       is ``True``, the envelope header is included in the returned string.
-      *unixfrom* defaults to ``False``.
+      *unixfrom* defaults to ``False``.  Flattening the message may trigger
+      changes to the :class:`Message` if defaults need to be filled in to
+      complete the transformation to a string (for example, MIME boundaries may
+      be generated or modified).
 
       Note that this method is provided as a convenience and may not always
       format the message the way you want.  For example, by default it mangles
       lines that begin with ``From``.  For more flexibility, instantiate a
-      :class:`Generator` instance and use its :meth:`flatten` method directly.
-      For example::
+      :class:`~email.generator.Generator` instance and use its :meth:`flatten`
+      method directly.  For example::
 
          from cStringIO import StringIO
          from email.generator import Generator
          fp = StringIO()
          g = Generator(fp, mangle_from_=False, maxheaderlen=60)
          g.flatten(msg)
          text = fp.getvalue()
 
 
    .. method:: __str__()
 
       Equivalent to ``as_string(unixfrom=True)``.
@@ -117,44 +120,46 @@
 
       Set the entire message object's payload to *payload*.  It is the client's
       responsibility to ensure the payload invariants.  Optional *charset* sets
       the message's default character set; see :meth:`set_charset` for details.
 
       .. versionchanged:: 2.2.2
          *charset* argument added.
 
 
    .. method:: set_charset(charset)
 
       Set the character set of the payload to *charset*, which can either be a
-      :class:`Charset` instance (see :mod:`email.charset`), a string naming a
-      character set, or ``None``.  If it is a string, it will be converted to a
-      :class:`Charset` instance.  If *charset* is ``None``, the ``charset``
-      parameter will be removed from the :mailheader:`Content-Type`
-      header. Anything else will generate a :exc:`TypeError`.
-
-      The message will be assumed to be of type :mimetype:`text/\*` encoded with
-      *charset.input_charset*.  It will be converted to *charset.output_charset*
-      and encoded properly, if needed, when generating the plain text
+      :class:`~email.charset.Charset` instance (see :mod:`email.charset`), a
+      string naming a character set, or ``None``.  If it is a string, it will
+      be converted to a :class:`~email.charset.Charset` instance.  If *charset*
+      is ``None``, the ``charset`` parameter will be removed from the
+      :mailheader:`Content-Type` header. Anything else will generate a
+      :exc:`TypeError`.
+
+      The message will be assumed to be of type :mimetype:`text/\*`, with the
+      payload either in unicode or encoded with *charset.input_charset*.
+      It will be encoded or converted to *charset.output_charset*
+      and transfer encoded properly, if needed, when generating the plain text
       representation of the message.  MIME headers (:mailheader:`MIME-Version`,
       :mailheader:`Content-Type`, :mailheader:`Content-Transfer-Encoding`) will
       be added as needed.
 
       .. versionadded:: 2.2.2
 
 
    .. method:: get_charset()
 
-      Return the :class:`Charset` instance associated with the message's
-      payload.
+      Return the :class:`~email.charset.Charset` instance associated with the
+      message's payload.
 
       .. versionadded:: 2.2.2
 
    The following methods implement a mapping-like interface for accessing the
    message's :rfc:`2822` headers.  Note that there are some semantic differences
    between these methods and a normal mapping (i.e. dictionary) interface.  For
    example, in a dictionary there are no duplicate keys, but here there may be
    duplicate message headers.  Also, in dictionaries there is no guaranteed
    order to the keys returned by :meth:`keys`, but in a :class:`Message` object,
    headers are always returned in the order they appeared in the original
    message, or were added to the message later.  Any header deleted and then
    re-added are always appended to the end of the header list.
@@ -469,25 +474,25 @@
       the order of the :mailheader:`Content-Type` header in the list of
       headers. However, it does *not* preserve any continuation lines which may
       have been present in the original :mailheader:`Content-Type` header.
 
 
    .. method:: get_content_charset([failobj])
 
       Return the ``charset`` parameter of the :mailheader:`Content-Type` header,
       coerced to lower case.  If there is no :mailheader:`Content-Type` header, or if
       that header has no ``charset`` parameter, *failobj* is returned.
 
       Note that this method differs from :meth:`get_charset` which returns the
-      :class:`Charset` instance for the default encoding of the message body.
+      :class:`~email.charset.Charset` instance for the default encoding of the message body.
 
       .. versionadded:: 2.2.2
 
 
    .. method:: get_charsets([failobj])
 
       Return a list containing the character set names in the message.  If the
       message is a :mimetype:`multipart`, then the list will contain one element
       for each subpart in the payload, otherwise, it will be a list of length 1.
 
       Each item in the list will be a string which is the value of the
       ``charset`` parameter in the :mailheader:`Content-Type` header for the
@@ -525,28 +530,29 @@
 
 
    .. attribute:: preamble
 
       The format of a MIME document allows for some text between the blank line
       following the headers, and the first multipart boundary string. Normally,
       this text is never visible in a MIME-aware mail reader because it falls
       outside the standard MIME armor.  However, when viewing the raw text of
       the message, or when viewing the message in a non-MIME aware reader, this
       text can become visible.
 
       The *preamble* attribute contains this leading extra-armor text for MIME
-      documents.  When the :class:`Parser` discovers some text after the headers
-      but before the first boundary string, it assigns this text to the
-      message's *preamble* attribute.  When the :class:`Generator` is writing
-      out the plain text representation of a MIME message, and it finds the
+      documents.  When the :class:`~email.parser.Parser` discovers some text
+      after the headers but before the first boundary string, it assigns this
+      text to the message's *preamble* attribute.  When the
+      :class:`~email.generator.Generator` is writing out the plain text
+      representation of a MIME message, and it finds the
       message has a *preamble* attribute, it will write this text in the area
       between the headers and the first boundary.  See :mod:`email.parser` and
       :mod:`email.generator` for details.
 
       Note that if the message object has no preamble, the *preamble* attribute
       will be ``None``.
 
 
    .. attribute:: epilogue
 
       The *epilogue* attribute acts the same way as the *preamble* attribute,
       except that it contains text that appears between the last boundary and
