--- r262/library/commands.rst	2008-06-21 08:14:32.805145000 +0900
+++ r266/library/commands.rst	2009-04-29 03:23:28.138007000 +0900
@@ -7,29 +7,30 @@
    :synopsis: Utility functions for running external commands.
 .. sectionauthor:: Sue Williams <sbw@provis.com>
 
 
 The :mod:`commands` module contains wrapper functions for :func:`os.popen` which
 take a system command as a string and return any output generated by the command
 and, optionally, the exit status.
 
 The :mod:`subprocess` module provides more powerful facilities for spawning new
 processes and retrieving their results.  Using the :mod:`subprocess` module is
 preferable to using the :mod:`commands` module.
 
-.. warning::
+.. note::
 
-   In 3.x, :func:`getstatus` and two undocumented functions (:func:`mk2arg` and
-   :func:`mkarg`) have been removed.  Also, :func:`getstatusoutput` and
-   :func:`getoutput` have been moved to the :mod:`subprocess` module.
+   In Python 3.x, :func:`getstatus` and two undocumented functions
+   (:func:`mk2arg` and :func:`mkarg`) have been removed.  Also,
+   :func:`getstatusoutput` and :func:`getoutput` have been moved to the
+   :mod:`subprocess` module.
 
 The :mod:`commands` module defines the following functions:
 
 
 .. function:: getstatusoutput(cmd)
 
    Execute the string *cmd* in a shell with :func:`os.popen` and return a 2-tuple
    ``(status, output)``.  *cmd* is actually run as ``{ cmd ; } 2>&1``, so that the
    returned output will contain output or error messages. A trailing newline is
    stripped from the output. The exit status for the command can be interpreted
    according to the rules for the C function :cfunc:`wait`.
 
