--- r262/library/profile.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/profile.rst	2010-03-22 04:29:04.684594000 +0900
@@ -1,21 +1,23 @@
 
 .. _profile:
 
 ********************
 The Python Profilers
 ********************
 
 .. sectionauthor:: James Roskind
 
+.. module:: profile
+   :synopsis: Python source profiler.
 
 .. index:: single: InfoSeek Corporation
 
 Copyright Â© 1994, by InfoSeek Corporation, all rights reserved.
 
 Written by James Roskind. [#]_
 
 Permission to use, copy, modify, and distribute this Python software and its
 associated documentation for any purpose (subject to the restriction in the
 following sentence) without fee is hereby granted, provided that the above
 copyright notice appears in all copies, and that both that copyright notice and
 this permission notice appear in supporting documentation, and that the name of
@@ -113,25 +115,25 @@
    import cProfile
    cProfile.run('foo()', 'fooprof')
 
 The file :file:`cProfile.py` can also be invoked as a script to profile another
 script.  For example::
 
    python -m cProfile myscript.py
 
 :file:`cProfile.py` accepts two optional arguments on the command line::
 
    cProfile.py [-o output_file] [-s sort_order]
 
-:option:`-s` only applies to standard output (:option:`-o` is not supplied).
+``-s`` only applies to standard output (``-o`` is not supplied).
 Look in the :class:`Stats` documentation for valid sort values.
 
 When you wish to review the profile, you should use the methods in the
 :mod:`pstats` module.  Typically you would load the statistics data as follows::
 
    import pstats
    p = pstats.Stats('fooprof')
 
 The class :class:`Stats` (the above code just created an instance of this class)
 has a variety of methods for manipulating and printing the data that was just
 read into ``p``.  When you ran :func:`cProfile.run` above, what was printed was
 the result of three method calls::
