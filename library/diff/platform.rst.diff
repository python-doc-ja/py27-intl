--- r262/library/platform.rst	2008-09-23 07:13:29.960178000 +0900
+++ r266/library/platform.rst	2009-10-28 00:08:27.384772000 +0900
@@ -1,15 +1,14 @@
-
-:mod:`platform` ---  Access to underlying platform's identifying data.
-======================================================================
+:mod:`platform` ---  Access to underlying platform's identifying data
+=====================================================================
 
 .. module:: platform
    :synopsis: Retrieves as much platform identifying data as possible.
 .. moduleauthor:: Marc-Andre Lemburg <mal@egenix.com>
 .. sectionauthor:: Bjorn Pettersen <bpettersen@corp.fairisaac.com>
 
 
 .. versionadded:: 2.3
 
 .. note::
 
    Specific platforms listed alphabetically, with Linux included in the Unix
@@ -90,25 +89,25 @@
 
 
 .. function:: python_branch()
 
    Returns a string identifying the Python implementation SCM branch.
 
    .. versionadded:: 2.6
 
 
 .. function:: python_implementation()
 
    Returns a string identifying the Python implementation. Possible return values
-   are: 'CPython', 'IronPython', 'Jython'
+   are: 'CPython', 'IronPython', 'Jython'.
 
    .. versionadded:: 2.6
 
 
 .. function:: python_revision()
 
    Returns a string identifying the Python implementation SCM revision.
 
    .. versionadded:: 2.6
 
 
 .. function:: python_version()
@@ -160,25 +159,25 @@
    Note that unlike the :func:`os.uname` function this also returns possible
    processor information as additional tuple entry.
 
    Entries which cannot be determined are set to ``''``.
 
 
 Java Platform
 -------------
 
 
 .. function:: java_ver(release='', vendor='', vminfo=('','',''), osinfo=('','',''))
 
-   Version interface for JPython.
+   Version interface for Jython.
 
    Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being a
    tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple
    ``(os_name, os_version, os_arch)``. Values which cannot be determined are set to
    the defaults given as parameters (which all default to ``''``).
 
 
 Windows Platform
 ----------------
 
 
 .. function:: win32_ver(release='', version='', csd='', ptype='')
@@ -225,42 +224,52 @@
    strings.
 
    Documentation for the underlying :cfunc:`gestalt` API is available online at
    http://www.rgaros.nl/gestalt/.
 
 
 Unix Platforms
 --------------
 
 
 .. function:: dist(distname='', version='', id='', supported_dists=('SuSE','debian','redhat','mandrake',...))
 
-   This is another name for :func:`linux_distribution`.
+   This is an old version of the functionality now provided by
+   :func:`linux_distribution`. For new code, please use the
+   :func:`linux_distribution`.
+
+   The only difference between the two is that ``dist()`` always
+   returns the short name of the distribution taken from the
+   ``supported_dists`` parameter.
+
+   .. deprecated:: 2.6
 
 .. function:: linux_distribution(distname='', version='', id='', supported_dists=('SuSE','debian','redhat','mandrake',...), full_distribution_name=1)
 
    Tries to determine the name of the Linux OS distribution name.
 
    ``supported_dists`` may be given to define the set of Linux distributions to
    look for. It defaults to a list of currently supported Linux distributions
    identified by their release file name.
 
    If ``full_distribution_name`` is true (default), the full distribution read
    from the OS is returned. Otherwise the short name taken from
    ``supported_dists`` is used.
 
    Returns a tuple ``(distname,version,id)`` which defaults to the args given as
    parameters.  ``id`` is the item in parentheses after the version number.  It
    is usually the version codename.
 
+   .. versionadded:: 2.6
+
 .. function:: libc_ver(executable=sys.executable, lib='', version='', chunksize=2048)
 
    Tries to determine the libc version against which the file executable (defaults
    to the Python interpreter) is linked.  Returns a tuple of strings ``(lib,
    version)`` which default to the given parameters in case the lookup fails.
 
    Note that this function has intimate knowledge of how different libc versions
    add symbols to the executable is probably only usable for executables compiled
    using :program:`gcc`.
 
    The file is read and scanned in chunks of *chunksize* bytes.
 
