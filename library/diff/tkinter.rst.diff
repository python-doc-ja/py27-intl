--- r262/library/tkinter.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/tkinter.rst	2009-10-27 23:36:50.397095000 +0900
@@ -20,27 +20,24 @@
 .. seealso::
 
    `Python Tkinter Resources <http://www.python.org/topics/tkinter/>`_
       The Python Tkinter Topic Guide provides a great deal of information on using Tk
       from Python and links to other sources of information on Tk.
 
    `An Introduction to Tkinter <http://www.pythonware.com/library/an-introduction-to-tkinter.htm>`_
       Fredrik Lundh's on-line reference material.
 
    `Tkinter reference: a GUI for Python <http://infohost.nmt.edu/tcc/help/pubs/lang.html>`_
       On-line reference material.
 
-   `Tkinter for JPython <http://jtkinter.sourceforge.net>`_
-      The Jython interface to Tkinter.
-
    `Python and Tkinter Programming <http://www.amazon.com/exec/obidos/ASIN/1884777813>`_
       The book by John Grayson (ISBN 1-884777-81-3).
 
 
 Tkinter Modules
 ---------------
 
 Most of the time, the :mod:`Tkinter` module is all you really need, but a number
 of additional modules are available as well.  The Tk interface is located in a
 binary module named :mod:`_tkinter`. This module contains the low-level
 interface to Tk, and should never be used directly by application programmers.
 It is usually a shared library (or DLL), but might in some cases be statically
@@ -518,25 +515,25 @@
 ``value``.  This connection works both ways: if the variable changes for any
 reason, the widget it's connected to will be updated to reflect the new value.
 
 Unfortunately, in the current implementation of :mod:`Tkinter` it is not
 possible to hand over an arbitrary Python variable to a widget through a
 ``variable`` or ``textvariable`` option.  The only kinds of variables for which
 this works are variables that are subclassed from a class called Variable,
 defined in the :mod:`Tkinter` module.
 
 There are many useful subclasses of Variable already defined:
 :class:`StringVar`, :class:`IntVar`, :class:`DoubleVar`, and
 :class:`BooleanVar`.  To read the current value of such a variable, call the
-:meth:`get` method on it, and to change its value you call the :meth:`set`
+:meth:`get` method on it, and to change its value you call the :meth:`!set`
 method.  If you follow this protocol, the widget will always track the value of
 the variable, with no further intervention on your part.
 
 For example::
 
    class App(Frame):
        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()
 
            self.entrythingy = Entry()
            self.entrythingy.pack()
@@ -659,25 +656,25 @@
    ``"fill"``.
 
 region
    This is a string with four space-delimited elements, each of which is a legal
    distance (see above).  For example: ``"2 3 4 5"`` and ``"3i 2i 4.5i 2i"`` and
    ``"3c 2c 4c 10.43c"``  are all legal regions.
 
 relief
    Determines what the border style of a widget will be.  Legal values are:
    ``"raised"``, ``"sunken"``, ``"flat"``, ``"groove"``, and ``"ridge"``.
 
 scrollcommand
-   This is almost always the :meth:`set` method of some scrollbar widget, but can
+   This is almost always the :meth:`!set` method of some scrollbar widget, but can
    be any widget method that takes a single argument.   Refer to the file
    :file:`Demo/tkinter/matt/canvas-with-scrollbars.py` in the Python source
    distribution for an example.
 
 wrap:
    Must be one of: ``"none"``, ``"char"``, or ``"word"``.
 
 
 Bindings and Events
 ^^^^^^^^^^^^^^^^^^^
 
 .. index::
