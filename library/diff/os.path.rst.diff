--- r262/library/os.path.rst	2009-04-06 06:26:31.956399000 +0900
+++ r266/library/os.path.rst	2010-08-03 06:45:43.685855000 +0900
@@ -1,25 +1,25 @@
 :mod:`os.path` --- Common pathname manipulations
 ================================================
 
 .. module:: os.path
    :synopsis: Operations on pathnames.
 
 .. index:: single: path; operations
 
 This module implements some useful functions on pathnames. To read or
 write files see :func:`open`, and for accessing the filesystem see the
 :mod:`os` module.
 
-.. warning::
+.. note::
 
    On Windows, many of these functions do not properly support UNC pathnames.
    :func:`splitunc` and :func:`ismount` do handle them correctly.
 
 
 .. note::
 
    Since different operating systems have different path name conventions, there
    are several versions of this module in the standard library.  The
    :mod:`os.path` module is always the path module suitable for the operating
    system Python is running on, and therefore usable for local paths.  However,
    you can also import and use the individual modules if you want to manipulate
@@ -203,67 +203,76 @@
 
 
 .. function:: normcase(path)
 
    Normalize the case of a pathname.  On Unix and Mac OS X, this returns the
    path unchanged; on case-insensitive filesystems, it converts the path to
    lowercase.  On Windows, it also converts forward slashes to backward slashes.
 
 
 .. function:: normpath(path)
 
    Normalize a pathname.  This collapses redundant separators and up-level
-   references so that ``A//B``, ``A/./B`` and ``A/foo/../B`` all become ``A/B``.
+   references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all become
+   ``A/B``.
+
    It does not normalize the case (use :func:`normcase` for that).  On Windows, it
    converts forward slashes to backward slashes. It should be understood that this
    may change the meaning of the path if it contains symbolic links!
 
 
 .. function:: realpath(path)
 
    Return the canonical path of the specified filename, eliminating any symbolic
    links encountered in the path (if they are supported by the operating system).
 
    .. versionadded:: 2.2
 
 
 .. function:: relpath(path[, start])
 
    Return a relative filepath to *path* either from the current directory or from
    an optional *start* point.
 
-   *start* defaults to :attr:`os.curdir`. Availability:  Windows, Unix.
+   *start* defaults to :attr:`os.curdir`.
+
+   Availability:  Windows, Unix.
 
    .. versionadded:: 2.6
 
 
 .. function:: samefile(path1, path2)
 
    Return ``True`` if both pathname arguments refer to the same file or directory
    (as indicated by device number and i-node number). Raise an exception if a
-   :func:`os.stat` call on either pathname fails. Availability: Unix.
+   :func:`os.stat` call on either pathname fails.
+
+   Availability: Unix.
 
 
 .. function:: sameopenfile(fp1, fp2)
 
    Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same file.
+
    Availability: Unix.
 
 
 .. function:: samestat(stat1, stat2)
 
    Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same file.
    These structures may have been returned by :func:`fstat`, :func:`lstat`, or
    :func:`stat`.  This function implements the underlying comparison used by
-   :func:`samefile` and :func:`sameopenfile`. Availability: Unix.
+   :func:`samefile` and :func:`sameopenfile`.
+
+   Availability: Unix.
 
 
 .. function:: split(path)
 
    Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the last
    pathname component and *head* is everything leading up to that.  The *tail* part
    will never contain a slash; if *path* ends in a slash, *tail* will be empty.  If
    there is no slash in *path*, *head* will be empty.  If *path* is empty, both
    *head* and *tail* are empty.  Trailing slashes are stripped from *head* unless
    it is the root (one or more slashes only).  In nearly all cases, ``join(head,
    tail)`` equals *path* (the only exception being when there were multiple slashes
    separating *head* from *tail*).
@@ -287,46 +296,48 @@
    returns  ``('.cshrc', '')``.
 
    .. versionchanged:: 2.6
       Earlier versions could produce an empty root when the only period was the
       first character.
 
 
 .. function:: splitunc(path)
 
    Split the pathname *path* into a pair ``(unc, rest)`` so that *unc* is the UNC
    mount point (such as ``r'\\host\mount'``), if present, and *rest* the rest of
    the path (such as  ``r'\path\file.ext'``).  For paths containing drive letters,
-   *unc* will always be the empty string. Availability:  Windows.
+   *unc* will always be the empty string.
+
+   Availability:  Windows.
 
 
 .. function:: walk(path, visit, arg)
 
    Calls the function *visit* with arguments ``(arg, dirname, names)`` for each
    directory in the directory tree rooted at *path* (including *path* itself, if it
    is a directory).  The argument *dirname* specifies the visited directory, the
    argument *names* lists the files in the directory (gotten from
    ``os.listdir(dirname)``). The *visit* function may modify *names* to influence
    the set of directories visited below *dirname*, e.g. to avoid visiting certain
    parts of the tree.  (The object referred to by *names* must be modified in
    place, using :keyword:`del` or slice assignment.)
 
    .. note::
 
       Symbolic links to directories are not treated as subdirectories, and that
       :func:`walk` therefore will not visit them. To visit linked directories you must
       identify them with ``os.path.islink(file)`` and ``os.path.isdir(file)``, and
       invoke :func:`walk` as necessary.
 
-   .. warning::
+   .. note::
 
       This function is deprecated and has been removed in 3.0 in favor of
       :func:`os.walk`.
 
 
 .. data:: supports_unicode_filenames
 
    True if arbitrary Unicode strings can be used as file names (within limitations
    imposed by the file system), and if :func:`os.listdir` returns Unicode strings
    for a Unicode argument.
 
    .. versionadded:: 2.3
