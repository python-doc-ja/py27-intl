--- r262/library/urllib.rst	2009-04-06 06:21:05.082173000 +0900
+++ r266/library/urllib.rst	2010-07-03 19:29:20.902651000 +0900
@@ -40,25 +40,25 @@
    may not read until the end of the data stream; there is no good way to determine
    that the entire stream from a socket has been read in the general case.
 
    Except for the :meth:`info`, :meth:`getcode` and :meth:`geturl` methods,
    these methods have the same interface as for file objects --- see section
    :ref:`bltin-file-objects` in this manual.  (It is not a built-in file object,
    however, so it can't be used at those few places where a true built-in file
    object is required.)
 
    .. index:: module: mimetools
 
    The :meth:`info` method returns an instance of the class
-   :class:`httplib.HTTPMessage` containing meta-information associated with the
+   :class:`mimetools.Message` containing meta-information associated with the
    URL.  When the method is HTTP, these headers are those returned by the server
    at the head of the retrieved HTML page (including Content-Length and
    Content-Type).  When the method is FTP, a Content-Length header will be
    present if (as is now usual) the server passed back a file length in response
    to the FTP retrieval request. A Content-Type header will be present if the
    MIME type can be guessed.  When the method is local-file, returned headers
    will include a Date representing the file's last-modified time, a
    Content-Length giving file size, and a Content-Type containing a guess at the
    file's type. See also the description of the :mod:`mimetools` module.
 
    The :meth:`geturl` method returns the real URL of the page.  In some cases, the
    HTTP server redirects a client to another URL.  The :func:`urlopen` function
@@ -87,26 +87,28 @@
       ...
 
    The :envvar:`no_proxy` environment variable can be used to specify hosts which
    shouldn't be reached via proxy; if set, it should be a comma-separated list
    of hostname suffixes, optionally with ``:port`` appended, for example
    ``cern.ch,ncsa.uiuc.edu,some.host:8080``.
 
    In a Windows environment, if no proxy environment variables are set, proxy
    settings are obtained from the registry's Internet Settings section.
 
    .. index:: single: Internet Config
 
-   In a Macintosh environment, :func:`urlopen` will retrieve proxy information from
-   Internet Config.
+   In a Mac OS X  environment, :func:`urlopen` will retrieve proxy information
+   from the OS X System Configuration Framework, which can be managed with
+   Network System Preferences panel.
+
 
    Alternatively, the optional *proxies* argument may be used to explicitly specify
    proxies.  It must be a dictionary mapping scheme names to proxy URLs, where an
    empty dictionary causes no proxies to be used, and ``None`` (the default value)
    causes environmental proxy settings to be used as discussed above.  For
    example::
 
       # Use http://www.someproxy.com:3128 for http proxying
       proxies = {'http': 'http://www.someproxy.com:3128'}
       filehandle = urllib.urlopen(some_url, proxies=proxies)
       # Don't use any proxies
       filehandle = urllib.urlopen(some_url, proxies={})
@@ -194,82 +196,95 @@
 .. function:: urlcleanup()
 
    Clear the cache that may have been built up by previous calls to
    :func:`urlretrieve`.
 
 
 Utility functions
 -----------------
 
 .. function:: quote(string[, safe])
 
    Replace special characters in *string* using the ``%xx`` escape. Letters,
-   digits, and the characters ``'_.-'`` are never quoted. The optional *safe*
-   parameter specifies additional characters that should not be quoted --- its
-   default value is ``'/'``.
+   digits, and the characters ``'_.-'`` are never quoted. By default, this
+   function is intended for quoting the path section of the URL.The optional
+   *safe* parameter specifies additional characters that should not be quoted
+   --- its default value is ``'/'``.
 
    Example: ``quote('/~connolly/')`` yields ``'/%7econnolly/'``.
 
 
 .. function:: quote_plus(string[, safe])
 
    Like :func:`quote`, but also replaces spaces by plus signs, as required for
-   quoting HTML form values.  Plus signs in the original string are escaped unless
-   they are included in *safe*.  It also does not have *safe* default to ``'/'``.
+   quoting HTML form values when building up a query string to go into a URL.
+   Plus signs in the original string are escaped unless they are included in
+   *safe*.  It also does not have *safe* default to ``'/'``.
 
 
 .. function:: unquote(string)
 
    Replace ``%xx`` escapes by their single-character equivalent.
 
    Example: ``unquote('/%7Econnolly/')`` yields ``'/~connolly/'``.
 
 
 .. function:: unquote_plus(string)
 
    Like :func:`unquote`, but also replaces plus signs by spaces, as required for
    unquoting HTML form values.
 
 
 .. function:: urlencode(query[, doseq])
 
-   Convert a mapping object or a sequence of two-element tuples  to a "url-encoded"
-   string, suitable to pass to :func:`urlopen` above as the optional *data*
-   argument.  This is useful to pass a dictionary of form fields to a ``POST``
-   request.  The resulting string is a series of ``key=value`` pairs separated by
-   ``'&'`` characters, where both *key* and *value* are quoted using
-   :func:`quote_plus` above.  If the optional parameter *doseq* is present and
-   evaluates to true, individual ``key=value`` pairs are generated for each element
-   of the sequence. When a sequence of two-element tuples is used as the *query*
-   argument, the first element of each tuple is a key and the second is a value.
-   The order of parameters in the encoded string will match the order of parameter
-   tuples in the sequence. The :mod:`urlparse` module provides the functions
+   Convert a mapping object or a sequence of two-element tuples  to a
+   "url-encoded" string, suitable to pass to :func:`urlopen` above as the
+   optional *data* argument.  This is useful to pass a dictionary of form
+   fields to a ``POST`` request.  The resulting string is a series of
+   ``key=value`` pairs separated by ``'&'`` characters, where both *key* and
+   *value* are quoted using :func:`quote_plus` above.  When a sequence of
+   two-element tuples is used as the *query* argument, the first element of
+   each tuple is a key and the second is a value. The value element in itself
+   can be a sequence and in that case, if the optional parameter *doseq* is
+   evaluates to *True*, individual ``key=value`` pairs separated by ``'&'`` are
+   generated for each element of the value sequence for the key.  The order of
+   parameters in the encoded string will match the order of parameter tuples in
+   the sequence. The :mod:`urlparse` module provides the functions
    :func:`parse_qs` and :func:`parse_qsl` which are used to parse query strings
    into Python data structures.
 
 
 .. function:: pathname2url(path)
 
    Convert the pathname *path* from the local syntax for a path to the form used in
    the path component of a URL.  This does not produce a complete URL.  The return
    value will already be quoted using the :func:`quote` function.
 
 
 .. function:: url2pathname(path)
 
    Convert the path component *path* from an encoded URL to the local syntax for a
    path.  This does not accept a complete URL.  This function uses :func:`unquote`
    to decode *path*.
 
 
+.. function:: getproxies()
+
+   This helper function returns a dictionary of scheme to proxy server URL
+   mappings. It scans the environment for variables named ``<scheme>_proxy``
+   for all operating systems first, and when it cannot find it, looks for proxy
+   information from Mac OSX System Configuration for Mac OS X and Windows
+   Systems Registry for Windows.
+
+
 URL Opener objects
 ------------------
 
 .. class:: URLopener([proxies[, **x509]])
 
    Base class for opening and reading URLs.  Unless you need to support opening
    objects using schemes other than :file:`http:`, :file:`ftp:`, or :file:`file:`,
    you probably want to use :class:`FancyURLopener`.
 
    By default, the :class:`URLopener` class sends a :mailheader:`User-Agent` header
    of ``urllib/VVV``, where *VVV* is the :mod:`urllib` version number.
    Applications can define their own :mailheader:`User-Agent` header by subclassing
