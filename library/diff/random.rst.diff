--- r262/library/random.rst	2009-04-03 14:41:10.718776000 +0900
+++ r266/library/random.rst	2010-05-19 23:12:57.181598000 +0900
@@ -43,25 +43,29 @@
    the :meth:`getrandbits` method.
 
 As an example of subclassing, the :mod:`random` module provides the
 :class:`WichmannHill` class that implements an alternative generator in pure
 Python.  The class provides a backward compatible way to reproduce results from
 earlier versions of Python, which used the Wichmann-Hill algorithm as the core
 generator.  Note that this Wichmann-Hill generator can no longer be recommended:
 its period is too short by contemporary standards, and the sequence generated is
 known to fail some stringent randomness tests.  See the references below for a
 recent variant that repairs these flaws.
 
 .. versionchanged:: 2.3
-   Substituted MersenneTwister for Wichmann-Hill.
+   MersenneTwister replaced Wichmann-Hill as the default generator.
+
+The :mod:`random` module also provides the :class:`SystemRandom` class which
+uses the system function :func:`os.urandom` to generate random numbers
+from sources provided by the operating system.
 
 Bookkeeping functions:
 
 
 .. function:: seed([x])
 
    Initialize the basic random number generator. Optional argument *x* can be any
    :term:`hashable` object. If *x* is omitted or ``None``, current system time is used;
    current system time is also used to initialize the generator when the module is
    first imported.  If randomness sources are provided by the operating system,
    they are used instead of the system time (see the :func:`os.urandom` function
    for details on availability).
@@ -182,24 +186,26 @@
 
 
 .. function:: random()
 
    Return the next random floating point number in the range [0.0, 1.0).
 
 
 .. function:: uniform(a, b)
 
    Return a random floating point number *N* such that ``a <= N <= b`` for
    ``a <= b`` and ``b <= N <= a`` for ``b < a``.
 
+   The end-point value ``b`` may or may not be included in the range
+   depending on floating-point rounding in the equation ``a + (b-a) * random()``.
 
 .. function:: triangular(low, high, mode)
 
    Return a random floating point number *N* such that ``low <= N <= high`` and
    with the specified *mode* between those bounds.  The *low* and *high* bounds
    default to zero and one.  The *mode* argument defaults to the midpoint
    between the bounds, giving a symmetric distribution.
 
    .. versionadded:: 2.6
 
 
 .. function:: betavariate(alpha, beta)
