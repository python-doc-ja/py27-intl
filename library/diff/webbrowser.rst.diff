--- r262/library/webbrowser.rst	2009-04-06 06:26:31.956399000 +0900
+++ r266/library/webbrowser.rst	2009-12-24 12:06:04.853272000 +0900
@@ -1,68 +1,68 @@
 
 :mod:`webbrowser` --- Convenient Web-browser controller
 =======================================================
 
 .. module:: webbrowser
    :synopsis: Easy-to-use controller for Web browsers.
 .. moduleauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
 
 The :mod:`webbrowser` module provides a high-level interface to allow displaying
 Web-based documents to users. Under most circumstances, simply calling the
-:func:`open` function from this module will do the right thing.
+:func:`.open` function from this module will do the right thing.
 
 Under Unix, graphical browsers are preferred under X11, but text-mode browsers
 will be used if graphical browsers are not available or an X11 display isn't
 available.  If text-mode browsers are used, the calling process will block until
 the user exits the browser.
 
 If the environment variable :envvar:`BROWSER` exists, it is interpreted to
-override the platform default list of browsers, as a os.pathsep-separated list
-of browsers to try in order.  When the value of a list part contains the string
-``%s``, then it is  interpreted as a literal browser command line to be used
-with the argument URL substituted for ``%s``; if the part does not contain
-``%s``, it is simply interpreted as the name of the browser to launch.
+override the platform default list of browsers, as a :data:`os.pathsep`-separated
+list of browsers to try in order.  When the value of a list part contains the
+string ``%s``, then it is  interpreted as a literal browser command line to be
+used with the argument URL substituted for ``%s``; if the part does not contain
+``%s``, it is simply interpreted as the name of the browser to launch. [1]_
 
 For non-Unix platforms, or when a remote browser is available on Unix, the
 controlling process will not wait for the user to finish with the browser, but
 allow the remote browser to maintain its own windows on the display.  If remote
 browsers are not available on Unix, the controlling process will launch a new
 browser and wait.
 
 The script :program:`webbrowser` can be used as a command-line interface for the
 module. It accepts an URL as the argument. It accepts the following optional
 parameters: :option:`-n` opens the URL in a new browser window, if possible;
 :option:`-t` opens the URL in a new browser page ("tab"). The options are,
 naturally, mutually exclusive.
 
 The following exception is defined:
 
 
 .. exception:: Error
 
    Exception raised when a browser control error occurs.
 
 The following functions are defined:
 
 
-.. function:: open(url[, new=0[, autoraise=1]])
+.. function:: open(url[, new=0[, autoraise=True]])
 
-   Display *url* using the default browser. If *new* is 0, the *url* is opened in
-   the same browser window if possible.  If *new* is 1, a new browser window is
-   opened if possible.  If *new* is 2, a new browser page ("tab") is opened if
-   possible.  If *autoraise* is true, the window is raised if possible (note that
-   under many window managers this will occur regardless of the setting of this
-   variable).
+   Display *url* using the default browser. If *new* is 0, the *url* is opened
+   in the same browser window if possible.  If *new* is 1, a new browser window
+   is opened if possible.  If *new* is 2, a new browser page ("tab") is opened
+   if possible.  If *autoraise* is ``True``, the window is raised if possible
+   (note that under many window managers this will occur regardless of the
+   setting of this variable).
 
    Note that on some platforms, trying to open a filename using this function,
    may work and start the operating system's associated program.  However, this
    is neither supported nor portable.
 
    .. versionchanged:: 2.5
       *new* can now be 2.
 
 
 .. function:: open_new(url)
 
    Open *url* in a new window of the default browser, if possible, otherwise, open
@@ -153,51 +153,56 @@
 
 (2)
    Only on Windows platforms.
 
 (3)
    Only on Mac OS platforms; requires the standard MacPython :mod:`ic` module.
 
 (4)
    Only on Mac OS X platform.
 
 Here are some simple examples::
 
-   url = 'http://www.python.org'
+   url = 'http://www.python.org/'
 
    # Open URL in a new tab, if a browser window is already open.
-   webbrowser.open_new_tab(url + '/doc')
+   webbrowser.open_new_tab(url + 'doc/')
 
    # Open URL in new window, raising the window if possible.
    webbrowser.open_new(url)
 
 
 .. _browser-controllers:
 
 Browser Controller Objects
 --------------------------
 
-Browser controllers provide these methods which parallel two of the module-level
-convenience functions:
+Browser controllers provide these methods which parallel three of the
+module-level convenience functions:
 
 
-.. method:: controller.open(url[, new[, autoraise=1]])
+.. method:: controller.open(url[, new=0[, autoraise=True]])
 
    Display *url* using the browser handled by this controller. If *new* is 1, a new
    browser window is opened if possible. If *new* is 2, a new browser page ("tab")
    is opened if possible.
 
 
 .. method:: controller.open_new(url)
 
    Open *url* in a new window of the browser handled by this controller, if
    possible, otherwise, open *url* in the only browser window.  Alias
    :func:`open_new`.
 
 
 .. method:: controller.open_new_tab(url)
 
    Open *url* in a new page ("tab") of the browser handled by this controller, if
    possible, otherwise equivalent to :func:`open_new`.
 
    .. versionadded:: 2.5
 
+
+.. rubric:: Footnotes
+
+.. [1] Executables named here without a full path will be searched in the
+       directories given in the :envvar:`PATH` environment variable.
