--- r262/library/mailbox.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/mailbox.rst	2009-10-28 00:08:27.384772000 +0900
@@ -327,25 +327,25 @@
 
       The :attr:`colon` attribute may also be set on a per-instance basis.
 
    :class:`Maildir` instances have all of the methods of :class:`Mailbox` in
    addition to the following:
 
 
    .. method:: list_folders()
 
       Return a list of the names of all folders.
 
 
-   .. method:: .et_folder(folder)
+   .. method:: get_folder(folder)
 
       Return a :class:`Maildir` instance representing the folder whose name is
       *folder*. A :exc:`NoSuchMailboxError` exception is raised if the folder
       does not exist.
 
 
    .. method:: add_folder(folder)
 
       Create a folder whose name is *folder* and return a :class:`Maildir`
       instance representing it.
 
 
@@ -593,25 +593,25 @@
 
    .. method:: close()
 
       :class:`MH` instances do not keep any open files, so this method is
       equivalent to :meth:`unlock`.
 
 
 .. seealso::
 
    `nmh - Message Handling System <http://www.nongnu.org/nmh/>`_
       Home page of :program:`nmh`, an updated version of the original :program:`mh`.
 
-   `MH & nmh: Email for Users & Programmers <http://www.ics.uci.edu/~mh/book/>`_
+   `MH & nmh: Email for Users & Programmers <http://rand-mh.sourceforge.net/book/>`_
       A GPL-licensed book on :program:`mh` and :program:`nmh`, with some information
       on the mailbox format.
 
 
 .. _mailbox-babyl:
 
 :class:`Babyl`
 ^^^^^^^^^^^^^^
 
 
 .. class:: Babyl(path[, factory=None[, create=True]])
 
@@ -1521,38 +1521,38 @@
 .. method:: oldmailbox.next()
 
    Return the next message in the mailbox, created with the optional *factory*
    argument passed into the mailbox object's constructor. By default this is an
    :class:`rfc822.Message` object (see the :mod:`rfc822` module).  Depending on the
    mailbox implementation the *fp* attribute of this object may be a true file
    object or a class instance simulating a file object, taking care of things like
    message boundaries if multiple mail messages are contained in a single file,
    etc.  If no more messages are available, this method returns ``None``.
 
 Most of the older mailbox classes have names that differ from the current
 mailbox class names, except for :class:`Maildir`. For this reason, the new
-:class:`Maildir` class defines a :meth:`next` method and its constructor differs
+:class:`Maildir` class defines a :meth:`!next` method and its constructor differs
 slightly from those of the other new mailbox classes.
 
 The older mailbox classes whose names are not the same as their newer
 counterparts are as follows:
 
 
 .. class:: UnixMailbox(fp[, factory])
 
    Access to a classic Unix-style mailbox, where all messages are contained in a
    single file and separated by ``From`` (a.k.a. ``From_``) lines.  The file object
    *fp* points to the mailbox file.  The optional *factory* parameter is a callable
    that should create new message objects.  *factory* is called with one argument,
-   *fp* by the :meth:`next` method of the mailbox object.  The default is the
+   *fp* by the :meth:`!next` method of the mailbox object.  The default is the
    :class:`rfc822.Message` class (see the :mod:`rfc822` module -- and the note
    below).
 
    .. note::
 
       For reasons of this module's internal implementation, you will probably want to
       open the *fp* object in binary mode.  This is especially important on Windows.
 
    For maximum portability, messages in a Unix-style mailbox are separated by any
    line that begins exactly with the string ``'From '`` (note the trailing space)
    if preceded by exactly two newlines. Because of the wide-range of variations in
    practice, nothing else on the ``From_`` line should be considered.  However, the
