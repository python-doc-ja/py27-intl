--- r262/library/thread.rst	2008-11-07 17:56:27.337630000 +0900
+++ r266/library/thread.rst	2009-10-27 23:50:20.761604000 +0900
@@ -147,25 +147,25 @@
    with a_lock:
        print "a_lock is locked while this executes"
 
 **Caveats:**
 
   .. index:: module: signal
 
 * Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt`
   exception will be received by an arbitrary thread.  (When the :mod:`signal`
   module is available, interrupts always go to the main thread.)
 
 * Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is
-  equivalent to calling :func:`exit`.
+  equivalent to calling :func:`thread.exit`.
 
 * Not all built-in functions that may block waiting for I/O allow other threads
   to run.  (The most popular ones (:func:`time.sleep`, :meth:`file.read`,
   :func:`select.select`) work as expected.)
 
 * It is not possible to interrupt the :meth:`acquire` method on a lock --- the
   :exc:`KeyboardInterrupt` exception will happen after the lock has been acquired.
 
   .. index:: pair: threads; IRIX
 
 * When the main thread exits, it is system defined whether the other threads
   survive.  On SGI IRIX using the native thread implementation, they survive.  On
