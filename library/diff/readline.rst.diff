--- r262/library/readline.rst	2008-01-06 05:33:46.954265000 +0900
+++ r266/library/readline.rst	2010-03-23 22:24:15.291215000 +0900
@@ -1,29 +1,39 @@
-
 :mod:`readline` --- GNU readline interface
 ==========================================
 
 .. module:: readline
    :platform: Unix
    :synopsis: GNU readline support for Python.
 .. sectionauthor:: Skip Montanaro <skip@pobox.com>
 
 
 The :mod:`readline` module defines a number of functions to facilitate
 completion and reading/writing of history files from the Python interpreter.
 This module can be used directly or via the :mod:`rlcompleter` module.  Settings
 made using  this module affect the behaviour of both the interpreter's
 interactive prompt  and the prompts offered by the :func:`raw_input` and
 :func:`input` built-in functions.
 
+.. note::
+
+  On MacOS X the :mod:`readline` module can be implemented using
+  the ``libedit`` library instead of GNU readline.
+
+  The configuration file for ``libedit`` is different from that
+  of GNU readline. If you programmaticly load configuration strings
+  you can check for the text "libedit" in :const:`readline.__doc__`
+  to differentiate between GNU readline and libedit.
+
+
 The :mod:`readline` module defines the following functions:
 
 
 .. function:: parse_and_bind(string)
 
    Parse and execute single line of a readline init file.
 
 
 .. function:: get_line_buffer()
 
    Return the current contents of the line buffer.
 
@@ -173,25 +183,24 @@
    specified, it will be used as the new completion display function;
    if omitted or ``None``, any completion display function already
    installed is removed.  The completion display function is called as
    ``function(substitution, [matches], longest_match_length)`` once
    each time matches need to be displayed.
 
    .. versionadded:: 2.6
 
 .. function:: add_history(line)
 
    Append a line to the history buffer, as if it was the last line typed.
 
-
 .. seealso::
 
    Module :mod:`rlcompleter`
       Completion of Python identifiers at the interactive prompt.
 
 
 .. _readline-example:
 
 Example
 -------
 
 The following example demonstrates how to use the :mod:`readline` module's
@@ -212,25 +221,25 @@
 
 The following example extends the :class:`code.InteractiveConsole` class to
 support history save/restore. ::
 
    import code
    import readline
    import atexit
    import os
 
    class HistoryConsole(code.InteractiveConsole):
        def __init__(self, locals=None, filename="<console>",
                     histfile=os.path.expanduser("~/.console-history")):
-           code.InteractiveConsole.__init__(self)
+           code.InteractiveConsole.__init__(self, locals, filename)
            self.init_history(histfile)
 
        def init_history(self, histfile):
            readline.parse_and_bind("tab: complete")
            if hasattr(readline, "read_history_file"):
                try:
                    readline.read_history_file(histfile)
                except IOError:
                    pass
                atexit.register(self.save_history, histfile)
 
        def save_history(self, histfile):
