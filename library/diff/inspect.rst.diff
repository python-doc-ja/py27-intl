--- r262/library/inspect.rst	2008-06-08 00:59:10.382851000 +0900
+++ r266/library/inspect.rst	2010-03-22 04:16:28.299911000 +0900
@@ -117,25 +117,25 @@
 |           |                 | instruction in bytecode   |       |
 +-----------+-----------------+---------------------------+-------+
 |           | tb_lineno       | current line number in    |       |
 |           |                 | Python source code        |       |
 +-----------+-----------------+---------------------------+-------+
 |           | tb_next         | next inner traceback      |       |
 |           |                 | object (called by this    |       |
 |           |                 | level)                    |       |
 +-----------+-----------------+---------------------------+-------+
 | frame     | f_back          | next outer frame object   |       |
 |           |                 | (this frame's caller)     |       |
 +-----------+-----------------+---------------------------+-------+
-|           | f_builtins      | built-in namespace seen   |       |
+|           | f_builtins      | builtins namespace seen   |       |
 |           |                 | by this frame             |       |
 +-----------+-----------------+---------------------------+-------+
 |           | f_code          | code object being         |       |
 |           |                 | executed in this frame    |       |
 +-----------+-----------------+---------------------------+-------+
 |           | f_exc_traceback | traceback if raised in    |       |
 |           |                 | this frame, or ``None``   |       |
 +-----------+-----------------+---------------------------+-------+
 |           | f_exc_type      | exception type if raised  |       |
 |           |                 | in this frame, or         |       |
 |           |                 | ``None``                  |       |
 +-----------+-----------------+---------------------------+-------+
@@ -344,38 +344,42 @@
    those types, which is robust across Python implementations.  Typically, data
    descriptors will also have :attr:`__name__` and :attr:`__doc__` attributes
    (properties, getsets, and members have both of these attributes), but this is
    not guaranteed.
 
    .. versionadded:: 2.3
 
 
 .. function:: isgetsetdescriptor(object)
 
    Return true if the object is a getset descriptor.
 
-   getsets are attributes defined in extension modules via ``PyGetSetDef``
-   structures.  For Python implementations without such types, this method will
-   always return ``False``.
+   .. impl-detail::
+
+      getsets are attributes defined in extension modules via
+      :ctype:`PyGetSetDef` structures.  For Python implementations without such
+      types, this method will always return ``False``.
 
    .. versionadded:: 2.5
 
 
 .. function:: ismemberdescriptor(object)
 
    Return true if the object is a member descriptor.
 
-   Member descriptors are attributes defined in extension modules via
-   ``PyMemberDef`` structures.  For Python implementations without such types,
-   this method will always return ``False``.
+   .. impl-detail::
+
+      Member descriptors are attributes defined in extension modules via
+      :ctype:`PyMemberDef` structures.  For Python implementations without such
+      types, this method will always return ``False``.
 
    .. versionadded:: 2.5
 
 
 .. _inspect-source:
 
 Retrieving source code
 ----------------------
 
 .. function:: getdoc(object)
 
    Get the documentation string for an object, cleaned up with :func:`cleandoc`.
@@ -444,25 +448,25 @@
 
    Arrange the given list of classes into a hierarchy of nested lists. Where a
    nested list appears, it contains classes derived from the class whose entry
    immediately precedes the list.  Each entry is a 2-tuple containing a class and a
    tuple of its base classes.  If the *unique* argument is true, exactly one entry
    appears in the returned structure for each class in the given list.  Otherwise,
    classes using multiple inheritance and their descendants will appear multiple
    times.
 
 
 .. function:: getargspec(func)
 
-   Get the names and default values of a function's arguments. A tuple of four
+   Get the names and default values of a Python function's arguments. A tuple of four
    things is returned: ``(args, varargs, varkw, defaults)``. *args* is a list of
    the argument names (it may contain nested lists). *varargs* and *varkw* are the
    names of the ``*`` and ``**`` arguments or ``None``. *defaults* is a tuple of
    default argument values or None if there are no default arguments; if this tuple
    has *n* elements, they correspond to the last *n* elements listed in *args*.
 
    .. versionchanged:: 2.6
       Returns a :term:`named tuple` ``ArgSpec(args, varargs, keywords,
       defaults)``.
 
 
 .. function:: getargvalues(frame)
@@ -501,25 +505,25 @@
 
 
 .. _inspect-stack:
 
 The interpreter stack
 ---------------------
 
 When the following functions return "frame records," each record is a tuple of
 six items: the frame object, the filename, the line number of the current line,
 the function name, a list of lines of context from the source code, and the
 index of the current line within that list.
 
-.. warning::
+.. note::
 
    Keeping references to frame objects, as found in the first element of the frame
    records these functions return, can cause your program to create reference
    cycles.  Once a reference cycle has been created, the lifespan of all objects
    which can be accessed from the objects which form the cycle can become much
    longer even if Python's optional cycle detector is enabled.  If such cycles must
    be created, it is important to ensure they are explicitly broken to avoid the
    delayed destruction of objects and increased memory consumption which occurs.
 
    Though the cycle detector will catch these, destruction of the frames (and local
    variables) can be made deterministic by removing the cycle in a
    :keyword:`finally` clause.  This is also important if the cycle detector was
@@ -558,24 +562,31 @@
 .. function:: getinnerframes(traceback[, context])
 
    Get a list of frame records for a traceback's frame and all inner frames.  These
    frames represent calls made as a consequence of *frame*.  The first entry in the
    list represents *traceback*; the last entry represents where the exception was
    raised.
 
 
 .. function:: currentframe()
 
    Return the frame object for the caller's stack frame.
 
+   .. impl-detail::
+
+      This function relies on Python stack frame support in the interpreter,
+      which isn't guaranteed to exist in all implementations of Python.  If
+      running in an implementation without Python stack frame support this
+      function returns ``None``.
+
 
 .. function:: stack([context])
 
    Return a list of frame records for the caller's stack.  The first entry in the
    returned list represents the caller; the last entry represents the outermost
    call on the stack.
 
 
 .. function:: trace([context])
 
    Return a list of frame records for the stack between the current frame and the
    frame in which an exception currently being handled was raised in.  The first
