--- r262/library/fcntl.rst	2008-03-20 08:03:25.849177000 +0900
+++ r266/library/fcntl.rst	2010-04-26 02:15:51.096452000 +0900
@@ -1,25 +1,25 @@
 
 :mod:`fcntl` --- The :func:`fcntl` and :func:`ioctl` system calls
 =================================================================
 
 .. module:: fcntl
    :platform: Unix
    :synopsis: The fcntl() and ioctl() system calls.
 .. sectionauthor:: Jaap Vermeulen
 
 
 .. index::
-   pair: UNIX@Unix; file control
-   pair: UNIX@Unix; I/O control
+   pair: UNIX; file control
+   pair: UNIX; I/O control
 
 This module performs file control and I/O control on file descriptors. It is an
 interface to the :cfunc:`fcntl` and :cfunc:`ioctl` Unix routines.
 
 All functions in this module take a file descriptor *fd* as their first
 argument.  This can be an integer file descriptor, such as returned by
 ``sys.stdin.fileno()``, or a file object, such as ``sys.stdin`` itself, which
 provides a :meth:`fileno` which returns a genuine file descriptor.
 
 The module defines the following functions:
 
 
@@ -87,25 +87,25 @@
       13341
       >>> buf = array.array('h', [0])
       >>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)
       0
       >>> buf
       array('h', [13341])
 
 
 .. function:: flock(fd, op)
 
    Perform the lock operation *op* on file descriptor *fd* (file objects providing
    a :meth:`fileno` method are accepted as well). See the Unix manual
-   :manpage:`flock(3)` for details.  (On some systems, this function is emulated
+   :manpage:`flock(2)` for details.  (On some systems, this function is emulated
    using :cfunc:`fcntl`.)
 
 
 .. function:: lockf(fd, operation, [length, [start, [whence]]])
 
    This is essentially a wrapper around the :func:`fcntl` locking calls.  *fd* is
    the file descriptor of the file to lock or unlock, and *operation* is one of the
    following values:
 
    * :const:`LOCK_UN` -- unlock
    * :const:`LOCK_SH` -- acquire a shared lock
    * :const:`LOCK_EX` -- acquire an exclusive lock
@@ -142,16 +142,15 @@
    rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)
 
 Note that in the first example the return value variable *rv* will hold an
 integer value; in the second example it will hold a string value.  The structure
 lay-out for the *lockdata* variable is system dependent --- therefore using the
 :func:`flock` call may be better.
 
 
 .. seealso::
 
    Module :mod:`os`
       If the locking flags :const:`O_SHLOCK` and :const:`O_EXLOCK` are present
-      in the :mod:`os` module, the :func:`os.open` function provides a more
-      platform-independent alternative to the :func:`lockf` and :func:`flock`
-      functions.
+      in the :mod:`os` module (on BSD only), the :func:`os.open` function
+      provides an alternative to the :func:`lockf` and :func:`flock` functions.
 
