--- r262/library/doctest.rst	2009-04-06 06:21:05.082173000 +0900
+++ r266/library/doctest.rst	2010-06-16 08:21:18.274734000 +0900
@@ -290,33 +290,26 @@
 Any classes found are recursively searched similarly, to test docstrings in
 their contained methods and nested classes.
 
 .. versionchanged:: 2.4
    A "private name" concept is deprecated and no longer documented.
 
 
 .. _doctest-finding-examples:
 
 How are Docstring Examples Recognized?
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-In most cases a copy-and-paste of an interactive console session works fine, but
-doctest isn't trying to do an exact emulation of any specific Python shell.  All
-hard tab characters are expanded to spaces, using 8-column tab stops.  If you
-don't believe tabs should mean that, too bad:  don't use hard tabs, or write
-your own :class:`DocTestParser` class.
-
-.. versionchanged:: 2.4
-   Expanding tabs to spaces is new; previous versions tried to preserve hard tabs,
-   with confusing results.
+In most cases a copy-and-paste of an interactive console session works fine,
+but doctest isn't trying to do an exact emulation of any specific Python shell.
 
 ::
 
    >>> # comments are ignored
    >>> x = 12
    >>> x
    12
    >>> if x == 13:
    ...     print "yes"
    ... else:
    ...     print "no"
    ...     print "NO"
@@ -333,24 +326,39 @@
 
 The fine print:
 
 * Expected output cannot contain an all-whitespace line, since such a line is
   taken to signal the end of expected output.  If expected output does contain a
   blank line, put ``<BLANKLINE>`` in your doctest example each place a blank line
   is expected.
 
   .. versionchanged:: 2.4
      ``<BLANKLINE>`` was added; there was no way to use expected output containing
      empty lines in previous versions.
 
+* All hard tab characters are expanded to spaces, using 8-column tab stops.
+  Tabs in output generated by the tested code are not modified.  Because any
+  hard tabs in the sample output *are* expanded, this means that if the code
+  output includes hard tabs, the only way the doctest can pass is if the
+  :const:`NORMALIZE_WHITESPACE` option or directive is in effect.
+  Alternatively, the test can be rewritten to capture the output and compare it
+  to an expected value as part of the test.  This handling of tabs in the
+  source was arrived at through trial and error, and has proven to be the least
+  error prone way of handling them.  It is possible to use a different
+  algorithm for handling tabs by writing a custom :class:`DocTestParser` class.
+
+  .. versionchanged:: 2.4
+     Expanding tabs to spaces is new; previous versions tried to preserve hard tabs,
+     with confusing results.
+
 * Output to stdout is captured, but not output to stderr (exception tracebacks
   are captured via a different means).
 
 * If you continue a line via backslashing in an interactive session, or for any
   other reason use a backslash, you should use a raw docstring, which will
   preserve your backslashes exactly as you type them::
 
      >>> def f(x):
      ...     r'''Backslashes in a raw docstring: m\n'''
      >>> print f.__doc__
      Backslashes in a raw docstring: m\n
 
@@ -1123,25 +1131,25 @@
 
 Advanced API
 ------------
 
 The basic API is a simple wrapper that's intended to make doctest easy to use.
 It is fairly flexible, and should meet most users' needs; however, if you
 require more fine-grained control over testing, or wish to extend doctest's
 capabilities, then you should use the advanced API.
 
 The advanced API revolves around two container classes, which are used to store
 the interactive examples extracted from doctest cases:
 
-* :class:`Example`: A single python :term:`statement`, paired with its expected
+* :class:`Example`: A single Python :term:`statement`, paired with its expected
   output.
 
 * :class:`DocTest`: A collection of :class:`Example`\ s, typically extracted
   from a single docstring or text file.
 
 Additional processing classes are defined to find, parse, and run, and check
 doctest examples:
 
 * :class:`DocTestFinder`: Finds all docstrings in a given module, and uses a
   :class:`DocTestParser` to create a :class:`DocTest` from every docstring that
   contains interactive examples.
 
@@ -1847,13 +1855,12 @@
 * Define functions named ``_regrtest_topic`` that consist of single docstrings,
   containing test cases for the named topics.  These functions can be included in
   the same file as the module, or separated out into a separate test file.
 
 * Define a ``__test__`` dictionary mapping from regression test topics to
   docstrings containing test cases.
 
 .. rubric:: Footnotes
 
 .. [#] Examples containing both expected output and an exception are not supported.
    Trying to guess where one ends and the other begins is too error-prone, and that
    also makes for a confusing test.
-
