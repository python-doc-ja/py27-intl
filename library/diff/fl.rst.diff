--- rest25/library/fl.rst	2008-12-19 16:58:07.000000000 +0900
+++ rest262/library/fl.rst	2009-04-05 05:02:09.000000000 +0900
@@ -1,19 +1,24 @@
 
 :mod:`fl` --- FORMS library for graphical user interfaces
 =========================================================
 
 .. module:: fl
    :platform: IRIX
    :synopsis: FORMS library for applications with graphical user interfaces.
+   :deprecated:
+
+
+.. deprecated:: 2.6
+    The :mod:`fl` module has been deprecated for removal in Python 3.0.
 
 
 .. index::
    single: FORMS Library
    single: Overmars, Mark
 
 This module provides an interface to the FORMS Library by Mark Overmars.  The
 source for the library can be retrieved by anonymous ftp from host
 ``ftp.cs.ruu.nl``, directory :file:`SGI/FORMS`.  It was last tested with version
 2.0b.
 
 Most functions are literal translations of their C equivalents, dropping the
@@ -33,29 +38,29 @@
 new Python object types: form objects (representing an entire form) and FORMS
 objects (representing one button, slider etc.). Hopefully this isn't too
 confusing.
 
 There are no 'free objects' in the Python interface to FORMS, nor is there an
 easy way to add object classes written in Python.  The FORMS interface to GL
 event handling is available, though, so you can mix FORMS with pure GL windows.
 
 **Please note:** importing :mod:`fl` implies a call to the GL function
 :cfunc:`foreground` and to the FORMS routine :cfunc:`fl_init`.
 
 
+.. _fl-functions:
+
 Functions Defined in Module :mod:`fl`
 -------------------------------------
 
-.. _fl functions:
-
 Module :mod:`fl` defines the following functions.  For more information about
 what they do, see the description of the equivalent C function in the FORMS
 documentation:
 
 
 .. function:: make_form(type, width, height)
 
    Create a form with given type, width and height.  This returns a :dfn:`form`
    object, whose methods are described below.
 
 
 .. function:: do_forms()
@@ -132,25 +137,25 @@
               qreset()
               qenter(dev, val)
               get_mouse()
               tie(button, valuator1, valuator2)
 
    These functions are the FORMS interfaces to the corresponding GL functions.  Use
    these if you want to handle some GL events yourself when using
    :func:`fl.do_events`.  When a GL event is detected that FORMS cannot handle,
    :func:`fl.do_forms` returns the special value :const:`FL.EVENT` and you should
    call :func:`fl.qread` to read the event from the queue.  Don't use the
    equivalent GL functions!
 
-   .. % \funcline{blkqread}{?}
+   .. \funcline{blkqread}{?}
 
 
 .. function:: color()
               mapcolor()
               getmcolor()
 
    See the description in the FORMS documentation of :cfunc:`fl_color`,
    :cfunc:`fl_mapcolor` and :cfunc:`fl_getmcolor`.
 
 
 .. _form-objects:
 
@@ -218,67 +223,61 @@
    End the current group of objects.
 
 
 .. method:: form.find_first()
 
    Find the first object in the form.
 
 
 .. method:: form.find_last()
 
    Find the last object in the form.
 
-.. % ---
-
 
 .. method:: form.add_box(type, x, y, w, h, name)
 
    Add a box object to the form. No extra methods.
 
 
 .. method:: form.add_text(type, x, y, w, h, name)
 
    Add a text object to the form. No extra methods.
 
-.. % \begin{methoddesc}[form]{add_bitmap}{type, x, y, w, h, name}
-.. % Add a bitmap object to the form.
-.. % \end{methoddesc}
+.. \begin{methoddesc}[form]{add_bitmap}{type, x, y, w, h, name}
+.. Add a bitmap object to the form.
+.. \end{methoddesc}
 
 
 .. method:: form.add_clock(type, x, y, w, h, name)
 
    Add a clock object to the form.  ---  Method: :meth:`get_clock`.
 
-.. % ---
-
 
 .. method:: form.add_button(type, x, y, w, h,  name)
 
    Add a button object to the form.  ---  Methods: :meth:`get_button`,
    :meth:`set_button`.
 
 
 .. method:: form.add_lightbutton(type, x, y, w, h, name)
 
    Add a lightbutton object to the form.  ---  Methods: :meth:`get_button`,
    :meth:`set_button`.
 
 
 .. method:: form.add_roundbutton(type, x, y, w, h, name)
 
    Add a roundbutton object to the form.  ---  Methods: :meth:`get_button`,
    :meth:`set_button`.
 
-.. % ---
-
 
 .. method:: form.add_slider(type, x, y, w, h, name)
 
    Add a slider object to the form.  ---  Methods: :meth:`set_slider_value`,
    :meth:`get_slider_value`, :meth:`set_slider_bounds`, :meth:`get_slider_bounds`,
    :meth:`set_slider_return`, :meth:`set_slider_size`,
    :meth:`set_slider_precision`, :meth:`set_slider_step`.
 
 
 .. method:: form.add_valslider(type, x, y, w, h, name)
 
    Add a valslider object to the form.  ---  Methods: :meth:`set_slider_value`,
@@ -299,34 +298,30 @@
    :meth:`set_positioner_xvalue`, :meth:`set_positioner_yvalue`,
    :meth:`set_positioner_xbounds`, :meth:`set_positioner_ybounds`,
    :meth:`get_positioner_xvalue`, :meth:`get_positioner_yvalue`,
    :meth:`get_positioner_xbounds`, :meth:`get_positioner_ybounds`.
 
 
 .. method:: form.add_counter(type, x, y, w, h, name)
 
    Add a counter object to the form.  ---  Methods: :meth:`set_counter_value`,
    :meth:`get_counter_value`, :meth:`set_counter_bounds`, :meth:`set_counter_step`,
    :meth:`set_counter_precision`, :meth:`set_counter_return`.
 
-.. % ---
-
 
 .. method:: form.add_input(type, x, y, w, h, name)
 
    Add a input object to the form.  ---  Methods: :meth:`set_input`,
    :meth:`get_input`, :meth:`set_input_color`, :meth:`set_input_return`.
 
-.. % ---
-
 
 .. method:: form.add_menu(type, x, y, w, h, name)
 
    Add a menu object to the form.  ---  Methods: :meth:`set_menu`,
    :meth:`get_menu`, :meth:`addto_menu`.
 
 
 .. method:: form.add_choice(type, x, y, w, h, name)
 
    Add a choice object to the form.  ---  Methods: :meth:`set_choice`,
    :meth:`get_choice`, :meth:`clear_choice`, :meth:`addto_choice`,
    :meth:`replace_choice`, :meth:`delete_choice`, :meth:`get_choice_text`,
@@ -336,26 +331,24 @@
 .. method:: form.add_browser(type, x, y, w, h, name)
 
    Add a browser object to the form.  ---  Methods: :meth:`set_browser_topline`,
    :meth:`clear_browser`, :meth:`add_browser_line`, :meth:`addto_browser`,
    :meth:`insert_browser_line`, :meth:`delete_browser_line`,
    :meth:`replace_browser_line`, :meth:`get_browser_line`, :meth:`load_browser`,
    :meth:`get_browser_maxline`, :meth:`select_browser_line`,
    :meth:`deselect_browser_line`, :meth:`deselect_browser`,
    :meth:`isselected_browser_line`, :meth:`get_browser`,
    :meth:`set_browser_fontsize`, :meth:`set_browser_fontstyle`,
    :meth:`set_browser_specialkey`.
 
-.. % ---
-
 
 .. method:: form.add_timer(type, x, y, w, h, name)
 
    Add a timer object to the form.  ---  Methods: :meth:`set_timer`,
    :meth:`get_timer`.
 
 Form objects have the following data attributes; see the FORMS documentation:
 
 +---------------------+-----------------+--------------------------------+
 | Name                | C Type          | Meaning                        |
 +=====================+=================+================================+
 | :attr:`window`      | int (read-only) | GL window id                   |
@@ -419,28 +412,28 @@
 
 .. method:: FORMS object.freeze_object()
 
    Freeze the object.
 
 
 .. method:: FORMS object.unfreeze_object()
 
    Unfreeze the object.
 
 FORMS objects have these data attributes; see the FORMS documentation:
 
-.. % \begin{methoddesc}[FORMS object]{handle_object}{} XXX
-.. % \end{methoddesc}
-.. % \begin{methoddesc}[FORMS object]{handle_object_direct}{} XXX
-.. % \end{methoddesc}
+.. \begin{methoddesc}[FORMS object]{handle_object}{} XXX
+.. \end{methoddesc}
+.. \begin{methoddesc}[FORMS object]{handle_object_direct}{} XXX
+.. \end{methoddesc}
 
 +--------------------+-----------------+------------------+
 | Name               | C Type          | Meaning          |
 +====================+=================+==================+
 | :attr:`objclass`   | int (read-only) | object class     |
 +--------------------+-----------------+------------------+
 | :attr:`type`       | int (read-only) | object type      |
 +--------------------+-----------------+------------------+
 | :attr:`boxtype`    | int             | box type         |
 +--------------------+-----------------+------------------+
 | :attr:`x`          | float           | x origin         |
 +--------------------+-----------------+------------------+
@@ -481,40 +474,50 @@
 | :attr:`radio`      | int (read-only) | (see FORMS docs) |
 +--------------------+-----------------+------------------+
 | :attr:`automatic`  | int (read-only) | (see FORMS docs) |
 +--------------------+-----------------+------------------+
 
 
 :mod:`FL` --- Constants used with the :mod:`fl` module
 ======================================================
 
 .. module:: FL
    :platform: IRIX
    :synopsis: Constants used with the fl module.
+   :deprecated:
+
+
+.. deprecated:: 2.6
+    The :mod:`FL` module has been deprecated for removal in Python 3.0.
 
 
 This module defines symbolic constants needed to use the built-in module
 :mod:`fl` (see above); they are equivalent to those defined in the C header file
 ``<forms.h>`` except that the name prefix ``FL_`` is omitted.  Read the module
 source for a complete list of the defined names.  Suggested use::
 
    import fl
    from FL import *
 
 
 :mod:`flp` --- Functions for loading stored FORMS designs
 =========================================================
 
 .. module:: flp
    :platform: IRIX
    :synopsis: Functions for loading stored FORMS designs.
+   :deprecated:
+
+
+.. deprecated:: 2.6
+    The :mod:`flp` module has been deprecated for removal in Python 3.0.
 
 
 This module defines functions that can read form definitions created by the
 'form designer' (:program:`fdesign`) program that comes with the FORMS library
 (see module :mod:`fl` above).
 
 For now, see the file :file:`flp.doc` in the Python library source directory for
 a description.
 
 XXX A complete description should be inserted here!
 
