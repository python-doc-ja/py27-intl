--- r262/library/compiler.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/compiler.rst	2009-10-27 23:37:48.900246000 +0900
@@ -12,29 +12,29 @@
 
 
 The Python compiler package is a tool for analyzing Python source code and
 generating Python bytecode.  The compiler contains libraries to generate an
 abstract syntax tree from Python source code and to generate Python
 :term:`bytecode` from the tree.
 
 The :mod:`compiler` package is a Python source to bytecode translator written in
 Python.  It uses the built-in parser and standard :mod:`parser` module to
 generated a concrete syntax tree.  This tree is used to generate an abstract
 syntax tree (AST) and then Python bytecode.
 
-The full functionality of the package duplicates the builtin compiler provided
+The full functionality of the package duplicates the built-in compiler provided
 with the Python interpreter.  It is intended to match its behavior almost
 exactly.  Why implement another compiler that does the same thing?  The package
 is useful for a variety of purposes.  It can be modified more easily than the
-builtin compiler.  The AST it generates is useful for analyzing Python source
+built-in compiler.  The AST it generates is useful for analyzing Python source
 code.
 
 This chapter explains how the various components of the :mod:`compiler` package
 work.  It blends reference material with a tutorial.
 
 
 The basic interface
 ===================
 
 .. module:: compiler
    :synopsis: Python code compiler written in Python.
    :deprecated:
@@ -109,25 +109,25 @@
 The :mod:`compiler.ast` module defines an abstract syntax for Python.  In the
 abstract syntax tree, each node represents a syntactic construct.  The root of
 the tree is :class:`Module` object.
 
 The abstract syntax offers a higher level interface to parsed Python source
 code.  The :mod:`parser` module and the compiler written in C for the Python
 interpreter use a concrete syntax tree.  The concrete syntax is tied closely to
 the grammar description used for the Python parser.  Instead of a single node
 for a construct, there are often several levels of nested nodes that are
 introduced by Python's precedence rules.
 
 The abstract syntax tree is created by the :mod:`compiler.transformer` module.
-The transformer relies on the builtin Python parser to generate a concrete
+The transformer relies on the built-in Python parser to generate a concrete
 syntax tree.  It generates an abstract syntax tree from the concrete tree.
 
 .. index::
    single: Stein, Greg
    single: Tutt, Bill
 
 The :mod:`transformer` module was created by Greg Stein and Bill Tutt for an
 experimental Python-to-C compiler.  The current version contains a number of
 modifications and improvements, but the basic form of the abstract syntax and of
 the transformer are due to Stein and Tutt.
 
 
