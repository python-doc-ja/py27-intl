--- r262/library/functions.rst	2009-04-06 06:11:43.798160000 +0900
+++ r266/library/functions.rst	2010-08-03 06:45:43.685855000 +0900
@@ -8,38 +8,40 @@
 available.  They are listed here in alphabetical order.
 
 
 .. function:: abs(x)
 
    Return the absolute value of a number.  The argument may be a plain or long
    integer or a floating point number.  If the argument is a complex number, its
    magnitude is returned.
 
 
 .. function:: all(iterable)
 
-   Return True if all elements of the *iterable* are true. Equivalent to::
+   Return True if all elements of the *iterable* are true (or if the iterable
+   is empty).  Equivalent to::
 
       def all(iterable):
           for element in iterable:
               if not element:
                   return False
           return True
 
    .. versionadded:: 2.5
 
 
 .. function:: any(iterable)
 
-   Return True if any element of the *iterable* is true. Equivalent to::
+   Return True if any element of the *iterable* is true.  If the iterable
+   is empty, return False.  Equivalent to::
 
       def any(iterable):
           for element in iterable:
               if element:
                   return True
           return False
 
    .. versionadded:: 2.5
 
 
 .. function:: basestring()
 
@@ -140,47 +142,47 @@
    by an :keyword:`exec` statement or evaluated by a call to :func:`eval`.
    *source* can either be a string or an AST object.  Refer to the :mod:`ast`
    module documentation for information on how to work with AST objects.
 
    The *filename* argument should give the file from which the code was read;
    pass some recognizable value if it wasn't read from a file (``'<string>'`` is
    commonly used).
 
    The *mode* argument specifies what kind of code must be compiled; it can be
    ``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if it
    consists of a single expression, or ``'single'`` if it consists of a single
    interactive statement (in the latter case, expression statements that
-   evaluate to something else than ``None`` will be printed).
+   evaluate to something other than ``None`` will be printed).
 
    The optional arguments *flags* and *dont_inherit* control which future
    statements (see :pep:`236`) affect the compilation of *source*.  If neither
    is present (or both are zero) the code is compiled with those future
    statements that are in effect in the code that is calling compile.  If the
    *flags* argument is given and *dont_inherit* is not (or is zero) then the
    future statements specified by the *flags* argument are used in addition to
    those that would be used anyway. If *dont_inherit* is a non-zero integer then
    the *flags* argument is it -- the future statements in effect around the call
    to compile are ignored.
 
    Future statements are specified by bits which can be bitwise ORed together to
    specify multiple statements.  The bitfield required to specify a given feature
    can be found as the :attr:`compiler_flag` attribute on the :class:`_Feature`
    instance in the :mod:`__future__` module.
 
    This function raises :exc:`SyntaxError` if the compiled source is invalid,
    and :exc:`TypeError` if the source contains null bytes.
 
    .. note::
 
-      When compiling a string with multi-line statements, line endings must be
+      When compiling a string with multi-line code, line endings must be
       represented by a single newline character (``'\n'``), and the input must
       be terminated by at least one newline character.  If line endings are
       represented by ``'\r\n'``, use :meth:`str.replace` to change them into
       ``'\n'``.
 
    .. versionchanged:: 2.3
       The *flags* and *dont_inherit* arguments were added.
 
    .. versionchanged:: 2.6
       Support for compiling AST objects.
 
 
@@ -280,25 +282,25 @@
    but may be 1 less than that.  In any case ``q * b + a % b`` is very close to
    *a*, if ``a % b`` is non-zero it has the same sign as *b*, and ``0 <= abs(a % b)
    < abs(b)``.
 
    .. versionchanged:: 2.3
       Using :func:`divmod` with complex numbers is deprecated.
 
 
 .. function:: enumerate(sequence[, start=0])
 
    Return an enumerate object. *sequence* must be a sequence, an
    :term:`iterator`, or some other object which supports iteration.  The
-   :meth:`next` method of the iterator returned by :func:`enumerate` returns a
+   :meth:`!next` method of the iterator returned by :func:`enumerate` returns a
    tuple containing a count (from *start* which defaults to 0) and the
    corresponding value obtained from iterating over *iterable*.
    :func:`enumerate` is useful for obtaining an indexed series: ``(0, seq[0])``,
    ``(1, seq[1])``, ``(2, seq[2])``, .... For example:
 
       >>> for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']):
       ...     print i, season
       0 Spring
       1 Summer
       2 Fall
       3 Winter
 
@@ -325,25 +327,25 @@
    propagated.  If the *locals* dictionary is omitted it defaults to the *globals*
    dictionary.  If both dictionaries are omitted, the expression is executed in the
    environment where :func:`eval` is called.  The return value is the result of
    the evaluated expression. Syntax errors are reported as exceptions.  Example:
 
       >>> x = 1
       >>> print eval('x+1')
       2
 
    This function can also be used to execute arbitrary code objects (such as
    those created by :func:`compile`).  In this case pass a code object instead
    of a string.  If the code object has been compiled with ``'exec'`` as the
-   *kind* argument, :func:`eval`\'s return value will be ``None``.
+   *mode* argument, :func:`eval`\'s return value will be ``None``.
 
    Hints: dynamic execution of statements is supported by the :keyword:`exec`
    statement.  Execution of statements from a file is supported by the
    :func:`execfile` function.  The :func:`globals` and :func:`locals` functions
    returns the current global and local dictionary, respectively, which may be
    useful to pass around for use by :func:`eval` or :func:`execfile`.
 
 
 .. function:: execfile(filename[, globals[, locals]])
 
    This function is similar to the :keyword:`exec` statement, but parses a file
    instead of a string.  It is different from the :keyword:`import` statement in
@@ -353,25 +355,25 @@
    The arguments are a file name and two optional dictionaries.  The file is parsed
    and evaluated as a sequence of Python statements (similarly to a module) using
    the *globals* and *locals* dictionaries as global and local namespace. If
    provided, *locals* can be any mapping object.
 
    .. versionchanged:: 2.4
       formerly *locals* was required to be a dictionary.
 
    If the *locals* dictionary is omitted it defaults to the *globals* dictionary.
    If both dictionaries are omitted, the expression is executed in the environment
    where :func:`execfile` is called.  The return value is ``None``.
 
-   .. warning::
+   .. note::
 
       The default *locals* act as described for function :func:`locals` below:
       modifications to the default *locals* dictionary should not be attempted.  Pass
       an explicit *locals* dictionary if you need to see effects of the code on
       *locals* after function :func:`execfile` returns.  :func:`execfile` cannot be
       used reliably to modify a function's locals.
 
 
 .. function:: file(filename[, mode[, bufsize]])
 
    Constructor function for the :class:`file` type, described further in section
    :ref:`bltin-file-objects`.  The constructor's arguments are the same as those
@@ -388,26 +390,27 @@
 
    Construct a list from those elements of *iterable* for which *function* returns
    true.  *iterable* may be either a sequence, a container which supports
    iteration, or an iterator.  If *iterable* is a string or a tuple, the result
    also has that type; otherwise it is always a list.  If *function* is ``None``,
    the identity function is assumed, that is, all elements of *iterable* that are
    false are removed.
 
    Note that ``filter(function, iterable)`` is equivalent to ``[item for item in
    iterable if function(item)]`` if function is not ``None`` and ``[item for item
    in iterable if item]`` if function is ``None``.
 
-   See :func:`itertools.filterfalse` for the complementary function that returns
-   elements of *iterable* for which *function* returns false.
+   See :func:`itertools.ifilter` and :func:`itertools.ifilterfalse` for iterator
+   versions of this function, including a variation that filters for elements
+   where the *function* returns false.
 
 
 .. function:: float([x])
 
    Convert a string or a number to floating point.  If the argument is a string, it
    must contain a possibly signed decimal or floating point number, possibly
    embedded in whitespace. The argument may also be [+|-]nan or [+|-]inf.
    Otherwise, the argument may be a plain or long integer
    or a floating point number, and a floating point number with the same value
    (within Python's floating point precision) is returned.  If no argument is
    given, returns ``0.0``.
 
@@ -499,63 +502,70 @@
    kind of object, a help page on the object is generated.
 
    This function is added to the built-in namespace by the :mod:`site` module.
 
    .. versionadded:: 2.2
 
 
 .. function:: hex(x)
 
    Convert an integer number (of any size) to a hexadecimal string. The result is a
    valid Python expression.
 
+   .. note::
+
+      To obtain a hexadecimal string representation for a float, use the
+      :meth:`float.hex` method.
+
    .. versionchanged:: 2.4
       Formerly only returned an unsigned literal.
 
 
 .. function:: id(object)
 
    Return the "identity" of an object.  This is an integer (or long integer) which
    is guaranteed to be unique and constant for this object during its lifetime.
-   Two objects with non-overlapping lifetimes may have the same :func:`id` value.
-   (Implementation note: this is the address of the object.)
+   Two objects with non-overlapping lifetimes may have the same :func:`id`
+   value.
+
+   .. impl-detail:: This is the address of the object.
 
 
 .. function:: input([prompt])
 
    Equivalent to ``eval(raw_input(prompt))``.
 
    .. warning::
 
       This function is not safe from user errors!  It expects a valid Python
       expression as input; if the input is not syntactically valid, a
       :exc:`SyntaxError` will be raised. Other exceptions may be raised if there is an
       error during evaluation.  (On the other hand, sometimes this is exactly what you
       need when writing a quick script for expert use.)
 
    If the :mod:`readline` module was loaded, then :func:`input` will use it to
    provide elaborate line editing and history features.
 
    Consider using the :func:`raw_input` function for general input from users.
 
 
-.. function:: int([x[, radix]])
+.. function:: int([x[, base]])
 
    Convert a string or number to a plain integer.  If the argument is a string,
    it must contain a possibly signed decimal number representable as a Python
-   integer, possibly embedded in whitespace.  The *radix* parameter gives the
+   integer, possibly embedded in whitespace.  The *base* parameter gives the
    base for the conversion (which is 10 by default) and may be any integer in
-   the range [2, 36], or zero.  If *radix* is zero, the proper radix is
+   the range [2, 36], or zero.  If *base* is zero, the proper radix is
    determined based on the contents of string; the interpretation is the same as
-   for integer literals.  (See :ref:`numbers`.)  If *radix* is specified and *x*
+   for integer literals.  (See :ref:`numbers`.)  If *base* is specified and *x*
    is not a string, :exc:`TypeError` is raised. Otherwise, the argument may be a
    plain or long integer or a floating point number.  Conversion of floating
    point numbers to integers truncates (towards zero).  If the argument is
    outside the integer range a long object will be returned instead.  If no
    arguments are given, returns ``0``.
 
    The integer type is described in :ref:`typesnumeric`.
 
 
 .. function:: isinstance(object, classinfo)
 
    Return true if the *object* argument is an instance of the *classinfo* argument,
@@ -584,27 +594,35 @@
 
 
 .. function:: iter(o[, sentinel])
 
    Return an :term:`iterator` object.  The first argument is interpreted very differently
    depending on the presence of the second argument. Without a second argument, *o*
    must be a collection object which supports the iteration protocol (the
    :meth:`__iter__` method), or it must support the sequence protocol (the
    :meth:`__getitem__` method with integer arguments starting at ``0``).  If it
    does not support either of those protocols, :exc:`TypeError` is raised. If the
    second argument, *sentinel*, is given, then *o* must be a callable object.  The
    iterator created in this case will call *o* with no arguments for each call to
-   its :meth:`next` method; if the value returned is equal to *sentinel*,
+   its :meth:`~iterator.next` method; if the value returned is equal to *sentinel*,
    :exc:`StopIteration` will be raised, otherwise the value will be returned.
 
+   One useful application of the second form of :func:`iter` is to read lines of
+   a file until a certain line is reached.  The following example reads a file
+   until ``"STOP"`` is reached: ::
+
+      with open("mydata.txt") as fp:
+          for line in iter(fp.readline, "STOP"):
+              process_line(line)
+
    .. versionadded:: 2.2
 
 
 .. function:: len(s)
 
    Return the length (the number of items) of an object.  The argument may be a
    sequence (string, tuple or list) or a mapping (dictionary).
 
 
 .. function:: list([iterable])
 
    Return a list whose items are the same and in the same order as *iterable*'s
@@ -613,47 +631,46 @@
    made and returned, similar to ``iterable[:]``.  For instance, ``list('abc')``
    returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` returns ``[1, 2, 3]``.  If
    no argument is given, returns a new empty list, ``[]``.
 
    :class:`list` is a mutable sequence type, as documented in
    :ref:`typesseq`. For other containers see the built in :class:`dict`,
    :class:`set`, and :class:`tuple` classes, and the :mod:`collections` module.
 
 
 .. function:: locals()
 
    Update and return a dictionary representing the current local symbol table.
+   Free variables are returned by :func:`locals` when it is called in function
+   blocks, but not in class blocks.
 
-   .. warning::
-
-      The contents of this dictionary should not be modified; changes may not affect
-      the values of local variables used by the interpreter.
+   .. note::
 
-   Free variables are returned by :func:`locals` when it is called in a function block.
-   Modifications of free variables may not affect the values used by the
-   interpreter.  Free variables are not returned in class blocks.
+      The contents of this dictionary should not be modified; changes may not
+      affect the values of local and free variables used by the interpreter.
 
 
-.. function:: long([x[, radix]])
+.. function:: long([x[, base]])
 
    Convert a string or number to a long integer.  If the argument is a string, it
    must contain a possibly signed number of arbitrary size, possibly embedded in
-   whitespace. The *radix* argument is interpreted in the same way as for
+   whitespace. The *base* argument is interpreted in the same way as for
    :func:`int`, and may only be given when *x* is a string. Otherwise, the argument
    may be a plain or long integer or a floating point number, and a long integer
    with the same value is returned.    Conversion of floating point numbers to
    integers truncates (towards zero).  If no arguments are given, returns ``0L``.
 
    The long type is described in :ref:`typesnumeric`.
 
+
 .. function:: map(function, iterable, ...)
 
    Apply *function* to every item of *iterable* and return a list of the results.
    If additional *iterable* arguments are passed, *function* must take that many
    arguments and is applied to the items from all iterables in parallel.  If one
    iterable is shorter than another it is assumed to be extended with ``None``
    items.  If *function* is ``None``, the identity function is assumed; if there
    are multiple arguments, :func:`map` returns a list consisting of tuples
    containing the corresponding items from all iterables (a kind of transpose
    operation).  The *iterable* arguments may be a sequence  or any iterable object;
    the result is always a list.
 
@@ -679,27 +696,27 @@
    the smallest of the arguments.
 
    The optional *key* argument specifies a one-argument ordering function like that
    used for :meth:`list.sort`.  The *key* argument, if supplied, must be in keyword
    form (for example, ``min(a,b,c,key=func)``).
 
    .. versionchanged:: 2.5
       Added support for the optional *key* argument.
 
 
 .. function:: next(iterator[, default])
 
-   Retrieve the next item from the *iterator* by calling its :meth:`next`
-   method.  If *default* is given, it is returned if the iterator is exhausted,
-   otherwise :exc:`StopIteration` is raised.
+   Retrieve the next item from the *iterator* by calling its
+   :meth:`~iterator.next` method.  If *default* is given, it is returned if the
+   iterator is exhausted, otherwise :exc:`StopIteration` is raised.
 
    .. versionadded:: 2.6
 
 
 .. function:: object()
 
    Return a new featureless object.  :class:`object` is a base for all new style
    classes.  It has the methods that are common to all instances of new style
    classes.
 
    .. versionadded:: 2.2
 
@@ -804,72 +821,75 @@
    argument is negative; in that case, all arguments are converted to float and a
    float result is delivered.  For example, ``10**2`` returns ``100``, but
    ``10**-2`` returns ``0.01``.  (This last feature was added in Python 2.2.  In
    Python 2.1 and before, if both arguments were of integer types and the second
    argument was negative, an exception was raised.) If the second argument is
    negative, the third argument must be omitted. If *z* is present, *x* and *y*
    must be of integer types, and *y* must be non-negative.  (This restriction was
    added in Python 2.2.  In Python 2.1 and before, floating 3-argument ``pow()``
    returned platform-dependent results depending on floating-point rounding
    accidents.)
 
 
-.. function:: print([object, ...][, sep=' '][, end='\n'][, file=sys.stdout])
+.. function:: print([object, ...][, sep=' '][, end='\\n'][, file=sys.stdout])
 
    Print *object*\(s) to the stream *file*, separated by *sep* and followed by
    *end*.  *sep*, *end* and *file*, if present, must be given as keyword
    arguments.
 
    All non-keyword arguments are converted to strings like :func:`str` does and
    written to the stream, separated by *sep* and followed by *end*.  Both *sep*
    and *end* must be strings; they can also be ``None``, which means to use the
    default values.  If no *object* is given, :func:`print` will just write
    *end*.
 
    The *file* argument must be an object with a ``write(string)`` method; if it
    is not present or ``None``, :data:`sys.stdout` will be used.
 
    .. note::
 
-      This function is not normally available as a builtin since the name
+      This function is not normally available as a built-in since the name
       ``print`` is recognized as the :keyword:`print` statement.  To disable the
       statement and use the :func:`print` function, use this future statement at
       the top of your module::
 
          from __future__ import print_function
 
    .. versionadded:: 2.6
 
 
 .. function:: property([fget[, fset[, fdel[, doc]]]])
 
    Return a property attribute for :term:`new-style class`\es (classes that
    derive from :class:`object`).
 
    *fget* is a function for getting an attribute value, likewise *fset* is a
    function for setting, and *fdel* a function for del'ing, an attribute.  Typical
-   use is to define a managed attribute x::
+   use is to define a managed attribute ``x``::
 
       class C(object):
           def __init__(self):
               self._x = None
 
           def getx(self):
               return self._x
           def setx(self, value):
               self._x = value
           def delx(self):
               del self._x
           x = property(getx, setx, delx, "I'm the 'x' property.")
 
+   If then *c* is an instance of *C*, ``c.x`` will invoke the getter,
+   ``c.x = value`` will invoke the setter and ``del c.x`` the deleter.
+
    If given, *doc* will be the docstring of the property attribute. Otherwise, the
    property will copy *fget*'s docstring (if it exists).  This makes it possible to
    create read-only properties easily using :func:`property` as a :term:`decorator`::
 
       class Parrot(object):
           def __init__(self):
               self._voltage = 100000
 
           @property
           def voltage(self):
               """Get the current voltage."""
               return self._voltage
@@ -1062,25 +1082,25 @@
 .. function:: round(x[, n])
 
    Return the floating point value *x* rounded to *n* digits after the decimal
    point.  If *n* is omitted, it defaults to zero. The result is a floating point
    number.  Values are rounded to the closest multiple of 10 to the power minus
    *n*; if two multiples are equally close, rounding is done away from 0 (so. for
    example, ``round(0.5)`` is ``1.0`` and ``round(-0.5)`` is ``-1.0``).
 
 
 .. function:: set([iterable])
    :noindex:
 
-   Return a new set, optionally with elements are taken from *iterable*.
+   Return a new set, optionally with elements taken from *iterable*.
    The set type is described in :ref:`types-set`.
 
    For other containers see the built in :class:`dict`, :class:`list`, and
    :class:`tuple` classes, and the :mod:`collections` module.
 
    .. versionadded:: 2.4
 
 
 .. function:: setattr(object, name, value)
 
    This is the counterpart of :func:`getattr`.  The arguments are an object, a
    string and an arbitrary value.  The string may name an existing attribute or a
@@ -1110,36 +1130,40 @@
 
    The optional arguments *cmp*, *key*, and *reverse* have the same meaning as
    those for the :meth:`list.sort` method (described in section
    :ref:`typesseq-mutable`).
 
    *cmp* specifies a custom comparison function of two arguments (iterable
    elements) which should return a negative, zero or positive number depending on
    whether the first argument is considered smaller than, equal to, or larger than
    the second argument: ``cmp=lambda x,y: cmp(x.lower(), y.lower())``.  The default
    value is ``None``.
 
    *key* specifies a function of one argument that is used to extract a comparison
-   key from each list element: ``key=str.lower``.  The default value is ``None``.
+   key from each list element: ``key=str.lower``.  The default value is ``None``
+   (compare the elements directly).
 
    *reverse* is a boolean value.  If set to ``True``, then the list elements are
    sorted as if each comparison were reversed.
 
    In general, the *key* and *reverse* conversion processes are much faster
    than specifying an equivalent *cmp* function.  This is because *cmp* is
    called multiple times for each list element while *key* and *reverse* touch
    each element only once.  To convert an old-style *cmp* function to a *key*
    function, see the `CmpToKey recipe in the ASPN cookbook
    <http://code.activestate.com/recipes/576653/>`_\.
 
+   For sorting examples and a brief sorting tutorial, see `Sorting HowTo
+   <http://wiki.python.org/moin/HowTo/Sorting/>`_\.
+
    .. versionadded:: 2.4
 
 
 .. function:: staticmethod(function)
 
    Return a static method for *function*.
 
    A static method does not receive an implicit first argument. To declare a static
    method, use this idiom::
 
       class C:
           @staticmethod
@@ -1332,54 +1356,55 @@
    output formatted strings use template strings or the ``%`` operator described
    in the :ref:`string-formatting` section. In addition see the
    :ref:`stringservices` section. See also :func:`str`.
 
    .. versionadded:: 2.0
 
    .. versionchanged:: 2.2
       Support for :meth:`__unicode__` added.
 
 
 .. function:: vars([object])
 
-   Without arguments, return a dictionary corresponding to the current local symbol
-   table.  With a module, class or class instance object as argument (or anything
-   else that has a :attr:`__dict__` attribute), returns a dictionary corresponding
-   to the object's symbol table.
+   Without an argument, act like :func:`locals`.
 
-   .. warning::
+   With a module, class or class instance object as argument (or anything else that
+   has a :attr:`__dict__` attribute), return that attribute.
+
+   .. note::
 
       The returned dictionary should not be modified:
       the effects on the corresponding symbol table are undefined. [#]_
 
 
 .. function:: xrange([start,] stop[, step])
 
    This function is very similar to :func:`range`, but returns an "xrange object"
    instead of a list.  This is an opaque sequence type which yields the same values
    as the corresponding list, without actually storing them all simultaneously.
    The advantage of :func:`xrange` over :func:`range` is minimal (since
    :func:`xrange` still has to create the values when asked for them) except when a
    very large range is used on a memory-starved machine or when all of the range's
    elements are never used (such as when the loop is usually terminated with
    :keyword:`break`).
 
-   .. note::
+   .. impl-detail::
 
-      :func:`xrange` is intended to be simple and fast. Implementations may impose
-      restrictions to achieve this. The C implementation of Python restricts all
-      arguments to native C longs ("short" Python integers), and also requires that
-      the number of elements fit in a native C long.  If a larger range is needed,
-      an alternate version can be crafted using the :mod:`itertools` module:
-      ``islice(count(start, step), (stop-start+step-1)//step)``.
+      :func:`xrange` is intended to be simple and fast.  Implementations may
+      impose restrictions to achieve this.  The C implementation of Python
+      restricts all arguments to native C longs ("short" Python integers), and
+      also requires that the number of elements fit in a native C long.  If a
+      larger range is needed, an alternate version can be crafted using the
+      :mod:`itertools` module: ``takewhile(lambda x: x<stop, (start+i*step
+      for i in count()))``.
 
 
 .. function:: zip([iterable, ...])
 
    This function returns a list of tuples, where the *i*-th tuple contains the
    *i*-th element from each of the argument sequences or iterables. The returned
    list is truncated in length to the length of the shortest argument sequence.
    When there are multiple arguments which are all of the same length, :func:`zip`
    is similar to :func:`map` with an initial argument of ``None``. With a single
    sequence argument, it returns a list of 1-tuples. With no arguments, it returns
    an empty list.
 
@@ -1387,48 +1412,48 @@
    makes possible an idiom for clustering a data series into n-length groups
    using ``zip(*[iter(s)]*n)``.
 
    :func:`zip` in conjunction with the ``*`` operator can be used to unzip a
    list::
 
       >>> x = [1, 2, 3]
       >>> y = [4, 5, 6]
       >>> zipped = zip(x, y)
       >>> zipped
       [(1, 4), (2, 5), (3, 6)]
       >>> x2, y2 = zip(*zipped)
-      >>> x == x2, y == y2
+      >>> x == list(x2) and y == list(y2)
       True
 
    .. versionadded:: 2.0
 
    .. versionchanged:: 2.4
       Formerly, :func:`zip` required at least one argument and ``zip()`` raised a
       :exc:`TypeError` instead of returning an empty list.
 
 
 .. function:: __import__(name[, globals[, locals[, fromlist[, level]]]])
 
    .. index::
       statement: import
       module: imp
 
    .. note::
 
       This is an advanced function that is not needed in everyday Python
       programming.
 
    This function is invoked by the :keyword:`import` statement.  It can be
-   replaced (by importing the :mod:`builtins` module and assigning to
-   ``builtins.__import__``) in order to change semantics of the
+   replaced (by importing the :mod:`__builtin__` module and assigning to
+   ``__builtin__.__import__``) in order to change semantics of the
    :keyword:`import` statement, but nowadays it is usually simpler to use import
    hooks (see :pep:`302`).  Direct use of :func:`__import__` is rare, except in
    cases where you want to import a module whose name is only known at runtime.
 
    The function imports the module *name*, potentially using the given *globals*
    and *locals* to determine how to interpret the name in a package context.
    The *fromlist* gives the names of objects or submodules that should be
    imported from the module given by *name*.  The standard implementation does
    not use its *locals* argument at all, and uses its *globals* only to
    determine the package context of the :keyword:`import` statement.
 
    *level* specifies whether to use absolute or relative imports.  The default
@@ -1457,25 +1482,25 @@
    On the other hand, the statement ``from spam.ham import eggs, sausage as
    saus`` results in ::
 
       _temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], -1)
       eggs = _temp.eggs
       saus = _temp.sausage
 
    Here, the ``spam.ham`` module is returned from :func:`__import__`.  From this
    object, the names to import are retrieved and assigned to their respective
    names.
 
    If you simply want to import a module (potentially within a package) by name,
-   you can get it from :data:`sys.modules`::
+   you can call :func:`__import__` and then look it up in :data:`sys.modules`::
 
       >>> import sys
       >>> name = 'foo.bar.baz'
       >>> __import__(name)
       <module 'foo' from ...>
       >>> baz = sys.modules[name]
       >>> baz
       <module 'foo.bar.baz' from ...>
 
    .. versionchanged:: 2.5
       The level parameter was added.
 
