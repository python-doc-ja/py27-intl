--- r262/library/simplehttpserver.rst	2008-05-27 00:01:48.904353000 +0900
+++ r266/library/simplehttpserver.rst	2010-06-17 02:39:51.629477000 +0900
@@ -72,23 +72,47 @@
       mapped to a ``404``, ``'File not found'`` error. Otherwise, the content
       type is guessed by calling the :meth:`guess_type` method, which in turn
       uses the *extensions_map* variable.
 
       A ``'Content-type:'`` header with the guessed content type is output,
       followed by a ``'Content-Length:'`` header with the file's size and a
       ``'Last-Modified:'`` header with the file's modification time.
 
       Then follows a blank line signifying the end of the headers, and then the
       contents of the file are output. If the file's MIME type starts with
       ``text/`` the file is opened in text mode; otherwise binary mode is used.
 
-      For example usage, see the implementation of the :func:`test` function.
+      The :func:`test` function in the :mod:`SimpleHTTPServer` module is an
+      example which creates a server using the
+      :class:`SimpleHTTPRequestHandler` as the Handler.
 
       .. versionadded:: 2.5
          The ``'Last-Modified'`` header.
 
 
+The :mod:`SimpleHTTPServer` module can be used the following manner in order to
+set up a very basic web server serving files relative to the current
+directory.::
+
+        import SimpleHTTPServer
+        import SocketServer
+
+        PORT = 8000
+
+        Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
+
+        httpd = SocketServer.TCPServer(("", PORT), Handler)
+
+        print "serving at port", PORT
+        httpd.serve_forever()
+
+:mod:`SimpleHTTPServer` module can also be invoked directly using the ``-m``
+switch of interpreter with a ``port number`` argument. Similar to previous
+example, this serves the files relative to the current directory.::
+
+        python -m SimpleHTTPServer 8000
+
 .. seealso::
 
    Module :mod:`BaseHTTPServer`
       Base class implementation for Web server and request handler.
 
