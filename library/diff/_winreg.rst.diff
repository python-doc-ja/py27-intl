--- rest25/library/_winreg.rst	2008-12-19 16:58:07.000000000 +0900
+++ rest262/library/_winreg.rst	2009-04-07 00:06:53.000000000 +0900
@@ -1,21 +1,25 @@
-
 :mod:`_winreg` -- Windows registry access
 =========================================
 
 .. module:: _winreg
    :platform: Windows
    :synopsis: Routines and objects for manipulating the Windows registry.
 .. sectionauthor:: Mark Hammond <MarkH@ActiveState.com>
 
+.. note::
+   The :mod:`_winreg` module has been renamed to :mod:`winreg` in Python 3.0.
+   The :term:`2to3` tool will automatically adapt imports when converting your
+   sources to 3.0.
+
 
 .. versionadded:: 2.0
 
 These functions expose the Windows registry API to Python.  Instead of using an
 integer as the registry handle, a handle object is used to ensure that the
 handles are closed correctly, even if the programmer neglects to explicitly
 close them.
 
 This module exposes a very low-level interface to the Windows registry; it is
 expected that in the future a new ``winreg``  module will be created offering a
 higher-level interface to the registry API.
 
@@ -33,174 +37,187 @@
 
 
 .. function:: ConnectRegistry(computer_name, key)
 
    Establishes a connection to a predefined registry handle on  another computer,
    and returns a :dfn:`handle object`
 
    *computer_name* is the name of the remote computer, of the  form
    ``r"\\computername"``.  If ``None``, the local computer is used.
 
    *key* is the predefined handle to connect to.
 
-   The return value is the handle of the opened key. If the function fails, an
-   :exc:`EnvironmentError` exception is  raised.
+   The return value is the handle of the opened key. If the function fails, a
+   :exc:`WindowsError` exception is  raised.
 
 
 .. function:: CreateKey(key, sub_key)
 
    Creates or opens the specified key, returning a :dfn:`handle object`
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
    *sub_key* is a string that names the key this method opens  or creates.
 
    If *key* is one of the predefined keys, *sub_key* may  be ``None``. In that
    case, the handle returned is the same key handle  passed in to the function.
 
    If the key already exists, this function opens the existing key.
 
-   The return value is the handle of the opened key. If the function fails, an
-   :exc:`EnvironmentError` exception is  raised.
+   The return value is the handle of the opened key. If the function fails, a
+   :exc:`WindowsError` exception is  raised.
 
 
 .. function:: DeleteKey(key, sub_key)
 
    Deletes the specified key.
 
    *key* is an already open key, or any one of the predefined  :const:`HKEY_\*`
    constants.
 
    *sub_key* is a string that must be a subkey of the key  identified by the *key*
    parameter.  This value must not be  ``None``, and the key may not have subkeys.
 
    *This method can not delete keys with subkeys.*
 
    If the method succeeds, the entire key, including all of its values, is removed.
-   If the method fails, an :exc:`EnvironmentError`  exception is raised.
+   If the method fails, a :exc:`WindowsError`  exception is raised.
 
 
 .. function:: DeleteValue(key, value)
 
    Removes a named value from a registry key.
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
    *value* is a string that identifies the value to remove.
 
 
 .. function:: EnumKey(key, index)
 
    Enumerates subkeys of an open registry key, returning a string.
 
    *key* is an already open key, or any one of the predefined  :const:`HKEY_\*`
    constants.
 
    *index* is an integer that identifies the index of the key to  retrieve.
 
    The function retrieves the name of one subkey each time it  is called.  It is
-   typically called repeatedly until an  :exc:`EnvironmentError` exception  is
+   typically called repeatedly until a  :exc:`WindowsError` exception  is
    raised, indicating, no more values are available.
 
 
 .. function:: EnumValue(key, index)
 
    Enumerates values of an open registry key, returning a tuple.
 
    *key* is an already open key, or any one of the predefined  :const:`HKEY_\*`
    constants.
 
    *index* is an integer that identifies the index of the value  to retrieve.
 
    The function retrieves the name of one subkey each time it is  called. It is
-   typically called repeatedly, until an  :exc:`EnvironmentError` exception is
+   typically called repeatedly, until a  :exc:`WindowsError` exception is
    raised, indicating  no more values.
 
    The result is a tuple of 3 items:
 
    +-------+--------------------------------------------+
    | Index | Meaning                                    |
    +=======+============================================+
    | ``0`` | A string that identifies the value name    |
    +-------+--------------------------------------------+
    | ``1`` | An object that holds the value data, and   |
    |       | whose type depends on the underlying       |
    |       | registry type                              |
    +-------+--------------------------------------------+
    | ``2`` | An integer that identifies the type of the |
    |       | value data                                 |
    +-------+--------------------------------------------+
 
 
+.. function:: ExpandEnvironmentStrings(unicode)
+
+   Expands environment strings %NAME% in unicode string like const:`REG_EXPAND_SZ`::
+
+      >>> ExpandEnvironmentStrings(u"%windir%")
+      u"C:\\Windows"
+
+   .. versionadded:: 2.6
+
+
 .. function:: FlushKey(key)
 
    Writes all the attributes of a key to the registry.
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
-   It is not necessary to call RegFlushKey to change a key. Registry changes are
+   It is not necessary to call :func:`FlushKey` to change a key. Registry changes are
    flushed to disk by the registry using its lazy  flusher.  Registry changes are
    also flushed to disk at system  shutdown.  Unlike :func:`CloseKey`, the
    :func:`FlushKey` method  returns only when all the data has been written to the
    registry. An application should only call :func:`FlushKey` if it requires
    absolute  certainty that registry changes are on disk.
 
-   *If you don't know whether a FlushKey() call is required, it  probably isn't.*
+   .. note::
 
+      If you don't know whether a :func:`FlushKey` call is required, it  probably
+      isn't.
 
-.. function:: RegLoadKey(key, sub_key, file_name)
+
+.. function:: LoadKey(key, sub_key, file_name)
 
    Creates a subkey under the specified key and stores registration  information
    from a specified file into that subkey.
 
    *key* is an already open key, or any of the predefined :const:`HKEY_\*`
    constants.
 
    *sub_key* is a string that identifies the sub_key to load.
 
    *file_name* is the name of the file to load registry data from. This file must
    have been created with the :func:`SaveKey` function. Under the file allocation
    table (FAT) file system, the filename may not have an extension.
 
    A call to LoadKey() fails if the calling process does not have the
    :const:`SE_RESTORE_PRIVILEGE` privilege. Note that privileges are different than
    permissions - see the Win32 documentation for more details.
 
    If *key* is a handle returned by :func:`ConnectRegistry`,  then the path
    specified in *fileName* is relative to the  remote computer.
 
    The Win32 documentation implies *key* must be in the  :const:`HKEY_USER` or
    :const:`HKEY_LOCAL_MACHINE` tree. This may or may not be true.
 
 
-.. function:: OpenKey(key, sub_key[, res\ ``= 0``][, sam\ ``= KEY_READ``])
+.. function:: OpenKey(key, sub_key[, res=0][, sam=KEY_READ])
 
    Opens the specified key, returning a :dfn:`handle object`
 
    *key* is an already open key, or any one of the predefined :const:`HKEY_\*`
    constants.
 
    *sub_key* is a string that identifies the sub_key to open.
 
    *res* is a reserved integer, and must be zero.  The default is zero.
 
    *sam* is an integer that specifies an access mask that describes  the desired
    security access for the key.  Default is :const:`KEY_READ`
 
    The result is a new handle to the specified key.
 
-   If the function fails, :exc:`EnvironmentError` is raised.
+   If the function fails, :exc:`WindowsError` is raised.
 
 
 .. function:: OpenKeyEx()
 
    The functionality of :func:`OpenKeyEx` is provided via :func:`OpenKey`, by the
    use of default arguments.
 
 
 .. function:: QueryInfoKey(key)
 
    Returns information about a key, as a tuple.
 
@@ -226,27 +243,28 @@
 
 .. function:: QueryValue(key, sub_key)
 
    Retrieves the unnamed value for a key, as a string
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
    *sub_key* is a string that holds the name of the subkey with which  the value is
    associated.  If this parameter is ``None`` or empty, the  function retrieves the
    value set by the :func:`SetValue` method  for the key identified by *key*.
 
-   Values in the registry have name, type, and data components. This  method
+   Values in the registry have name, type, and data components. This method
    retrieves the data for a key's first value that has a NULL name. But the
-   underlying API call doesn't return the type, Lame Lame Lame, DO NOT USE THIS!!!
+   underlying API call doesn't return the type, so always use
+   :func:`QueryValueEx` if possible.
 
 
 .. function:: QueryValueEx(key, value_name)
 
    Retrieves the type and data for a specified value name associated with  an open
    registry key.
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
    *value_name* is a string indicating the value to query.
 
@@ -307,25 +325,26 @@
 
    The key identified by the *key* parameter must have been  opened with
    :const:`KEY_SET_VALUE` access.
 
 
 .. function:: SetValueEx(key, value_name, reserved, type, value)
 
    Stores data in the value field of an open registry key.
 
    *key* is an already open key, or one of the predefined  :const:`HKEY_\*`
    constants.
 
-   *sub_key* is a string that names the subkey with which the  value is associated.
+   *value_name* is a string that names the subkey with which the  value is
+   associated.
 
    *type* is an integer that specifies the type of the data.   This should be one
    of the following constants defined in this module:
 
    +----------------------------------+---------------------------------------------+
    | Constant                         | Meaning                                     |
    +==================================+=============================================+
    | :const:`REG_BINARY`              | Binary data in any form.                    |
    +----------------------------------+---------------------------------------------+
    | :const:`REG_DWORD`               | A 32-bit number.                            |
    +----------------------------------+---------------------------------------------+
    | :const:`REG_DWORD_LITTLE_ENDIAN` | A 32-bit number in little-endian format.    |
@@ -386,31 +405,44 @@
 will print ``Yes`` if the handle is currently valid (has not been closed or
 detached).
 
 The object also support comparison semantics, so handle objects will compare
 true if they both reference the same underlying Windows handle value.
 
 Handle objects can be converted to an integer (e.g., using the builtin
 :func:`int` function), in which case the underlying Windows handle value is
 returned.  You can also use the  :meth:`Detach` method to return the integer
 handle, and also disconnect the Windows handle from the handle object.
 
 
-.. method:: XXX Class.Close()
+.. method:: PyHKEY.Close()
 
    Closes the underlying Windows handle.
 
    If the handle is already closed, no error is raised.
 
 
-.. method:: XXX Class.Detach()
+.. method:: PyHKEY.Detach()
 
    Detaches the Windows handle from the handle object.
 
    The result is an integer (or long on 64 bit Windows) that holds the value of the
    handle before it is detached.  If the handle is already detached or closed, this
    will return zero.
 
    After calling this function, the handle is effectively invalidated, but the
    handle is not closed.  You would call this function when  you need the
    underlying Win32 handle to exist beyond the lifetime  of the handle object.
 
+.. method:: PyHKEY.__enter__()
+            PyHKEY.__exit__(\*exc_info)
+
+   The HKEY object implements :meth:`__enter__` and :meth:`__exit__` and thus
+   supports the context protocol for the :keyword:`with` statement::
+
+      with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
+          # ... work with key ...
+
+   will automatically close *key* when control leaves the :keyword:`with` block.
+
+   .. versionadded:: 2.6
+
