--- rest25/library/fpectl.rst	2008-12-19 16:58:07.000000000 +0900
+++ rest262/library/fpectl.rst	2009-04-05 05:02:09.000000000 +0900
@@ -1,29 +1,35 @@
 
 :mod:`fpectl` --- Floating point exception control
 ==================================================
 
 .. module:: fpectl
    :platform: Unix
    :synopsis: Provide control for floating point exception handling.
 .. moduleauthor:: Lee Busby <busby1@llnl.gov>
 .. sectionauthor:: Lee Busby <busby1@llnl.gov>
 
 
+.. note::
+
+   The :mod:`fpectl` module is not built by default, and its usage is discouraged
+   and may be dangerous except in the hands of experts.  See also the section
+   :ref:`fpectl-limitations` on limitations for more details.
+
 .. index:: single: IEEE-754
 
-Most computers carry out floating point operations in conformance with the so-
-called IEEE-754 standard. On any real computer, some floating point operations
-produce results that cannot be expressed as a normal floating point value. For
-example, try ::
+Most computers carry out floating point operations in conformance with the
+so-called IEEE-754 standard. On any real computer, some floating point
+operations produce results that cannot be expressed as a normal floating point
+value. For example, try ::
 
    >>> import math
    >>> math.exp(1000)
    inf
    >>> math.exp(1000) / math.exp(1000)
    nan
 
 (The example above will work on many platforms. DEC Alpha may be one exception.)
 "Inf" is a special, non-numeric value in IEEE-754 that stands for "infinity",
 and "nan" means "not a number." Note that, other than the non-numeric results,
 nothing special happened when you asked Python to carry out those calculations.
 That is in fact the default behaviour prescribed in the IEEE-754 standard, and
@@ -77,24 +83,26 @@
    FloatingPointError: Overflow
 
    div by 0        PASS
    FloatingPointError: Division by zero
      [ more output from test elided ]
    >>> import math
    >>> math.exp(1000)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    FloatingPointError: in math_1
 
 
+.. _fpectl-limitations:
+
 Limitations and other considerations
 ------------------------------------
 
 Setting up a given processor to trap IEEE-754 floating point errors currently
 requires custom code on a per-architecture basis. You may have to modify
 :mod:`fpectl` to control your particular hardware.
 
 Conversion of an IEEE-754 exception to a Python exception requires that the
 wrapper macros ``PyFPE_START_PROTECT`` and ``PyFPE_END_PROTECT`` be inserted
 into your code in an appropriate fashion.  Python itself has been modified to
 support the :mod:`fpectl` module, but many other codes of interest to numerical
 analysts have not.
