--- r262/library/email.header.rst	2008-04-25 10:29:10.316477000 +0900
+++ r266/library/email.header.rst	2009-04-29 03:16:02.904819000 +0900
@@ -12,45 +12,45 @@
 
 Of course, as email has been deployed worldwide, it has become
 internationalized, such that language specific character sets can now be used in
 email messages.  The base standard still requires email messages to be
 transferred using only 7-bit ASCII characters, so a slew of RFCs have been
 written describing how to encode email containing non-ASCII characters into
 :rfc:`2822`\ -compliant format. These RFCs include :rfc:`2045`, :rfc:`2046`,
 :rfc:`2047`, and :rfc:`2231`. The :mod:`email` package supports these standards
 in its :mod:`email.header` and :mod:`email.charset` modules.
 
 If you want to include non-ASCII characters in your email headers, say in the
 :mailheader:`Subject` or :mailheader:`To` fields, you should use the
-:class:`Header` class and assign the field in the :class:`Message` object to an
-instance of :class:`Header` instead of using a string for the header value.
-Import the :class:`Header` class from the :mod:`email.header` module.  For
-example::
+:class:`Header` class and assign the field in the :class:`~email.message.Message`
+object to an instance of :class:`Header` instead of using a string for the header
+value.  Import the :class:`Header` class from the :mod:`email.header` module.
+For example::
 
    >>> from email.message import Message
    >>> from email.header import Header
    >>> msg = Message()
    >>> h = Header('p\xf6stal', 'iso-8859-1')
    >>> msg['Subject'] = h
    >>> print msg.as_string()
    Subject: =?iso-8859-1?q?p=F6stal?=
 
 
 
 Notice here how we wanted the :mailheader:`Subject` field to contain a non-ASCII
 character?  We did this by creating a :class:`Header` instance and passing in
 the character set that the byte string was encoded in.  When the subsequent
-:class:`Message` instance was flattened, the :mailheader:`Subject` field was
-properly :rfc:`2047` encoded.  MIME-aware mail readers would show this header
-using the embedded ISO-8859-1 character.
+:class:`~email.message.Message` instance was flattened, the :mailheader:`Subject`
+field was properly :rfc:`2047` encoded.  MIME-aware mail readers would show this
+header using the embedded ISO-8859-1 character.
 
 .. versionadded:: 2.2.2
 
 Here is the :class:`Header` class description:
 
 
 .. class:: Header([s[, charset[, maxlinelen[, header_name[, continuation_ws[, errors]]]]]])
 
    Create a MIME-compliant header that can contain strings in different character
    sets.
 
    Optional *s* is the initial header value.  If ``None`` (the default), the
@@ -74,28 +74,29 @@
 
    Optional *continuation_ws* must be :rfc:`2822`\ -compliant folding whitespace,
    and is usually either a space or a hard tab character. This character will be
    prepended to continuation lines.
 
    Optional *errors* is passed straight through to the :meth:`append` method.
 
 
    .. method:: append(s[, charset[, errors]])
 
       Append the string *s* to the MIME header.
 
-      Optional *charset*, if given, should be a :class:`Charset` instance (see
-      :mod:`email.charset`) or the name of a character set, which will be
-      converted to a :class:`Charset` instance.  A value of ``None`` (the
-      default) means that the *charset* given in the constructor is used.
+      Optional *charset*, if given, should be a :class:`~email.charset.Charset`
+      instance (see :mod:`email.charset`) or the name of a character set, which
+      will be converted to a :class:`~email.charset.Charset` instance.  A value
+      of ``None`` (the default) means that the *charset* given in the constructor
+      is used.
 
       *s* may be a byte string or a Unicode string.  If it is a byte string
       (i.e.  ``isinstance(s, str)`` is true), then *charset* is the encoding of
       that byte string, and a :exc:`UnicodeError` will be raised if the string
       cannot be decoded with that character set.
 
       If *s* is a Unicode string, then *charset* is a hint specifying the
       character set of the characters in the string.  In this case, when
       producing an :rfc:`2822`\ -compliant header using :rfc:`2047` rules, the
       Unicode string will be encoded using the following charsets in order:
       ``us-ascii``, the *charset* hint, ``utf-8``.  The first character set to
       not provoke a :exc:`UnicodeError` is used.
