--- r262/library/symtable.rst	2008-08-20 10:42:01.960504000 +0900
+++ r266/library/symtable.rst	2010-05-21 07:27:10.510563000 +0900
@@ -1,20 +1,20 @@
 :mod:`symtable` --- Access to the compiler's symbol tables
 ==========================================================
 
 .. module:: symtable
    :synopsis: Interface to the compiler's internal symbol tables.
 
 .. moduleauthor:: Jeremy Hylton <jeremy@alum.mit.edu>
-.. sectionauthor:: Benjamin Peterson
+.. sectionauthor:: Benjamin Peterson <benjamin@python.org>
 
 
 Symbol tables are generated by the compiler from AST just before bytecode is
 generated.  The symbol table is responsible for calculating the scope of every
 identifier in the code.  :mod:`symtable` provides an interface to examine these
 tables.
 
 
 Generating Symbol Tables
 ------------------------
 
 .. function:: symtable(code, filename, compile_type)
@@ -58,25 +58,25 @@
 
       Return ``True`` if the block is a nested class or function.
 
    .. method:: has_children()
 
       Return ``True`` if the block has nested namespaces within it.  These can
       be obtained with :meth:`get_children`.
 
    .. method:: has_exec()
 
       Return ``True`` if the block uses ``exec``.
 
-   .. method:: has_import_start()
+   .. method:: has_import_star()
 
       Return ``True`` if the block uses a starred from-import.
 
    .. method:: get_identifiers()
 
       Return a list of names of symbols in this table.
 
    .. method:: lookup(name)
 
       Lookup *name* in the table and return a :class:`Symbol` instance.
 
    .. method:: get_symbols()
@@ -135,44 +135,54 @@
    .. method:: is_imported()
 
       Return ``True`` if the symbol is created from an import statement.
 
    .. method:: is_parameter()
 
       Return ``True`` if the symbol is a parameter.
 
    .. method:: is_global()
 
       Return ``True`` if the symbol is global.
 
+   .. method:: is_declared_global()
+
+      Return ``True`` if the symbol is declared global with a global statement.
+
    .. method:: is_local()
 
       Return ``True`` if the symbol is local to its block.
 
    .. method:: is_free()
 
       Return ``True`` if the symbol is referenced in its block, but not assigned
       to.
 
    .. method:: is_assigned()
 
       Return ``True`` if the symbol is assigned to in its block.
 
    .. method:: is_namespace()
 
       Return ``True`` if name binding introduces new namespace.
 
       If the name is used as the target of a function or class statement, this
       will be true.
 
+      For example::
+
+         >>> table = symtable.symtable("def some_func(): pass", "string", "exec")
+         >>> table.lookup("some_func").is_namespace()
+         True
+
       Note that a single name can be bound to multiple objects.  If the result
       is ``True``, the name may also be bound to other objects, like an int or
       list, that does not introduce a new namespace.
 
    .. method:: get_namespaces()
 
       Return a list of namespaces bound to this name.
 
    .. method:: get_namespace()
 
       Return the namespace bound to this name.  If more than one namespace is
       bound, a :exc:`ValueError` is raised.
