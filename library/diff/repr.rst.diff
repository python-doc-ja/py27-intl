--- r262/library/repr.rst	2009-02-02 17:27:16.400413000 +0900
+++ r266/library/repr.rst	2009-10-27 23:36:50.397095000 +0900
@@ -18,34 +18,34 @@
 This module provides a class, an instance, and a function:
 
 
 .. class:: Repr()
 
    Class which provides formatting services useful in implementing functions
    similar to the built-in :func:`repr`; size limits for  different object types
    are added to avoid the generation of representations which are excessively long.
 
 
 .. data:: aRepr
 
-   This is an instance of :class:`Repr` which is used to provide the :func:`repr`
+   This is an instance of :class:`Repr` which is used to provide the :func:`.repr`
    function described below.  Changing the attributes of this object will affect
-   the size limits used by :func:`repr` and the Python debugger.
+   the size limits used by :func:`.repr` and the Python debugger.
 
 
 .. function:: repr(obj)
 
-   This is the :meth:`repr` method of ``aRepr``.  It returns a string similar to
-   that returned by the built-in function of the same  name, but with limits on
-   most sizes.
+   This is the :meth:`~Repr.repr` method of ``aRepr``.  It returns a string
+   similar to that returned by the built-in function of the same name, but with
+   limits on most sizes.
 
 
 .. _repr-objects:
 
 Repr Objects
 ------------
 
 :class:`Repr` instances provide several members which can be used to provide
 size limits for the representations of different object types,  and methods
 which format specific object types.
 
 
@@ -90,25 +90,25 @@
    formatting method is available on the :class:`Repr` object. It is applied in a
    similar manner as :attr:`maxstring`.  The default is ``20``.
 
 
 .. method:: Repr.repr(obj)
 
    The equivalent to the built-in :func:`repr` that uses the formatting imposed by
    the instance.
 
 
 .. method:: Repr.repr1(obj, level)
 
-   Recursive implementation used by :meth:`repr`.  This uses the type of *obj* to
+   Recursive implementation used by :meth:`.repr`.  This uses the type of *obj* to
    determine which formatting method to call, passing it *obj* and *level*.  The
    type-specific methods should call :meth:`repr1` to perform recursive formatting,
    with ``level - 1`` for the value of *level* in the recursive  call.
 
 
 .. method:: Repr.repr_TYPE(obj, level)
    :noindex:
 
    Formatting methods for specific types are implemented as methods with a name
    based on the type name.  In the method name, **TYPE** is replaced by
    ``string.join(string.split(type(obj).__name__, '_'))``. Dispatch to these
    methods is handled by :meth:`repr1`. Type-specific methods which need to
