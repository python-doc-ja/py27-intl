--- r262/library/stdtypes.rst	2009-04-06 06:48:06.719229000 +0900
+++ r266/library/stdtypes.rst	2010-08-10 07:05:50.193213000 +0900
@@ -120,25 +120,35 @@
    argument if the first one is :const:`True`.
 
 (3)
    ``not`` has a lower priority than non-Boolean operators, so ``not a == b`` is
    interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error.
 
 
 .. _stdcomparisons:
 
 Comparisons
 ===========
 
-.. index:: pair: chaining; comparisons
+.. index::
+   pair: chaining; comparisons
+   pair: operator; comparison
+   operator: ==
+   operator: <
+   operator: <=
+   operator: >
+   operator: >=
+   operator: !=
+   operator: is
+   operator: is not
 
 Comparison operations are supported by all objects.  They all have the same
 priority (which is higher than that of the Boolean operations). Comparisons can
 be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x < y and
 y <= z``, except that *y* is evaluated only once (but in both cases *z* is not
 evaluated at all when ``x < y`` is found to be false).
 
 This table summarizes the comparison operations:
 
 +------------+-------------------------+-------+
 | Operation  | Meaning                 | Notes |
 +============+=========================+=======+
@@ -150,35 +160,24 @@
 +------------+-------------------------+-------+
 | ``>=``     | greater than or equal   |       |
 +------------+-------------------------+-------+
 | ``==``     | equal                   |       |
 +------------+-------------------------+-------+
 | ``!=``     | not equal               | \(1)  |
 +------------+-------------------------+-------+
 | ``is``     | object identity         |       |
 +------------+-------------------------+-------+
 | ``is not`` | negated object identity |       |
 +------------+-------------------------+-------+
 
-.. index::
-   pair: operator; comparison
-   operator: ==
-   operator: <
-   operator: <=
-   operator: >
-   operator: >=
-   operator: !=
-   operator: is
-   operator: is not
-
 Notes:
 
 (1)
     ``!=`` can also be written ``<>``, but this is an obsolete usage
     kept for backwards compatibility only. New code should always use
     ``!=``.
 
 .. index::
    pair: object; numeric
    pair: objects; comparing
 
 Objects of different types, except different numeric types and different string
@@ -187,27 +186,29 @@
 Furthermore, some types (for example, file objects) support only a degenerate
 notion of comparison where any two objects of that type are unequal.  Again,
 such objects are ordered arbitrarily but consistently. The ``<``, ``<=``, ``>``
 and ``>=`` operators will raise a :exc:`TypeError` exception when any operand is
 a complex number.
 
 .. index:: single: __cmp__() (instance method)
 
 Instances of a class normally compare as non-equal unless the class defines the
 :meth:`__cmp__` method.  Refer to :ref:`customization`) for information on the
 use of this method to effect object comparisons.
 
-**Implementation note:** Objects of different types except numbers are ordered
-by their type names; objects of the same types that don't support proper
-comparison are ordered by their address.
+.. impl-detail::
+
+   Objects of different types except numbers are ordered by their type names;
+   objects of the same types that don't support proper comparison are ordered by
+   their address.
 
 .. index::
    operator: in
    operator: not in
 
 Two more operations with the same syntactic priority, ``in`` and ``not in``, are
 supported only by sequence types (below).
 
 
 .. _typesnumeric:
 
 Numeric Types --- :class:`int`, :class:`float`, :class:`long`, :class:`complex`
@@ -253,34 +254,41 @@
 is preferred because ``1l`` looks too much like eleven!).  Numeric literals
 containing a decimal point or an exponent sign yield floating point numbers.
 Appending ``'j'`` or ``'J'`` to a numeric literal yields a complex number with a
 zero real part. A complex numeric literal is the sum of a real and an imaginary
 part.
 
 .. index::
    single: arithmetic
    builtin: int
    builtin: long
    builtin: float
    builtin: complex
+   operator: +
+   operator: -
+   operator: *
+   operator: /
+   operator: //
+   operator: %
+   operator: **
 
 Python fully supports mixed arithmetic: when a binary arithmetic operator has
 operands of different numeric types, the operand with the "narrower" type is
 widened to that of the other, where plain integer is narrower than long integer
 is narrower than floating point is narrower than complex. Comparisons between
 numbers of mixed type use the same rule. [#]_ The constructors :func:`int`,
 :func:`long`, :func:`float`, and :func:`complex` can be used to produce numbers
 of a specific type.
 
-All builtin numeric types support the following operations. See
+All built-in numeric types support the following operations. See
 :ref:`power` and later sections for the operators' priorities.
 
 +--------------------+---------------------------------+--------+
 | Operation          | Result                          | Notes  |
 +====================+=================================+========+
 | ``x + y``          | sum of *x* and *y*              |        |
 +--------------------+---------------------------------+--------+
 | ``x - y``          | difference of *x* and *y*       |        |
 +--------------------+---------------------------------+--------+
 | ``x * y``          | product of *x* and *y*          |        |
 +--------------------+---------------------------------+--------+
 | ``x / y``          | quotient of *x* and *y*         | \(1)   |
@@ -385,25 +393,33 @@
 +--------------------+------------------------------------+--------+
 | ``math.ceil(x)``   | the least integral float >= *x*    |        |
 +--------------------+------------------------------------+--------+
 
 .. XXXJH exceptions: overflow (when? what operations?) zerodivision
 
 
 .. _bitstring-ops:
 
 Bit-string Operations on Integer Types
 --------------------------------------
 
-.. _bit-string-operations:
+.. index::
+   triple: operations on; integer; types
+   pair: bit-string; operations
+   pair: shifting; operations
+   pair: masking; operations
+   operator: ^
+   operator: &
+   operator: <<
+   operator: >>
 
 Plain and long integer types support additional operations that make sense only
 for bit-strings.  Negative numbers are treated as their 2's complement value
 (for long integers, this assumes a sufficiently large number of bits that no
 overflow occurs during the operation).
 
 The priorities of the binary bitwise operations are all lower than the numeric
 operations and higher than the comparisons; the unary operation ``~`` has the
 same priority as the other unary numeric operations (``+`` and ``-``).
 
 This table lists the bit-string operations sorted in ascending priority:
 
@@ -417,30 +433,24 @@
 |            | *x* and *y*                    |          |
 +------------+--------------------------------+----------+
 | ``x & y``  | bitwise :dfn:`and` of *x* and  |          |
 |            | *y*                            |          |
 +------------+--------------------------------+----------+
 | ``x << n`` | *x* shifted left by *n* bits   | (1)(2)   |
 +------------+--------------------------------+----------+
 | ``x >> n`` | *x* shifted right by *n* bits  | (1)(3)   |
 +------------+--------------------------------+----------+
 | ``~x``     | the bits of *x* inverted       |          |
 +------------+--------------------------------+----------+
 
-.. index::
-   triple: operations on; integer; types
-   pair: bit-string; operations
-   pair: shifting; operations
-   pair: masking; operations
-
 Notes:
 
 (1)
    Negative shift counts are illegal and cause a :exc:`ValueError` to be raised.
 
 (2)
    A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)``.  A
    long integer is returned if the result exceeds the range of plain integers.
 
 (3)
    A right shift by *n* bits is equivalent to division by ``pow(2, n)``.
 
@@ -579,28 +589,36 @@
 
 Python defines several iterator objects to support iteration over general and
 specific sequence types, dictionaries, and other more specialized forms.  The
 specific types are not important beyond their implementation of the iterator
 protocol.
 
 The intention of the protocol is that once an iterator's :meth:`next` method
 raises :exc:`StopIteration`, it will continue to do so on subsequent calls.
 Implementations that do not obey this property are deemed broken.  (This
 constraint was added in Python 2.3; in Python 2.2, various iterators are broken
 according to this rule.)
 
+
+.. _generator-types:
+
+Generator Types
+---------------
+
 Python's :term:`generator`\s provide a convenient way to implement the iterator
 protocol.  If a container object's :meth:`__iter__` method is implemented as a
 generator, it will automatically return an iterator object (technically, a
-generator object) supplying the :meth:`__iter__` and :meth:`next` methods.
+generator object) supplying the :meth:`__iter__` and :meth:`next` methods.  More
+information about generators can be found in :ref:`the documentation for the
+yield expression <yieldexpr>`.
 
 
 .. _typesseq:
 
 Sequence Types --- :class:`str`, :class:`unicode`, :class:`list`, :class:`tuple`, :class:`buffer`, :class:`xrange`
 ==================================================================================================================
 
 There are six sequence types: strings, Unicode strings, lists, tuples, buffers,
 and xrange objects.
 
 For other containers see the built in :class:`dict` and :class:`set` classes,
 and the :mod:`collections` module.
@@ -619,25 +637,25 @@
 ``"frobozz"``.  See :ref:`strings` for more about string literals.
 Unicode strings are much like strings, but are specified in the syntax
 using a preceding ``'u'`` character: ``u'abc'``, ``u"def"``. In addition
 to the functionality described here, there are also string-specific
 methods described in the :ref:`string-methods` section. Lists are
 constructed with square brackets, separating items with commas: ``[a, b, c]``.
 Tuples are constructed by the comma operator (not within square
 brackets), with or without enclosing parentheses, but an empty tuple
 must have the enclosing parentheses, such as ``a, b, c`` or ``()``.  A
 single item tuple must have a trailing comma, such as ``(d,)``.
 
 Buffer objects are not directly supported by Python syntax, but can be created
-by calling the builtin function :func:`buffer`.  They don't support
+by calling the built-in function :func:`buffer`.  They don't support
 concatenation or repetition.
 
 Objects of type xrange are similar to buffers in that there is no specific syntax to
 create them, but they are created using the :func:`xrange` function.  They don't
 support slicing, concatenation or repetition, and using ``in``, ``not in``,
 :func:`min` or :func:`max` on them is inefficient.
 
 Most sequence types support the following operations.  The ``in`` and ``not in``
 operations have the same priorities as the comparison operations.  The ``+`` and
 ``*`` operations have the same priority as the corresponding numeric operations.
 [#]_ Additional methods are provided for :ref:`typesseq-mutable`.
 
@@ -740,55 +758,58 @@
    empty.
 
 (5)
    The slice of *s* from *i* to *j* with step *k* is defined as the sequence of
    items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other words,
    the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, stopping when
    *j* is reached (but never including *j*).  If *i* or *j* is greater than
    ``len(s)``, use ``len(s)``.  If *i* or *j* are omitted or ``None``, they become
    "end" values (which end depends on the sign of *k*).  Note, *k* cannot be zero.
    If *k* is ``None``, it is treated like ``1``.
 
 (6)
-   If *s* and *t* are both strings, some Python implementations such as CPython can
-   usually perform an in-place optimization for assignments of the form ``s=s+t``
-   or ``s+=t``.  When applicable, this optimization makes quadratic run-time much
-   less likely.  This optimization is both version and implementation dependent.
-   For performance sensitive code, it is preferable to use the :meth:`str.join`
-   method which assures consistent linear concatenation performance across versions
-   and implementations.
+   .. impl-detail::
+
+      If *s* and *t* are both strings, some Python implementations such as
+      CPython can usually perform an in-place optimization for assignments of
+      the form ``s = s + t`` or ``s += t``.  When applicable, this optimization
+      makes quadratic run-time much less likely.  This optimization is both
+      version and implementation dependent.  For performance sensitive code, it
+      is preferable to use the :meth:`str.join` method which assures consistent
+      linear concatenation performance across versions and implementations.
 
    .. versionchanged:: 2.4
       Formerly, string concatenation never occurred in-place.
 
 
 .. _string-methods:
 
 String Methods
 --------------
 
 .. index:: pair: string; methods
 
 Below are listed the string methods which both 8-bit strings and Unicode objects
 support. Note that none of these methods take keyword arguments.
 
 In addition, Python's strings support the sequence type methods
 described in the :ref:`typesseq` section. To output formatted strings
 use template strings or the ``%`` operator described in the
 :ref:`string-formatting` section. Also, see the :mod:`re` module for
 string functions based on regular expressions.
 
 .. method:: str.capitalize()
 
-   Return a copy of the string with only its first character capitalized.
+   Return a copy of the string with its first character capitalized and the
+   rest lowercased.
 
    For 8-bit strings, this method is locale-dependent.
 
 
 .. method:: str.center(width[, fillchar])
 
    Return centered in a string of length *width*. Padding is done using the
    specified *fillchar* (default is a space).
 
    .. versionchanged:: 2.4
       Support for the *fillchar* argument.
 
@@ -846,38 +867,38 @@
 
 .. method:: str.expandtabs([tabsize])
 
    Return a copy of the string where all tab characters are replaced by one or
    more spaces, depending on the current column and the given tab size.  The
    column number is reset to zero after each newline occurring in the string.
    If *tabsize* is not given, a tab size of ``8`` characters is assumed.  This
    doesn't understand other non-printing characters or escape sequences.
 
 
 .. method:: str.find(sub[, start[, end]])
 
-   Return the lowest index in the string where substring *sub* is found, such that
-   *sub* is contained in the range [*start*, *end*].  Optional arguments *start*
-   and *end* are interpreted as in slice notation.  Return ``-1`` if *sub* is not
-   found.
-
+   Return the lowest index in the string where substring *sub* is found, such
+   that *sub* is contained in the slice ``s[start:end]``.  Optional arguments
+   *start* and *end* are interpreted as in slice notation.  Return ``-1`` if
+   *sub* is not found.
 
-.. method:: str.format(format_string, *args, **kwargs)
 
-   Perform a string formatting operation.  The *format_string* argument can
-   contain literal text or replacement fields delimited by braces ``{}``.  Each
-   replacement field contains either the numeric index of a positional argument,
-   or the name of a keyword argument.  Returns a copy of *format_string* where
-   each replacement field is replaced with the string value of the corresponding
-   argument.
+.. method:: str.format(*args, **kwargs)
+
+   Perform a string formatting operation.  The string on which this method is
+   called can contain literal text or replacement fields delimited by braces
+   ``{}``.  Each replacement field contains either the numeric index of a
+   positional argument, or the name of a keyword argument.  Returns a copy of
+   the string where each replacement field is replaced with the string value of
+   the corresponding argument.
 
       >>> "The sum of 1 + 2 is {0}".format(1+2)
       'The sum of 1 + 2 is 3'
 
    See :ref:`formatstrings` for a description of the various formatting options
    that can be specified in format strings.
 
    This method of string formatting is the new standard in Python 3.0, and
    should be preferred to the ``%`` formatting described in
    :ref:`string-formatting` in new code.
 
    .. versionadded:: 2.6
@@ -936,28 +957,29 @@
 
    For 8-bit strings, this method is locale-dependent.
 
 
 .. method:: str.isupper()
 
    Return true if all cased characters in the string are uppercase and there is at
    least one cased character, false otherwise.
 
    For 8-bit strings, this method is locale-dependent.
 
 
-.. method:: str.join(seq)
+.. method:: str.join(iterable)
 
-   Return a string which is the concatenation of the strings in the sequence *seq*.
-   The separator between elements is the string providing this method.
+   Return a string which is the concatenation of the strings in the
+   :term:`iterable` *iterable*.  The separator between elements is the string
+   providing this method.
 
 
 .. method:: str.ljust(width[, fillchar])
 
    Return the string left justified in a string of length *width*. Padding is done
    using the specified *fillchar* (default is a space).  The original string is
    returned if *width* is less than ``len(s)``.
 
    .. versionchanged:: 2.4
       Support for the *fillchar* argument.
 
 
@@ -994,27 +1016,27 @@
    .. versionadded:: 2.5
 
 
 .. method:: str.replace(old, new[, count])
 
    Return a copy of the string with all occurrences of substring *old* replaced by
    *new*.  If the optional argument *count* is given, only the first *count*
    occurrences are replaced.
 
 
 .. method:: str.rfind(sub [,start [,end]])
 
-   Return the highest index in the string where substring *sub* is found, such that
-   *sub* is contained within s[start,end].  Optional arguments *start* and *end*
-   are interpreted as in slice notation.  Return ``-1`` on failure.
+   Return the highest index in the string where substring *sub* is found, such
+   that *sub* is contained within ``s[start:end]``.  Optional arguments *start*
+   and *end* are interpreted as in slice notation.  Return ``-1`` on failure.
 
 
 .. method:: str.rindex(sub[, start[, end]])
 
    Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is not
    found.
 
 
 .. method:: str.rjust(width[, fillchar])
 
    Return the string right justified in a string of length *width*. Padding is done
    using the specified *fillchar* (default is a space). The original string is
@@ -1122,40 +1144,60 @@
 
 
 .. method:: str.swapcase()
 
    Return a copy of the string with uppercase characters converted to lowercase and
    vice versa.
 
    For 8-bit strings, this method is locale-dependent.
 
 
 .. method:: str.title()
 
-   Return a titlecased version of the string: words start with uppercase
-   characters, all remaining cased characters are lowercase.
+   Return a titlecased version of the string where words start with an uppercase
+   character and the remaining characters are lowercase.
+
+   The algorithm uses a simple language-independent definition of a word as
+   groups of consecutive letters.  The definition works in many contexts but
+   it means that apostrophes in contractions and possessives form word
+   boundaries, which may not be the desired result::
+
+        >>> "they're bill's friends from the UK".title()
+        "They'Re Bill'S Friends From The Uk"
+
+   A workaround for apostrophes can be constructed using regular expressions::
+
+        >>> import re
+        >>> def titlecase(s):
+                return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
+                              lambda mo: mo.group(0)[0].upper() +
+                                         mo.group(0)[1:].lower(),
+                              s)
+
+        >>> titlecase("they're bill's friends.")
+        "They're Bill's Friends."
 
    For 8-bit strings, this method is locale-dependent.
 
 
 .. method:: str.translate(table[, deletechars])
 
    Return a copy of the string where all characters occurring in the optional
    argument *deletechars* are removed, and the remaining characters have been
    mapped through the given translation table, which must be a string of length
    256.
 
-   You can use the :func:`maketrans` helper function in the :mod:`string` module to
-   create a translation table. For string objects, set the *table* argument to
-   ``None`` for translations that only delete characters:
+   You can use the :func:`~string.maketrans` helper function in the :mod:`string`
+   module to create a translation table. For string objects, set the *table*
+   argument to ``None`` for translations that only delete characters:
 
       >>> 'read this short text'.translate(None, 'aeiou')
       'rd ths shrt txt'
 
    .. versionadded:: 2.6
       Support for a ``None`` *table* argument.
 
    For Unicode objects, the :meth:`translate` method does not accept the optional
    *deletechars* argument.  Instead, it returns a copy of the *s* where all
    characters have been mapped through the given translation table which must be a
    mapping of Unicode ordinals to Unicode ordinals, Unicode strings or ``None``.
    Unmapped characters are left untouched. Characters mapped to ``None`` are
@@ -1312,28 +1354,28 @@
 +------------+-----------------------------------------------------+-------+
 | ``'g'``    | Floating point format. Uses lowercase exponential   | \(4)  |
 |            | format if exponent is less than -4 or not less than |       |
 |            | precision, decimal format otherwise.                |       |
 +------------+-----------------------------------------------------+-------+
 | ``'G'``    | Floating point format. Uses uppercase exponential   | \(4)  |
 |            | format if exponent is less than -4 or not less than |       |
 |            | precision, decimal format otherwise.                |       |
 +------------+-----------------------------------------------------+-------+
 | ``'c'``    | Single character (accepts integer or single         |       |
 |            | character string).                                  |       |
 +------------+-----------------------------------------------------+-------+
-| ``'r'``    | String (converts any python object using            | \(5)  |
+| ``'r'``    | String (converts any Python object using            | \(5)  |
 |            | :func:`repr`).                                      |       |
 +------------+-----------------------------------------------------+-------+
-| ``'s'``    | String (converts any python object using            | \(6)  |
+| ``'s'``    | String (converts any Python object using            | \(6)  |
 |            | :func:`str`).                                       |       |
 +------------+-----------------------------------------------------+-------+
 | ``'%'``    | No argument is converted, results in a ``'%'``      |       |
 |            | character in the result.                            |       |
 +------------+-----------------------------------------------------+-------+
 
 Notes:
 
 (1)
    The alternate form causes a leading zero (``'0'``) to be inserted between
    left-hand padding and the formatting of the number if the leading character
    of the result is not already a zero.
@@ -1548,53 +1590,56 @@
       Support for ``None`` as an equivalent to omitting *cmp* was added.
 
    .. versionchanged:: 2.4
       Support for *key* and *reverse* was added.
 
 (9)
    Starting with Python 2.3, the :meth:`sort` method is guaranteed to be stable.  A
    sort is stable if it guarantees not to change the relative order of elements
    that compare equal --- this is helpful for sorting in multiple passes (for
    example, sort by department, then by salary grade).
 
 (10)
-   While a list is being sorted, the effect of attempting to mutate, or even
-   inspect, the list is undefined.  The C implementation of Python 2.3 and newer
-   makes the list appear empty for the duration, and raises :exc:`ValueError` if it
-   can detect that the list has been mutated during a sort.
+   .. impl-detail::
+
+      While a list is being sorted, the effect of attempting to mutate, or even
+      inspect, the list is undefined.  The C implementation of Python 2.3 and
+      newer makes the list appear empty for the duration, and raises
+      :exc:`ValueError` if it can detect that the list has been mutated during a
+      sort.
 
 
 .. _types-set:
 
 Set Types --- :class:`set`, :class:`frozenset`
 ==============================================
 
 .. index:: object: set
 
 A :dfn:`set` object is an unordered collection of distinct :term:`hashable` objects.
 Common uses include membership testing, removing duplicates from a sequence, and
 computing mathematical operations such as intersection, union, difference, and
 symmetric difference.
 (For other containers see the built in :class:`dict`, :class:`list`,
 and :class:`tuple` classes, and the :mod:`collections` module.)
 
 
 .. versionadded:: 2.4
 
 Like other collections, sets support ``x in set``, ``len(set)``, and ``for x in
 set``.  Being an unordered collection, sets do not record element position or
 order of insertion.  Accordingly, sets do not support indexing, slicing, or
 other sequence-like behavior.
 
-There are currently two builtin set types, :class:`set` and :class:`frozenset`.
+There are currently two built-in set types, :class:`set` and :class:`frozenset`.
 The :class:`set` type is mutable --- the contents can be changed using methods
 like :meth:`add` and :meth:`remove`.  Since it is mutable, it has no hash value
 and cannot be used as either a dictionary key or as an element of another set.
 The :class:`frozenset` type is immutable and :term:`hashable` --- its contents cannot be
 altered after it is created; it can therefore be used as a dictionary key or as
 an element of another set.
 
 The constructors for both classes work the same:
 
 .. class:: set([iterable])
            frozenset([iterable])
 
@@ -1709,33 +1754,33 @@
    Set elements, like dictionary keys, must be :term:`hashable`.
 
    Binary operations that mix :class:`set` instances with :class:`frozenset`
    return the type of the first operand.  For example: ``frozenset('ab') |
    set('bc')`` returns an instance of :class:`frozenset`.
 
    The following table lists operations available for :class:`set` that do not
    apply to immutable instances of :class:`frozenset`:
 
    .. method:: update(other, ...)
                set |= other | ...
 
-      Update the set, adding elements from *other*.
+      Update the set, adding elements from all others.
 
       .. versionchanged:: 2.6
          Accepts multiple input iterables.
 
    .. method:: intersection_update(other, ...)
                set &= other & ...
 
-      Update the set, keeping only elements found in it and *other*.
+      Update the set, keeping only elements found in it and all others.
 
       .. versionchanged:: 2.6
          Accepts multiple input iterables.
 
    .. method:: difference_update(other, ...)
                set -= other | ...
 
       Update the set, removing elements found in others.
 
       .. versionchanged:: 2.6
          Accepts multiple input iterables.
 
@@ -1925,66 +1970,68 @@
       If *default* is not given, it defaults to ``None``, so that this method
       never raises a :exc:`KeyError`.
 
    .. method:: has_key(key)
 
       Test for the presence of *key* in the dictionary.  :meth:`has_key` is
       deprecated in favor of ``key in d``.
 
    .. method:: items()
 
       Return a copy of the dictionary's list of ``(key, value)`` pairs.
 
-      .. note::
+      .. impl-detail::
 
          Keys and values are listed in an arbitrary order which is non-random,
          varies across Python implementations, and depends on the dictionary's
-         history of insertions and deletions. If :meth:`items`, :meth:`keys`,
-         :meth:`values`, :meth:`iteritems`, :meth:`iterkeys`, and
-         :meth:`itervalues` are called with no intervening modifications to the
-         dictionary, the lists will directly correspond.  This allows the
-         creation of ``(value, key)`` pairs using :func:`zip`: ``pairs =
-         zip(d.values(), d.keys())``.  The same relationship holds for the
-         :meth:`iterkeys` and :meth:`itervalues` methods: ``pairs =
-         zip(d.itervalues(), d.iterkeys())`` provides the same value for
-         ``pairs``. Another way to create the same list is ``pairs = [(v, k) for
-         (k, v) in d.iteritems()]``.
+         history of insertions and deletions.
+
+      If :meth:`items`, :meth:`keys`, :meth:`values`, :meth:`iteritems`,
+      :meth:`iterkeys`, and :meth:`itervalues` are called with no intervening
+      modifications to the dictionary, the lists will directly correspond.  This
+      allows the creation of ``(value, key)`` pairs using :func:`zip`: ``pairs =
+      zip(d.values(), d.keys())``.  The same relationship holds for the
+      :meth:`iterkeys` and :meth:`itervalues` methods: ``pairs =
+      zip(d.itervalues(), d.iterkeys())`` provides the same value for
+      ``pairs``. Another way to create the same list is ``pairs = [(v, k) for
+      (k, v) in d.iteritems()]``.
 
    .. method:: iteritems()
 
       Return an iterator over the dictionary's ``(key, value)`` pairs.  See the
       note for :meth:`dict.items`.
 
       Using :meth:`iteritems` while adding or deleting entries in the dictionary
-      will raise a :exc:`RuntimeError`.
+      may raise a :exc:`RuntimeError` or fail to iterate over all entries.
 
       .. versionadded:: 2.2
 
    .. method:: iterkeys()
 
       Return an iterator over the dictionary's keys.  See the note for
       :meth:`dict.items`.
 
       Using :meth:`iterkeys` while adding or deleting entries in the dictionary
-      will raise a :exc:`RuntimeError`.
+      may raise a :exc:`RuntimeError` or fail to iterate over all entries.
 
       .. versionadded:: 2.2
 
    .. method:: itervalues()
 
       Return an iterator over the dictionary's values.  See the note for
       :meth:`dict.items`.
 
       Using :meth:`itervalues` while adding or deleting entries in the
-      dictionary will raise a :exc:`RuntimeError`.
+      dictionary may raise a :exc:`RuntimeError` or fail to iterate over all
+      entries.
 
       .. versionadded:: 2.2
 
    .. method:: keys()
 
       Return a copy of the dictionary's list of keys.  See the note for
       :meth:`dict.items`.
 
    .. method:: pop(key[, default])
 
       If *key* is in the dictionary, remove it and return its value, else return
       *default*.  If *default* is not given and *key* is not in the dictionary,
@@ -2004,25 +2051,25 @@
 
       If *key* is in the dictionary, return its value.  If not, insert *key*
       with a value of *default* and return *default*.  *default* defaults to
       ``None``.
 
    .. method:: update([other])
 
       Update the dictionary with the key/value pairs from *other*, overwriting
       existing keys.  Return ``None``.
 
       :func:`update` accepts either another dictionary object or an iterable of
       key/value pairs (as a tuple or other iterable of length two).  If keyword
-      arguments are specified, the dictionary is then is updated with those
+      arguments are specified, the dictionary is then updated with those
       key/value pairs: ``d.update(red=1, blue=2)``.
 
       .. versionchanged:: 2.4
           Allowed the argument to be an iterable of key/value pairs and allowed
           keyword arguments.
 
    .. method:: values()
 
       Return a copy of the dictionary's list of values.  See the note for
       :meth:`dict.items`.
 
 
@@ -2084,24 +2131,29 @@
 
       Not all "file-like" types in Python support use as a context manager for the
       :keyword:`with` statement.  If your code is intended to work with any file-like
       object, you can use the function :func:`contextlib.closing` instead of using
       the object directly.
 
 
 .. method:: file.flush()
 
    Flush the internal buffer, like ``stdio``'s :cfunc:`fflush`.  This may be a
    no-op on some file-like objects.
 
+   .. note::
+
+      :meth:`flush` does not necessarily write the file's data to disk.  Use
+      :meth:`flush` followed by :func:`os.fsync` to ensure this behavior.
+
 
 .. method:: file.fileno()
 
    .. index::
       pair: file; descriptor
       module: fcntl
 
    Return the integer "file descriptor" that is used by the underlying
    implementation to request I/O operations from the operating system.  This can be
    useful for other, lower level interfaces that use file descriptors, such as the
    :mod:`fcntl` module or :func:`os.read` and friends.
 
@@ -2117,30 +2169,30 @@
 
    .. note::
 
       If a file-like object is not associated with a real file, this method should
       *not* be implemented.
 
 
 .. method:: file.next()
 
    A file object is its own iterator, for example ``iter(f)`` returns *f* (unless
    *f* is closed).  When a file is used as an iterator, typically in a
    :keyword:`for` loop (for example, ``for line in f: print line``), the
-   :meth:`next` method is called repeatedly.  This method returns the next input
+   :meth:`.next` method is called repeatedly.  This method returns the next input
    line, or raises :exc:`StopIteration` when EOF is hit when the file is open for
    reading (behavior is undefined when the file is open for writing).  In order to
    make a :keyword:`for` loop the most efficient way of looping over the lines of a
    file (a very common operation), the :meth:`next` method uses a hidden read-ahead
-   buffer.  As a consequence of using a read-ahead buffer, combining :meth:`next`
+   buffer.  As a consequence of using a read-ahead buffer, combining :meth:`.next`
    with other file methods (like :meth:`readline`) does not work right.  However,
    using :meth:`seek` to reposition the file to an absolute position will flush the
    read-ahead buffer.
 
    .. versionadded:: 2.3
 
 
 .. method:: file.read([size])
 
    Read at most *size* bytes from the file (less if the read hits EOF before
    obtaining *size* bytes).  If the *size* argument is negative or omitted, read
    all data until EOF is reached.  The bytes are returned as a string object.  An
@@ -2389,27 +2441,27 @@
    The exception passed in should never be reraised explicitly - instead, this
    method should return a false value to indicate that the method completed
    successfully and does not want to suppress the raised exception. This allows
    context management code (such as ``contextlib.nested``) to easily detect whether
    or not an :meth:`__exit__` method has actually failed.
 
 Python defines several context managers to support easy thread synchronisation,
 prompt closure of files or other objects, and simpler manipulation of the active
 decimal arithmetic context. The specific types are not treated specially beyond
 their implementation of the context management protocol. See the
 :mod:`contextlib` module for some examples.
 
-Python's :term:`generator`\s and the ``contextlib.contextfactory`` :term:`decorator`
+Python's :term:`generator`\s and the ``contextlib.contextmanager`` :term:`decorator`
 provide a convenient way to implement these protocols.  If a generator function is
-decorated with the ``contextlib.contextfactory`` decorator, it will return a
+decorated with the ``contextlib.contextmanager`` decorator, it will return a
 context manager implementing the necessary :meth:`__enter__` and
 :meth:`__exit__` methods, rather than the iterator produced by an undecorated
 generator function.
 
 Note that there is no specific slot for any of these methods in the type
 structure for Python objects in the Python/C API. Extension types wanting to
 define these methods must provide them as a normal Python accessible method.
 Compared to the overhead of setting up the runtime context, the overhead of a
 single class dictionary lookup is negligible.
 
 
 .. _typesother:
@@ -2635,26 +2687,25 @@
    .. deprecated:: 2.2
       Use the built-in function :func:`dir` to get a list of an object's attributes.
       This attribute is no longer available.
 
 
 .. attribute:: instance.__class__
 
    The class to which a class instance belongs.
 
 
 .. attribute:: class.__bases__
 
-   The tuple of base classes of a class object.  If there are no base classes, this
-   will be an empty tuple.
+   The tuple of base classes of a class object.
 
 
 .. attribute:: class.__name__
 
    The name of the class or type.
 
 
 The following attributes are only supported by :term:`new-style class`\ es.
 
 .. attribute:: class.__mro__
 
    This attribute is a tuple of classes that are considered when looking for
