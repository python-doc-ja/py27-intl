--- r262/library/fileinput.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/fileinput.rst	2009-10-27 23:36:50.397095000 +0900
@@ -11,28 +11,28 @@
 loop over standard input or a list of files. If you just want to read or
 write one file see :func:`open`.
 
 The typical use is::
 
    import fileinput
    for line in fileinput.input():
        process(line)
 
 This iterates over the lines of all files listed in ``sys.argv[1:]``, defaulting
 to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``, it is also
 replaced by ``sys.stdin``.  To specify an alternative list of filenames, pass it
-as the first argument to :func:`input`.  A single file name is also allowed.
+as the first argument to :func:`.input`.  A single file name is also allowed.
 
 All files are opened in text mode by default, but you can override this by
-specifying the *mode* parameter in the call to :func:`input` or
+specifying the *mode* parameter in the call to :func:`.input` or
 :class:`FileInput()`.  If an I/O error occurs during opening or reading a file,
 :exc:`IOError` is raised.
 
 If ``sys.stdin`` is used more than once, the second and further use will return
 no lines, except perhaps for interactive use, or if it has been explicitly reset
 (e.g. using ``sys.stdin.seek(0)``).
 
 Empty files are opened and immediately closed; the only time their presence in
 the list of filenames is noticeable at all is when the last file opened is
 empty.
 
 Lines are returned with any newlines intact, which means that the last line in
@@ -141,25 +141,25 @@
 
 **Optional in-place filtering:** if the keyword argument ``inplace=1`` is passed
 to :func:`fileinput.input` or to the :class:`FileInput` constructor, the file is
 moved to a backup file and standard output is directed to the input file (if a
 file of the same name as the backup file already exists, it will be replaced
 silently).  This makes it possible to write a filter that rewrites its input
 file in place.  If the *backup* parameter is given (typically as
 ``backup='.<some extension>'``), it specifies the extension for the backup file,
 and the backup file remains around; by default, the extension is ``'.bak'`` and
 it is deleted when the output file is closed.  In-place filtering is disabled
 when standard input is read.
 
-.. warning::
+.. note::
 
    The current implementation does not work for MS-DOS 8+3 filesystems.
 
 
 The two following opening hooks are provided by this module:
 
 .. function:: hook_compressed(filename, mode)
 
    Transparently opens files compressed with gzip and bzip2 (recognized by the
    extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2`
    modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file is
    opened normally (ie, using :func:`open` without any decompression).
