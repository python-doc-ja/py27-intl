--- r262/library/imp.rst	2008-09-14 02:41:16.853203000 +0900
+++ r266/library/imp.rst	2009-10-27 23:29:22.069083000 +0900
@@ -25,34 +25,35 @@
    Return a list of 3-element tuples, each describing a particular type of
    module. Each triple has the form ``(suffix, mode, type)``, where *suffix* is
    a string to be appended to the module name to form the filename to search
    for, *mode* is the mode string to pass to the built-in :func:`open` function
    to open the file (this can be ``'r'`` for text files or ``'rb'`` for binary
    files), and *type* is the file type, which has one of the values
    :const:`PY_SOURCE`, :const:`PY_COMPILED`, or :const:`C_EXTENSION`, described
    below.
 
 
 .. function:: find_module(name[, path])
 
-   Try to find the module *name* on the search path *path*.  If *path* is a list
-   of directory names, each directory is searched for files with any of the
-   suffixes returned by :func:`get_suffixes` above.  Invalid names in the list
-   are silently ignored (but all list items must be strings).  If *path* is
-   omitted or ``None``, the list of directory names given by ``sys.path`` is
-   searched, but first it searches a few special places: it tries to find a
-   built-in module with the given name (:const:`C_BUILTIN`), then a frozen
-   module (:const:`PY_FROZEN`), and on some systems some other places are looked
-   in as well (on Windows, it looks in the registry which may point to a
-   specific file).
+   Try to find the module *name*.  If *path* is omitted or ``None``, the list of
+   directory names given by ``sys.path`` is searched, but first a few special
+   places are searched: the function tries to find a built-in module with the
+   given name (:const:`C_BUILTIN`), then a frozen module (:const:`PY_FROZEN`),
+   and on some systems some other places are looked in as well (on Windows, it
+   looks in the registry which may point to a specific file).
+
+   Otherwise, *path* must be a list of directory names; each directory is
+   searched for files with any of the suffixes returned by :func:`get_suffixes`
+   above.  Invalid names in the list are silently ignored (but all list items
+   must be strings).
 
    If search is successful, the return value is a 3-element tuple ``(file,
    pathname, description)``:
 
    *file* is an open file object positioned at the beginning, *pathname* is the
    pathname of the file found, and *description* is a 3-element tuple as
    contained in the list returned by :func:`get_suffixes` describing the kind of
    module found.
 
    If the module does not live in a file, the returned *file* is ``None``,
    *pathname* is the empty string, and the *description* tuple contains empty
    strings for its suffix and mode; the module type is indicated as given in
