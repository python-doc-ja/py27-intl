--- r262/library/audioop.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/audioop.rst	2009-10-27 23:36:50.397095000 +0900
@@ -219,25 +219,25 @@
 
    Generate a stereo fragment from a mono fragment.  Each pair of samples in the
    stereo fragment are computed from the mono sample, whereby left channel samples
    are multiplied by *lfactor* and right channel samples by *rfactor*.
 
 
 .. function:: ulaw2lin(fragment, width)
 
    Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.
    u-LAW encoding always uses 8 bits samples, so *width* refers only to the sample
    width of the output fragment here.
 
-Note that operations such as :func:`mul` or :func:`max` make no distinction
+Note that operations such as :func:`.mul` or :func:`.max` make no distinction
 between mono and stereo fragments, i.e. all samples are treated equal.  If this
 is a problem the stereo fragment should be split into two mono fragments first
 and recombined later.  Here is an example of how to do that::
 
    def mul_stereo(sample, width, lfactor, rfactor):
        lsample = audioop.tomono(sample, width, 1, 0)
        rsample = audioop.tomono(sample, width, 0, 1)
        lsample = audioop.mul(sample, width, lfactor)
        rsample = audioop.mul(sample, width, rfactor)
        lsample = audioop.tostereo(lsample, width, 1, 0)
        rsample = audioop.tostereo(rsample, width, 0, 1)
        return audioop.add(lsample, rsample, width)
