--- r262/library/httplib.rst	2008-12-05 17:35:09.041315000 +0900
+++ r266/library/httplib.rst	2010-06-28 19:58:16.782948000 +0900
@@ -59,41 +59,49 @@
 
    .. versionchanged:: 2.6
       *timeout* was added.
 
 
 .. class:: HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout]]]]])
 
    A subclass of :class:`HTTPConnection` that uses SSL for communication with
    secure servers.  Default port is ``443``. *key_file* is the name of a PEM
    formatted file that contains your private key. *cert_file* is a PEM formatted
    certificate chain file.
 
-   .. warning::
+   .. note::
 
-      This does not do any certificate verification!
+      This does not do any certificate verification.
 
    .. versionadded:: 2.0
 
    .. versionchanged:: 2.6
       *timeout* was added.
 
 
 .. class:: HTTPResponse(sock[, debuglevel=0][, strict=0])
 
    Class whose instances are returned upon successful connection.  Not instantiated
    directly by user.
 
    .. versionadded:: 2.0
 
+.. class:: HTTPMessage
+
+   An :class:`HTTPMessage` instance is used to hold the headers from an HTTP
+   response. It is implemented using the :class:`mimetools.Message` class and
+   provides utility functions to deal with HTTP Headers. It is not directly
+   instantiated by the users.
+
+
 The following exceptions are raised as appropriate:
 
 
 .. exception:: HTTPException
 
    The base class of the other exceptions in this module.  It is a subclass of
    :exc:`Exception`.
 
    .. versionadded:: 2.0
 
 
 .. exception:: NotConnected
@@ -532,24 +540,40 @@
    >>> conn.request("GET", "/index.html")
    >>> r1 = conn.getresponse()
    >>> print r1.status, r1.reason
    200 OK
    >>> data1 = r1.read()
    >>> conn.request("GET", "/parrot.spam")
    >>> r2 = conn.getresponse()
    >>> print r2.status, r2.reason
    404 Not Found
    >>> data2 = r2.read()
    >>> conn.close()
 
+Here is an example session that uses ``HEAD`` method. Note that ``HEAD`` method
+never returns any data. ::
+
+
+   >>> import httplib
+   >>> conn = httplib.HTTPConnection("www.python.org")
+   >>> conn.request("HEAD","/index.html")
+   >>> res = conn.getresponse()
+   >>> print res.status, res.reason
+   200 OK
+   >>> data = res.read()
+   >>> print len(data)
+   0
+   >>> data == ''
+   True
+
 Here is an example session that shows how to ``POST`` requests::
 
    >>> import httplib, urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> headers = {"Content-type": "application/x-www-form-urlencoded",
    ...            "Accept": "text/plain"}
    >>> conn = httplib.HTTPConnection("musi-cal.mojam.com:80")
    >>> conn.request("POST", "/cgi-bin/query", params, headers)
    >>> response = conn.getresponse()
    >>> print response.status, response.reason
    200 OK
    >>> data = response.read()
