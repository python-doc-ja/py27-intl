--- r262/library/gettext.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/gettext.rst	2009-10-27 23:41:50.977591000 +0900
@@ -196,40 +196,40 @@
    the cache.
 
    If no :file:`.mo` file is found, this function raises :exc:`IOError` if
    *fallback* is false (which is the default), and returns a
    :class:`NullTranslations` instance if *fallback* is true.
 
    .. versionchanged:: 2.4
       Added the *codeset* parameter.
 
 
 .. function:: install(domain[, localedir[, unicode [, codeset[, names]]]])
 
-   This installs the function :func:`_` in Python's builtin namespace, based on
+   This installs the function :func:`_` in Python's builtins namespace, based on
    *domain*, *localedir*, and *codeset* which are passed to the function
    :func:`translation`.  The *unicode* flag is passed to the resulting translation
-   object's :meth:`install` method.
+   object's :meth:`~NullTranslations.install` method.
 
    For the *names* parameter, please see the description of the translation
-   object's :meth:`install` method.
+   object's :meth:`~NullTranslations.install` method.
 
    As seen below, you usually mark the strings in your application that are
    candidates for translation, by wrapping them in a call to the :func:`_`
    function, like this::
 
       print _('This string will be translated.')
 
    For convenience, you want the :func:`_` function to be installed in Python's
-   builtin namespace, so it is easily accessible in all modules of your
+   builtins namespace, so it is easily accessible in all modules of your
    application.
 
    .. versionchanged:: 2.4
       Added the *codeset* parameter.
 
    .. versionchanged:: 2.5
       Added the *names* parameter.
 
 
 The :class:`NullTranslations` class
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
@@ -338,25 +338,25 @@
       encoding used to return translated messages.
 
       .. versionadded:: 2.4
 
 
    .. method:: install([unicode [, names]])
 
       If the *unicode* flag is false, this method installs :meth:`self.gettext`
       into the built-in namespace, binding it to ``_``.  If *unicode* is true,
       it binds :meth:`self.ugettext` instead.  By default, *unicode* is false.
 
       If the *names* parameter is given, it must be a sequence containing the
-      names of functions you want to install in the builtin namespace in
+      names of functions you want to install in the builtins namespace in
       addition to :func:`_`.  Supported names are ``'gettext'`` (bound to
       :meth:`self.gettext` or :meth:`self.ugettext` according to the *unicode*
       flag), ``'ngettext'`` (bound to :meth:`self.ngettext` or
       :meth:`self.ungettext` according to the *unicode* flag), ``'lgettext'``
       and ``'lngettext'``.
 
       Note that this is only one way, albeit the most convenient way, to make
       the :func:`_` function available to your application.  Because it affects
       the entire application globally, and specifically the built-in namespace,
       localized modules should never install :func:`_`. Instead, they should use
       this code to make :func:`_` available to their module::
 
