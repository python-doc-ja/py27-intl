--- r262/library/curses.rst	2008-04-25 10:29:10.316477000 +0900
+++ r266/library/curses.rst	2009-10-28 00:08:27.384772000 +0900
@@ -1,22 +1,22 @@
-
 :mod:`curses` --- Terminal handling for character-cell displays
 ===============================================================
 
 .. module:: curses
-   :synopsis: An interface to the curses library, providing portable terminal handling.
+   :synopsis: An interface to the curses library, providing portable terminal
+              handling.
+   :platform: Unix
 .. sectionauthor:: Moshe Zadka <moshez@zadka.site.co.il>
 .. sectionauthor:: Eric Raymond <esr@thyrsus.com>
 
-
 .. versionchanged:: 1.6
    Added support for the ``ncurses`` library and converted to a package.
 
 The :mod:`curses` module provides an interface to the curses library, the
 de-facto standard for portable advanced terminal handling.
 
 While curses is most widely used in the Unix environment, versions are available
 for DOS, OS/2, and possibly other systems as well.  This extension module is
 designed to match the API of ncurses, an open-source curses library hosted on
 Linux and the BSD variants of Unix.
 
 .. note::
@@ -177,25 +177,25 @@
    De-initialize the library, and return terminal to normal status.
 
 
 .. function:: erasechar()
 
    Returns the user's current erase character.  Under Unix operating systems this
    is a property of the controlling tty of the curses program, and is not set by
    the curses library itself.
 
 
 .. function:: filter()
 
-   The :func:`filter` routine, if used, must be called before :func:`initscr` is
+   The :func:`.filter` routine, if used, must be called before :func:`initscr` is
    called.  The effect is that, during those calls, LINES is set to 1; the
    capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home
    string is set to the value of cr. The effect is that the cursor is confined to
    the current line, and so are screen updates.  This may be used for enabling
    character-at-a-time  line editing without touching the rest of the screen.
 
 
 .. function:: flash()
 
    Flash the screen.  That is, change it to reverse-video and then change it back
    in a short interval.  Some people prefer such as 'visible bell' to the audible
    attention signal produced by :func:`beep`.
@@ -600,27 +600,27 @@
 Window Objects
 --------------
 
 Window objects, as returned by :func:`initscr` and :func:`newwin` above, have
 the following methods:
 
 
 .. method:: window.addch([y, x,] ch[, attr])
 
    .. note::
 
       A *character* means a C character (an ASCII code), rather then a Python
-      character (a string of length 1). (This note is true whenever the documentation
-      mentions a character.) The builtin :func:`ord` is handy for conveying strings to
-      codes.
+      character (a string of length 1). (This note is true whenever the
+      documentation mentions a character.) The built-in :func:`ord` is handy for
+      conveying strings to codes.
 
    Paint character *ch* at ``(y, x)`` with attributes *attr*, overwriting any
    character previously painter at that location.  By default, the character
    position and attributes are the current settings for the window object.
 
 
 .. method:: window.addnstr([y, x,] str, n[, attr])
 
    Paint at most *n* characters of the  string *str* at ``(y, x)`` with attributes
    *attr*, overwriting anything previously on the display.
 
 
@@ -787,25 +787,26 @@
    Clear the window.
 
 
 .. method:: window.getbegyx()
 
    Return a tuple ``(y, x)`` of co-ordinates of upper-left corner.
 
 
 .. method:: window.getch([y, x])
 
    Get a character. Note that the integer returned does *not* have to be in ASCII
    range: function keys, keypad keys and so on return numbers higher than 256. In
-   no-delay mode, -1 is returned if there is  no input.
+   no-delay mode, -1 is returned if there is no input, else :func:`getch` waits
+   until a key is pressed.
 
 
 .. method:: window.getkey([y, x])
 
    Get a character, returning a string instead of an integer, as :meth:`getch`
    does. Function keys, keypad keys and so on return a multibyte string containing
    the key name.  In no-delay mode, an exception is raised if there is no input.
 
 
 .. method:: window.getmaxyx()
 
    Return a tuple ``(y, x)`` of the height and width of the window.
