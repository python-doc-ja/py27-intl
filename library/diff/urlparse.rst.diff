--- r262/library/urlparse.rst	2009-01-04 06:55:17.853888000 +0900
+++ r266/library/urlparse.rst	2010-05-26 00:49:57.354499000 +0900
@@ -27,47 +27,47 @@
 Resource Locators (and discovered a bug in an earlier draft!). It supports the
 following URL schemes: ``file``, ``ftp``, ``gopher``, ``hdl``, ``http``,
 ``https``, ``imap``, ``mailto``, ``mms``, ``news``,  ``nntp``, ``prospero``,
 ``rsync``, ``rtsp``, ``rtspu``,  ``sftp``, ``shttp``, ``sip``, ``sips``,
 ``snews``, ``svn``,  ``svn+ssh``, ``telnet``, ``wais``.
 
 .. versionadded:: 2.5
    Support for the ``sftp`` and ``sips`` schemes.
 
 The :mod:`urlparse` module defines the following functions:
 
 
-.. function:: urlparse(urlstring[, default_scheme[, allow_fragments]])
+.. function:: urlparse(urlstring[, scheme[, allow_fragments]])
 
    Parse a URL into six components, returning a 6-tuple.  This corresponds to the
    general structure of a URL: ``scheme://netloc/path;parameters?query#fragment``.
    Each tuple item is a string, possibly empty. The components are not broken up in
    smaller parts (for example, the network location is a single string), and %
    escapes are not expanded. The delimiters as shown above are not part of the
    result, except for a leading slash in the *path* component, which is retained if
    present.  For example:
 
       >>> from urlparse import urlparse
       >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
       >>> o   # doctest: +NORMALIZE_WHITESPACE
       ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                   params='', query='', fragment='')
       >>> o.scheme
       'http'
       >>> o.port
       80
       >>> o.geturl()
       'http://www.cwi.nl:80/%7Eguido/Python.html'
 
-   If the *default_scheme* argument is specified, it gives the default addressing
+   If the *scheme* argument is specified, it gives the default addressing
    scheme, to be used only if the URL does not specify one.  The default value for
    this argument is the empty string.
 
    If the *allow_fragments* argument is false, fragment identifiers are not
    allowed, even if the URL's addressing scheme normally does support them.  The
    default value for this argument is :const:`True`.
 
    The return value is actually an instance of a subclass of :class:`tuple`.  This
    class has the following additional read-only convenience attributes:
 
    +------------------+-------+--------------------------+----------------------+
    | Attribute        | Index | Value                    | Value if not present |
@@ -112,54 +112,61 @@
    values in URL encoded queries should be treated as blank strings.   A true value
    indicates that blanks should be retained as  blank strings.  The default false
    value indicates that blank values are to be ignored and treated as if they were
    not included.
 
    The optional argument *strict_parsing* is a flag indicating what to do with
    parsing errors.  If false (the default), errors are silently ignored.  If true,
    errors raise a :exc:`ValueError` exception.
 
    Use the :func:`urllib.urlencode` function to convert such dictionaries into
    query strings.
 
+   .. versionadded:: 2.6
+      Copied from the :mod:`cgi` module.
+
 
 .. function:: parse_qsl(qs[, keep_blank_values[, strict_parsing]])
 
    Parse a query string given as a string argument (data of type
    :mimetype:`application/x-www-form-urlencoded`).  Data are returned as a list of
    name, value pairs.
 
    The optional argument *keep_blank_values* is a flag indicating whether blank
    values in URL encoded queries should be treated as blank strings.   A true value
    indicates that blanks should be retained as  blank strings.  The default false
    value indicates that blank values are to be ignored and treated as if they were
    not included.
 
    The optional argument *strict_parsing* is a flag indicating what to do with
    parsing errors.  If false (the default), errors are silently ignored.  If true,
    errors raise a :exc:`ValueError` exception.
 
    Use the :func:`urllib.urlencode` function to convert such lists of pairs into
    query strings.
 
+   .. versionadded:: 2.6
+      Copied from the :mod:`cgi` module.
+
+
 .. function:: urlunparse(parts)
 
    Construct a URL from a tuple as returned by ``urlparse()``. The *parts* argument
    can be any six-item iterable. This may result in a slightly different, but
    equivalent URL, if the URL that was parsed originally had unnecessary delimiters
    (for example, a ? with an empty query; the RFC states that these are
    equivalent).
 
 
-.. function:: urlsplit(urlstring[, default_scheme[, allow_fragments]])
+.. function:: urlsplit(urlstring[, scheme[, allow_fragments]])
 
    This is similar to :func:`urlparse`, but does not split the params from the URL.
    This should generally be used instead of :func:`urlparse` if the more recent URL
    syntax allowing parameters to be applied to each segment of the *path* portion
    of the URL (see :rfc:`2396`) is wanted.  A separate function is needed to
    separate the path segments and parameters.  This function returns a 5-tuple:
    (addressing scheme, network location, path, query, fragment identifier).
 
    The return value is actually an instance of a subclass of :class:`tuple`.  This
    class has the following additional read-only convenience attributes:
 
    +------------------+-------+-------------------------+----------------------+
@@ -235,35 +242,44 @@
 
 
 .. function:: urldefrag(url)
 
    If *url* contains a fragment identifier, returns a modified version of *url*
    with no fragment identifier, and the fragment identifier as a separate string.
    If there is no fragment identifier in *url*, returns *url* unmodified and an
    empty string.
 
 
 .. seealso::
 
-   :rfc:`1738` - Uniform Resource Locators (URL)
-      This specifies the formal syntax and semantics of absolute URLs.
+   :rfc:`3986` - Uniform Resource Identifiers
+      This is the current standard (STD66). Any changes to urlparse module
+      should conform to this. Certain deviations could be observed, which are
+      mostly due backward compatiblity purposes and for certain to de-facto
+      parsing requirements as commonly observed in major browsers.
+
+   :rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax
+      Document describing the generic syntactic requirements for both Uniform Resource
+      Names (URNs) and Uniform Resource Locators (URLs).
+
+   :rfc:`2368` - The mailto URL scheme.
+      Parsing requirements for mailto url schemes.
 
    :rfc:`1808` - Relative Uniform Resource Locators
       This Request For Comments includes the rules for joining an absolute and a
       relative URL, including a fair number of "Abnormal Examples" which govern the
       treatment of border cases.
 
-   :rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax
-      Document describing the generic syntactic requirements for both Uniform Resource
-      Names (URNs) and Uniform Resource Locators (URLs).
+   :rfc:`1738` - Uniform Resource Locators (URL)
+      This specifies the formal syntax and semantics of absolute URLs.
 
 
 .. _urlparse-result-object:
 
 Results of :func:`urlparse` and :func:`urlsplit`
 ------------------------------------------------
 
 The result objects from the :func:`urlparse` and :func:`urlsplit` functions are
 subclasses of the :class:`tuple` type.  These subclasses add the attributes
 described in those functions, as well as provide an additional method:
 
 
