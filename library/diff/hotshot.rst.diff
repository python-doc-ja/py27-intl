--- r262/library/hotshot.rst	2008-06-14 04:38:18.834639000 +0900
+++ r266/library/hotshot.rst	2009-12-20 07:59:01.003699000 +0900
@@ -17,25 +17,25 @@
 
 .. note::
 
    The :mod:`hotshot` module focuses on minimizing the overhead while profiling, at
    the expense of long data post-processing times. For common usage it is
    recommended to use :mod:`cProfile` instead. :mod:`hotshot` is not maintained and
    might be removed from the standard library in the future.
 
 .. versionchanged:: 2.5
    The results should be more meaningful than in the past: the timing core
    contained a critical bug.
 
-.. warning::
+.. note::
 
    The :mod:`hotshot` profiler does not yet work well with threads. It is useful to
    use an unthreaded script to run the profiler over the code you're interested in
    measuring if at all possible.
 
 
 .. class:: Profile(logfile[, lineevents[, linetimings]])
 
    The profiler object. The argument *logfile* is the name of a log file to use for
    logged profile data. The argument *lineevents* specifies whether to generate
    events for every source line, or just on function call/return. It defaults to
    ``0`` (only log function call/return). The argument *linetimings* specifies
@@ -118,25 +118,25 @@
 
 .. seealso::
 
    Module :mod:`profile`
       The :mod:`profile` module's :class:`Stats` class
 
 
 .. _hotshot-example:
 
 Example Usage
 -------------
 
-Note that this example runs the python "benchmark" pystones.  It can take some
+Note that this example runs the Python "benchmark" pystones.  It can take some
 time to run, and will produce large output files. ::
 
    >>> import hotshot, hotshot.stats, test.pystone
    >>> prof = hotshot.Profile("stones.prof")
    >>> benchtime, stones = prof.runcall(test.pystone.pystones)
    >>> prof.close()
    >>> stats = hotshot.stats.load("stones.prof")
    >>> stats.strip_dirs()
    >>> stats.sort_stats('time', 'calls')
    >>> stats.print_stats(20)
             850004 function calls in 10.090 CPU seconds
 
