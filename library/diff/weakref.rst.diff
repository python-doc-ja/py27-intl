--- r262/library/weakref.rst	2008-03-23 07:04:10.557145000 +0900
+++ r266/library/weakref.rst	2009-10-28 00:08:27.384772000 +0900
@@ -1,13 +1,12 @@
-
 :mod:`weakref` --- Weak references
 ==================================
 
 .. module:: weakref
    :synopsis: Support for weak references and weak dictionaries.
 .. moduleauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 .. moduleauthor:: Neil Schemenauer <nas@arctrix.com>
 .. moduleauthor:: Martin von LÃ¶wis <martin@loewis.home.cs.tu-berlin.de>
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
 
 .. versionadded:: 2.1
@@ -56,32 +55,37 @@
    is called, to ensure that the weak reference callback (if any) finds the
    object still alive.
 
 Not all objects can be weakly referenced; those objects which can include class
 instances, functions written in Python (but not in C), methods (both bound and
 unbound), sets, frozensets, file objects, :term:`generator`\s, type objects,
 :class:`DBcursor` objects from the :mod:`bsddb` module, sockets, arrays, deques,
 and regular expression pattern objects.
 
 .. versionchanged:: 2.4
    Added support for files, sockets, arrays, and patterns.
 
-Several builtin types such as :class:`list` and :class:`dict` do not directly
+Several built-in types such as :class:`list` and :class:`dict` do not directly
 support weak references but can add support through subclassing::
 
    class Dict(dict):
        pass
 
    obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable
 
+.. impl-detail::
+
+   Other built-in types such as :class:`tuple` and :class:`long` do not support
+   weak references even when subclassed.
+
 Extension types can easily be made to support weak references; see
 :ref:`weakref-support`.
 
 
 .. class:: ref(object[, callback])
 
    Return a weak reference to *object*.  The original object can be retrieved by
    calling the reference object if the referent is still alive; if the referent is
    no longer alive, calling the reference object will cause :const:`None` to be
    returned.  If *callback* is provided and not :const:`None`, and the returned
    weakref object is still alive, the callback will be called when the object is
    about to be finalized; the weak reference object will be passed as the only
