--- r262/library/email.errors.rst	2008-01-06 05:33:46.954265000 +0900
+++ r266/library/email.errors.rst	2009-04-29 03:16:02.904819000 +0900
@@ -8,26 +8,26 @@
 The following exception classes are defined in the :mod:`email.errors` module:
 
 
 .. exception:: MessageError()
 
    This is the base class for all exceptions that the :mod:`email` package can
    raise.  It is derived from the standard :exc:`Exception` class and defines no
    additional methods.
 
 
 .. exception:: MessageParseError()
 
-   This is the base class for exceptions thrown by the :class:`Parser` class.  It
-   is derived from :exc:`MessageError`.
+   This is the base class for exceptions thrown by the :class:`~email.parser.Parser`
+   class.  It is derived from :exc:`MessageError`.
 
 
 .. exception:: HeaderParseError()
 
    Raised under some error conditions when parsing the :rfc:`2822` headers of a
    message, this class is derived from :exc:`MessageParseError`. It can be raised
    from the :meth:`Parser.parse` or :meth:`Parser.parsestr` methods.
 
    Situations where it can be raised include finding an envelope header after the
    first :rfc:`2822` header of the message, finding a continuation line before the
    first :rfc:`2822` header is found, or finding a line in the headers which is
    neither a header or a continuation line.
@@ -46,29 +46,30 @@
 
 .. exception:: MultipartConversionError()
 
    Raised when a payload is added to a :class:`Message` object using
    :meth:`add_payload`, but the payload is already a scalar and the message's
    :mailheader:`Content-Type` main type is not either :mimetype:`multipart` or
    missing.  :exc:`MultipartConversionError` multiply inherits from
    :exc:`MessageError` and the built-in :exc:`TypeError`.
 
    Since :meth:`Message.add_payload` is deprecated, this exception is rarely raised
    in practice.  However the exception may also be raised if the :meth:`attach`
    method is called on an instance of a class derived from
-   :class:`MIMENonMultipart` (e.g. :class:`MIMEImage`).
+   :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g.
+   :class:`~email.mime.image.MIMEImage`).
 
-Here's the list of the defects that the :class:`FeedParser` can find while
-parsing messages.  Note that the defects are added to the message where the
-problem was found, so for example, if a message nested inside a
+Here's the list of the defects that the :class:`~email.mime.parser.FeedParser`
+can find while parsing messages.  Note that the defects are added to the message
+where the problem was found, so for example, if a message nested inside a
 :mimetype:`multipart/alternative` had a malformed header, that nested message
 object would have a defect, but the containing messages would not.
 
 All defect classes are subclassed from :class:`email.errors.MessageDefect`, but
 this class is *not* an exception!
 
 .. versionadded:: 2.4
    All the defect classes were added.
 
 * :class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart,
   but had no :mimetype:`boundary` parameter.
 
