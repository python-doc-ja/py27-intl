--- rest25/library/tokenize.rst	2008-12-19 16:58:07.000000000 +0900
+++ rest262/library/tokenize.rst	2009-04-05 05:02:09.000000000 +0900
@@ -4,41 +4,40 @@
 
 .. module:: tokenize
    :synopsis: Lexical scanner for Python source code.
 .. moduleauthor:: Ka Ping Yee
 .. sectionauthor:: Fred L. Drake, Jr. <fdrake@acm.org>
 
 
 The :mod:`tokenize` module provides a lexical scanner for Python source code,
 implemented in Python.  The scanner in this module returns comments as tokens as
 well, making it useful for implementing "pretty-printers," including colorizers
 for on-screen displays.
 
-The primary entry point is a generator:
-
+The primary entry point is a :term:`generator`:
 
 .. function:: generate_tokens(readline)
 
-   The :func:`generate_tokens` generator requires one argment, *readline*, which
-   must be a callable object which provides the same interface as the
+   The :func:`generate_tokens` generator requires one argument, *readline*,
+   which must be a callable object which provides the same interface as the
    :meth:`readline` method of built-in file objects (see section
-   :ref:`bltin-file-objects`).  Each call to the function should return one line of
-   input as a string.
+   :ref:`bltin-file-objects`).  Each call to the function should return one line
+   of input as a string.
 
    The generator produces 5-tuples with these members: the token type; the token
-   string; a 2-tuple ``(srow, scol)`` of ints specifying the row and column where
-   the token begins in the source; a 2-tuple ``(erow, ecol)`` of ints specifying
-   the row and column where the token ends in the source; and the line on which the
-   token was found. The line passed is the *logical* line; continuation lines are
-   included.
+   string; a 2-tuple ``(srow, scol)`` of ints specifying the row and column
+   where the token begins in the source; a 2-tuple ``(erow, ecol)`` of ints
+   specifying the row and column where the token ends in the source; and the
+   line on which the token was found.  The line passed (the last tuple item) is
+   the *logical* line; continuation lines are included.
 
    .. versionadded:: 2.2
 
 An older entry point is retained for backward compatibility:
 
 
 .. function:: tokenize(readline[, tokeneater])
 
    The :func:`tokenize` function accepts two parameters: one representing the input
    stream, and one providing an output mechanism for :func:`tokenize`.
 
    The first parameter, *readline*, must be a callable object which provides the
