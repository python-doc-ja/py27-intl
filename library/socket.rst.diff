@@ -196,34 +196,41 @@
    the TIPC documentation for more information.
 
    .. versionadded:: 2.6
 
 .. data:: has_ipv6
 
    This constant contains a boolean value which indicates if IPv6 is supported on
    this platform.
 
    .. versionadded:: 2.3
 
 
-.. function:: create_connection(address[, timeout])
+.. function:: create_connection(address[, timeout[, source_address]])
 
    Convenience function.  Connect to *address* (a 2-tuple ``(host, port)``),
    and return the socket object.  Passing the optional *timeout* parameter will
    set the timeout on the socket instance before attempting to connect.  If no
    *timeout* is supplied, the global default timeout setting returned by
    :func:`getdefaulttimeout` is used.
 
+   If supplied, *source_address* must be a 2-tuple ``(host, port)`` for the
+   socket to bind to as its source address before connecting.  If host or port
+   are '' or 0 respectively the OS default behavior will be used.
+
    .. versionadded:: 2.6
 
+   .. versionchanged:: 2.7
+      *source_address* was added.
+
 
 .. function:: getaddrinfo(host, port, family=0, socktype=0, proto=0, flags=0)
 
    Translate the *host*/*port* argument into a sequence of 5-tuples that contain
    all the necessary arguments for creating a socket connected to that service.
    *host* is a domain name, a string representation of an IPv4/v6 address
    or ``None``. *port* is a string service name such as ``'http'``, a numeric
    port number or ``None``.  By passing ``None`` as the value of *host*
    and *port*, you can pass ``NULL`` to the underlying C API.
 
    The *family*, *socktype* and *proto* arguments can be optionally specified
    in order to narrow the list of addresses returned.  Passing zero as a
@@ -499,24 +506,27 @@
 
 .. data:: SocketType
 
    This is a Python type object that represents the socket object type. It is the
    same as ``type(socket(...))``.
 
 
 .. seealso::
 
    Module :mod:`SocketServer`
       Classes that simplify writing network servers.
 
+   Module :mod:`ssl`
+      A TLS/SSL wrapper for socket objects.
+
 
 .. _socket-objects:
 
 Socket Objects
 --------------
 
 Socket objects have the following methods.  Except for :meth:`makefile` these
 correspond to Unix system calls applicable to sockets.
 
 
 .. method:: socket.accept()
 
@@ -535,24 +545,30 @@
 
       This method has historically accepted a pair of parameters for :const:`AF_INET`
       addresses instead of only a tuple.  This was never intentional and is no longer
       available in Python 2.0 and later.
 
 
 .. method:: socket.close()
 
    Close the socket.  All future operations on the socket object will fail. The
    remote end will receive no more data (after queued data is flushed). Sockets are
    automatically closed when they are garbage-collected.
 
+   .. note::
+      :meth:`close()` releases the resource associated with a connection but
+      does not necessarily close the connection immediately.  If you want
+      to close the connection in a timely fashion, call :meth:`shutdown()`
+      before :meth:`close()`.
+
 
 .. method:: socket.connect(address)
 
    Connect to a remote socket at *address*. (The format of *address* depends on the
    address family --- see above.)
 
    .. note::
 
       This method has historically accepted a pair of parameters for :const:`AF_INET`
       addresses instead of only a tuple.  This was never intentional and is no longer
       available in Python 2.0 and later.
 
@@ -619,40 +635,46 @@
    <http://msdn.microsoft.com/en-us/library/ms741621%28VS.85%29.aspx>`_ for more
    information.
 
    On other platforms, the generic :func:`fcntl.fcntl` and :func:`fcntl.ioctl`
    functions may be used; they accept a socket object as their first argument.
 
    .. versionadded:: 2.6
 
 
 .. method:: socket.listen(backlog)
 
    Listen for connections made to the socket.  The *backlog* argument specifies the
-   maximum number of queued connections and should be at least 1; the maximum value
-   is system-dependent (usually 5).
+   maximum number of queued connections and should be at least 0; the maximum value
+   is system-dependent (usually 5), the minimum value is forced to 0.
 
 
 .. method:: socket.makefile([mode[, bufsize]])
 
    .. index:: single: I/O control; buffering
 
    Return a :dfn:`file object` associated with the socket.  (File objects are
    described in :ref:`bltin-file-objects`.) The file object
    references a :cfunc:`dup`\ ped version of the socket file descriptor, so the
    file object and socket object may be closed or garbage-collected independently.
    The socket must be in blocking mode (it can not have a timeout). The optional
    *mode* and *bufsize* arguments are interpreted the same way as by the built-in
    :func:`file` function.
 
+   .. note::
+
+      On Windows, the file-like object created by :meth:`makefile` cannot be
+      used where a file object with a file descriptor is expected, such as the
+      stream arguments of :meth:`subprocess.Popen`.
+
 
 .. method:: socket.recv(bufsize[, flags])
 
    Receive data from the socket.  The return value is a string representing the
    data received.  The maximum amount of data to be received at once is specified
    by *bufsize*.  See the Unix manual page :manpage:`recv(2)` for the meaning of
    the optional argument *flags*; it defaults to zero.
 
    .. note::
 
       For best match with hardware and network realities, the value of  *bufsize*
       should be a relatively small power of 2, for example, 4096.
@@ -724,25 +746,25 @@
    set to non-blocking, else to blocking mode.  Initially all sockets are in
    blocking mode.  In non-blocking mode, if a :meth:`recv` call doesn't find any
    data, or if a :meth:`send` call can't immediately dispose of the data, a
    :exc:`error` exception is raised; in blocking mode, the calls block until they
    can proceed. ``s.setblocking(0)`` is equivalent to ``s.settimeout(0.0)``;
    ``s.setblocking(1)`` is equivalent to ``s.settimeout(None)``.
 
 
 .. method:: socket.settimeout(value)
 
    Set a timeout on blocking socket operations.  The *value* argument can be a
    nonnegative float expressing seconds, or ``None``. If a float is given,
-   subsequent socket operations will raise an :exc:`timeout` exception if the
+   subsequent socket operations will raise a :exc:`timeout` exception if the
    timeout period *value* has elapsed before the operation has completed.  Setting
    a timeout of ``None`` disables timeouts on socket operations.
    ``s.settimeout(0.0)`` is equivalent to ``s.setblocking(0)``;
    ``s.settimeout(None)`` is equivalent to ``s.setblocking(1)``.
 
    .. versionadded:: 2.3
 
 
 .. method:: socket.gettimeout()
 
    Return the timeout in floating seconds associated with socket operations, or
    ``None`` if no timeout is set.  This reflects the last call to
@@ -782,25 +804,27 @@
    :manpage:`setsockopt(2)`).  The needed symbolic constants are defined in the
    :mod:`socket` module (:const:`SO_\*` etc.).  The value can be an integer or a
    string representing a buffer.  In the latter case it is up to the caller to
    ensure that the string contains the proper bits (see the optional built-in
    module :mod:`struct` for a way to encode C structures as strings).
 
 
 .. method:: socket.shutdown(how)
 
    Shut down one or both halves of the connection.  If *how* is :const:`SHUT_RD`,
    further receives are disallowed.  If *how* is :const:`SHUT_WR`, further sends
    are disallowed.  If *how* is :const:`SHUT_RDWR`, further sends and receives are
-   disallowed.
+   disallowed.  Depending on the platform, shutting down one half of the connection
+   can also close the opposite half (e.g. on Mac OS X, ``shutdown(SHUT_WR)`` does
+   not allow further reads on the other end of the connection).
 
 Note that there are no methods :meth:`read` or :meth:`write`; use
 :meth:`~socket.recv` and :meth:`~socket.send` without *flags* argument instead.
 
 Socket objects also have these (read-only) attributes that correspond to the
 values given to the :class:`socket` constructor.
 
 
 .. attribute:: socket.family
 
    The socket family.
 
