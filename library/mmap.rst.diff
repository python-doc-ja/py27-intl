@@ -85,24 +85,28 @@
    :const:`PROT_READ \| PROT_WRITE`.
 
    *access* may be specified in lieu of *flags* and *prot* as an optional
    keyword parameter.  It is an error to specify both *flags*, *prot* and
    *access*.  See the description of *access* above for information on how to
    use this parameter.
 
    *offset* may be specified as a non-negative integer offset. mmap references
    will be relative to the offset from the beginning of the file. *offset*
    defaults to 0.  *offset* must be a multiple of the PAGESIZE or
    ALLOCATIONGRANULARITY.
 
+   To ensure validity of the created memory mapping the file specified
+   by the descriptor *fileno* is internally automatically synchronized
+   with physical backing store on Mac OS X and OpenVMS.
+
    This example shows a simple way of using :class:`mmap`::
 
       import mmap
 
       # write a simple example file
       with open("hello.txt", "wb") as f:
           f.write("Hello Python!\n")
 
       with open("hello.txt", "r+b") as f:
           # memory-map the file, size 0 means whole file
           map = mmap.mmap(f.fileno(), 0)
           # read content via standard file methods
@@ -164,25 +168,25 @@
 
       **(Windows version)** A nonzero value returned indicates success; zero
       indicates failure.
 
       **(Unix version)** A zero value is returned to indicate success. An
       exception is raised when the call failed.
 
 
    .. method:: move(dest, src, count)
 
       Copy the *count* bytes starting at offset *src* to the destination index
       *dest*.  If the mmap was created with :const:`ACCESS_READ`, then calls to
-      move will throw a :exc:`TypeError` exception.
+      move will raise a :exc:`TypeError` exception.
 
 
    .. method:: read(num)
 
       Return a string containing up to *num* bytes starting from the current
       file position; the file position is updated to point after the bytes that
       were returned.
 
 
    .. method:: read_byte()
 
       Returns a string of length 1 containing the character at the current file
@@ -190,25 +194,25 @@
 
 
    .. method:: readline()
 
       Returns a single line, starting at the current file position and up to the
       next newline.
 
 
    .. method:: resize(newsize)
 
       Resizes the map and the underlying file, if any. If the mmap was created
       with :const:`ACCESS_READ` or :const:`ACCESS_COPY`, resizing the map will
-      throw a :exc:`TypeError` exception.
+      raise a :exc:`TypeError` exception.
 
 
    .. method:: rfind(string[, start[, end]])
 
       Returns the highest index in the object where the substring *string* is
       found, such that *string* is contained in the range [*start*, *end*].
       Optional arguments *start* and *end* are interpreted as in slice notation.
       Returns ``-1`` on failure.
 
 
    .. method:: seek(pos[, whence])
 
@@ -225,23 +229,21 @@
 
 
    .. method:: tell()
 
       Returns the current position of the file pointer.
 
 
    .. method:: write(string)
 
       Write the bytes in *string* into memory at the current position of the
       file pointer; the file position is updated to point after the bytes that
       were written. If the mmap was created with :const:`ACCESS_READ`, then
-      writing to it will throw a :exc:`TypeError` exception.
+      writing to it will raise a :exc:`TypeError` exception.
 
 
    .. method:: write_byte(byte)
 
       Write the single-character string *byte* into memory at the current
       position of the file pointer; the file position is advanced by ``1``. If
       the mmap was created with :const:`ACCESS_READ`, then writing to it will
-      throw a :exc:`TypeError` exception.
-
-
+      raise a :exc:`TypeError` exception.
