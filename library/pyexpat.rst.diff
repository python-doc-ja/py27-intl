@@ -148,24 +148,31 @@
    .. versionadded:: 2.1
 
 
 .. method:: xmlparser.ExternalEntityParserCreate(context[, encoding])
 
    Create a "child" parser which can be used to parse an external parsed entity
    referred to by content parsed by the parent parser.  The *context* parameter
    should be the string passed to the :meth:`ExternalEntityRefHandler` handler
    function, described below. The child parser is created with the
    :attr:`ordered_attributes`, :attr:`returns_unicode` and
    :attr:`specified_attributes` set to the values of this parser.
 
+.. method:: xmlparser.SetParamEntityParsing(flag)
+
+   Control parsing of parameter entities (including the external DTD subset).
+   Possible *flag* values are :const:`XML_PARAM_ENTITY_PARSING_NEVER`,
+   :const:`XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE` and
+   :const:`XML_PARAM_ENTITY_PARSING_ALWAYS`.  Return true if setting the flag
+   was successful.
 
 .. method:: xmlparser.UseForeignDTD([flag])
 
    Calling this with a true value for *flag* (the default) will cause Expat to call
    the :attr:`ExternalEntityRefHandler` with :const:`None` for all arguments to
    allow an alternate DTD to be loaded.  If the document does not contain a
    document type declaration, the :attr:`ExternalEntityRefHandler` will still be
    called, but the :attr:`StartDoctypeDeclHandler` and
    :attr:`EndDoctypeDeclHandler` will not be called.
 
    Passing a false value for *flag* will cancel a previous call that passed a true
    value, but otherwise has no effect.
@@ -455,42 +462,42 @@
 .. method:: xmlparser.DefaultHandlerExpand(data)
 
    This is the same as the :func:`DefaultHandler`,  but doesn't inhibit expansion
    of internal entities. The entity reference will not be passed to the default
    handler.
 
 
 .. method:: xmlparser.NotStandaloneHandler()
 
    Called if the XML document hasn't been declared as being a standalone document.
    This happens when there is an external subset or a reference to a parameter
    entity, but the XML declaration does not set standalone to ``yes`` in an XML
-   declaration.  If this handler returns ``0``, then the parser will throw an
+   declaration.  If this handler returns ``0``, then the parser will raise an
    :const:`XML_ERROR_NOT_STANDALONE` error.  If this handler is not set, no
    exception is raised by the parser for this condition.
 
 
 .. method:: xmlparser.ExternalEntityRefHandler(context, base, systemId, publicId)
 
    Called for references to external entities.  *base* is the current base, as set
    by a previous call to :meth:`SetBase`.  The public and system identifiers,
    *systemId* and *publicId*, are strings if given; if the public identifier is not
    given, *publicId* will be ``None``.  The *context* value is opaque and should
    only be used as described below.
 
    For external entities to be parsed, this handler must be implemented. It is
    responsible for creating the sub-parser using
    ``ExternalEntityParserCreate(context)``, initializing it with the appropriate
    callbacks, and parsing the entity.  This handler should return an integer; if it
-   returns ``0``, the parser will throw an
+   returns ``0``, the parser will raise an
    :const:`XML_ERROR_EXTERNAL_ENTITY_HANDLING` error, otherwise parsing will
    continue.
 
    If this handler is not provided, external entities are reported by the
    :attr:`DefaultHandler` callback, if provided.
 
 
 .. _expaterror-objects:
 
 ExpatError Exceptions
 ---------------------
 
