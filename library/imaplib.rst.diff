@@ -75,44 +75,48 @@
 
    This is a subclass derived from :class:`IMAP4` that connects to the
    ``stdin/stdout`` file descriptors created by passing *command* to
    ``os.popen2()``.
 
    .. versionadded:: 2.3
 
 The following utility functions are defined:
 
 
 .. function:: Internaldate2tuple(datestr)
 
-   Converts an IMAP4 INTERNALDATE string to Coordinated Universal Time. Returns a
-   :mod:`time` module tuple.
-
+   Parse an IMAP4 ``INTERNALDATE`` string and return corresponding local
+   time.  The return value is a :class:`time.struct_time` instance or
+   None if the string has wrong format.
 
 .. function:: Int2AP(num)
 
    Converts an integer into a string representation using characters from the set
    [``A`` .. ``P``].
 
 
 .. function:: ParseFlags(flagstr)
 
    Converts an IMAP4 ``FLAGS`` response to a tuple of individual flags.
 
 
 .. function:: Time2Internaldate(date_time)
 
-   Converts a :mod:`time` module tuple to an IMAP4 ``INTERNALDATE`` representation.
-   Returns a string in the form: ``"DD-Mmm-YYYY HH:MM:SS +HHMM"`` (including
-   double-quotes).
+   Convert *date_time* to an IMAP4 ``INTERNALDATE`` representation.  The
+   return value is a string in the form: ``"DD-Mmm-YYYY HH:MM:SS
+   +HHMM"`` (including double-quotes).  The *date_time* argument can be a
+   number (int or float) representing seconds since epoch (as returned
+   by :func:`time.time`), a 9-tuple representing local time (as returned by
+   :func:`time.localtime`), or a double-quoted string.  In the last case, it
+   is assumed to already be in the correct format.
 
 Note that IMAP4 message numbers change as the mailbox changes; in particular,
 after an ``EXPUNGE`` command performs deletions the remaining messages are
 renumbered. So it is highly advisable to use UIDs instead, with the UID command.
 
 At the end of the module, there is a test section that contains a more extensive
 example of usage.
 
 
 .. seealso::
 
    Documents describing the protocol, and sources and binaries  for servers
@@ -294,27 +298,28 @@
    Returns IMAP namespaces as defined in RFC2342.
 
    .. versionadded:: 2.3
 
 
 .. method:: IMAP4.noop()
 
    Send ``NOOP`` to server.
 
 
 .. method:: IMAP4.open(host, port)
 
-   Opens socket to *port* at *host*. The connection objects established by this
+   Opens socket to *port* at *host*.  This method is implicitly called by
+   the :class:`IMAP4` constructor.  The connection objects established by this
    method will be used in the ``read``, ``readline``, ``send``, and ``shutdown``
-   methods. You may override this method.
+   methods.  You may override this method.
 
 
 .. method:: IMAP4.partial(message_num, message_part, start, length)
 
    Fetch truncated part of a message. Returned data is a tuple of message part
    envelope and data.
 
 
 .. method:: IMAP4.proxyauth(user)
 
    Assume authentication as *user*. Allows an authorised administrator to proxy
    into any user's mailbox.
@@ -392,25 +397,26 @@
 
 
 .. method:: IMAP4.setquota(root, limits)
 
    Set the ``quota`` *root*'s resource *limits*. This method is part of the IMAP4
    QUOTA extension defined in rfc2087.
 
    .. versionadded:: 2.3
 
 
 .. method:: IMAP4.shutdown()
 
-   Close connection established in ``open``. You may override this method.
+   Close connection established in ``open``.  This method is implicitly
+   called by :meth:`IMAP4.logout`.  You may override this method.
 
 
 .. method:: IMAP4.socket()
 
    Returns socket instance used to connect to server.
 
 
 .. method:: IMAP4.sort(sort_criteria, charset, search_criterion[, ...])
 
    The ``sort`` command is a variant of ``search`` with sorting semantics for the
    results.  Returned data contains a space separated list of matching message
    numbers.
