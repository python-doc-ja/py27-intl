@@ -78,25 +78,25 @@
    Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a float
    and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is zero,
    returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used to "pick
    apart" the internal representation of a float in a portable way.
 
 
 .. function:: fsum(iterable)
 
    Return an accurate floating point sum of values in the iterable.  Avoids
    loss of precision by tracking multiple intermediate partial sums::
 
         >>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
-        0.99999999999999989
+        0.9999999999999999
         >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])
         1.0
 
    The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the
    typical case where the rounding mode is half-even.  On some non-Windows
    builds, the underlying C library uses extended precision addition and may
    occasionally double-round an intermediate sum causing it to be off in its
    least significant bit.
 
    For further discussion and two alternative approaches, see the `ASPN cookbook
    recipes for accurate floating point summation
    <http://code.activestate.com/recipes/393090/>`_\.
@@ -150,24 +150,40 @@
 platform C double type), in which case any float *x* with ``abs(x) >= 2**52``
 necessarily has no fractional bits.
 
 
 Power and logarithmic functions
 -------------------------------
 
 .. function:: exp(x)
 
    Return ``e**x``.
 
 
+.. function:: expm1(x)
+
+   Return ``e**x - 1``.  For small floats *x*, the subtraction in
+   ``exp(x) - 1`` can result in a significant loss of precision; the
+   :func:`expm1` function provides a way to compute this quantity to
+   full precision::
+
+      >>> from math import exp, expm1
+      >>> exp(1e-5) - 1  # gives result accurate to 11 places
+      1.0000050000069649e-05
+      >>> expm1(1e-5)    # result accurate to full precision
+      1.0000050000166668e-05
+
+   .. versionadded:: 2.7
+
+
 .. function:: log(x[, base])
 
    With one argument, return the natural logarithm of *x* (to base *e*).
 
    With two arguments, return the logarithm of *x* to the given *base*,
    calculated as ``log(x)/log(base)``.
 
    .. versionchanged:: 2.3
       *base* argument added.
 
 
 .. function:: log1p(x)
@@ -294,24 +310,56 @@
 
 
 .. function:: sinh(x)
 
    Return the hyperbolic sine of *x*.
 
 
 .. function:: tanh(x)
 
    Return the hyperbolic tangent of *x*.
 
 
+Special functions
+-----------------
+
+.. function:: erf(x)
+
+   Return the error function at *x*.
+
+   .. versionadded:: 2.7
+
+
+.. function:: erfc(x)
+
+   Return the complementary error function at *x*.
+
+   .. versionadded:: 2.7
+
+
+.. function:: gamma(x)
+
+   Return the Gamma function at *x*.
+
+   .. versionadded:: 2.7
+
+
+.. function:: lgamma(x)
+
+   Return the natural logarithm of the absolute value of the Gamma
+   function at *x*.
+
+   .. versionadded:: 2.7
+
+
 Constants
 ---------
 
 .. data:: pi
 
    The mathematical constant Ï€ = 3.141592..., to available precision.
 
 
 .. data:: e
 
    The mathematical constant e = 2.718281..., to available precision.
 
