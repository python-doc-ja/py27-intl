:mod:`ttk` --- Tk themed widgets
================================

.. module:: ttk
   :synopsis: Tk themed widget set
.. sectionauthor:: Guilherme Polo <ggpolo@gmail.com>


.. index:: single: ttk

:mod:`ttk` モジュールは Tk 8.5 で導入された Tk のテーマ付きウィジェットへのアクセスを提供します。
Tk 8.5 が無い環境で Python がコンパイルされていた場合でも、 Tile がインストールされていればこのモジュールはそれを使おうとします。
しかし、 X11 上のフォントのアンチエイリアスや透過ウィンドウ (X11 ではコンポジションウィンドウマネージャが必要です) などの新しい Tk が提供している機能は使えません。

:mod:`ttk` の基本的なアイディアは、拡張可能性のためにウィジェットの動作を実装するコードと見た目を記述するコードを分離することです。

.. seealso::

   `Tk Widget Styling Support <http://www.tcl.tk/cgi-bin/tct/tip/48>`_
      Tk のテーマサポートの始まりのドキュメント


Ttk を使う
----------

Ttk を使い始めるために、モジュールをインポートします::

   import ttk

しかしこのようなコードでは::

   from Tkinter import *

このように使いたいことがあるかもしれません::

   from Tkinter import *
   from ttk import *

このように書くと、いくつかの :mod:`ttk` ウィジェット (:class:`Button` 、
:class:`Checkbutton`, :class:`Entry`, :class:`Frame`, :class:`Label` 、
:class:`LabelFrame`, :class:`Menubutton`, :class:`PanedWindow` 、
:class:`Radiobutton`, :class:`Scale` 、
:class:`Scrollbar`) は自動的に Tk ウィジェットを置き換えます。

これにはプラットフォームをまたいでより良い見た目を得られるという、直接的な利益がありますが、ウィジェットは完全な互換性を持っているわけではないことに注意してください。
一番の違いは "fg" や "bg" やその他のスタイルに関係するウィジェットのオプションが Ttk ウィジェットから無くなっていることです。
同じ (もしくはより良い) 見た目にするためには :class:`ttk.Style` を使ってください。

.. seealso::

   `Converting existing applications to use the Tile widgets <http://tktable.sourceforge.net/tile/doc/converting.txt>`_
     Tcl において、アプリケーションを新しいウィジェットに移行するときに出てくる典型的な差異について書かれているテキスト


Ttk ウィジェット
----------------

Ttk には 17 のウィジェットがあり、そのうち 11 は Tkinter に既にあるものです:
:class:`Button`, :class:`Checkbutton`, :class:`Entry`, :class:`Frame` 、
:class:`Label`, :class:`LabelFrame`, :class:`Menubutton` 、
:class:`PanedWindow`, :class:`Radiobutton`, :class:`Scale` 、
:class:`Scrollbar` 。
新しい 6 つのウィジェットクラスは次のものです: :class:`Combobox` 、
:class:`Notebook`, :class:`Progressbar`, :class:`Separator` 、
:class:`Sizegrip`, :class:`Treeview` 。
これらのクラスは全て :class:`Widget` の子クラスです。

上にも書いた通り、スタイルの記述コードと同様に見た目も変わっていることに気付くでしょう。
それを見せるために、非常に簡単な例を以下に示します。

Tk のコード::

   l1 = Tkinter.Label(text="Test", fg="black", bg="white")
   l2 = Tkinter.Label(text="Test", fg="black", bg="white")


それに相当する Ttk のコード::

   style = ttk.Style()
   style.configure("BW.TLabel", foreground="black", background="white")

   l1 = ttk.Label(text="Test", style="BW.TLabel")
   l2 = ttk.Label(text="Test", style="BW.TLabel")

TtkStyling_ についての情報は :class:`Style` クラスの文書を読んでください。

ウィジェット
------------

:class:`ttk.Widget` はTk のテーマ付きウィジェットがサポートしている標準のオプションやメソッドを定義するもので、
これを直接インスタンス化するものではありません。


標準オプション
^^^^^^^^^^^^^^

全ての :mod:`ttk` ウィジェットは以下のオプションを受け付けます:

   +------------+--------------------------------------------------------------+
   | オプション | 説明                                                         |
   +============+==============================================================+
   | class      | ウィンドウクラスを指定します。このクラスはオプション         |
   |            | データベースにウィンドウの他のオプションについて問い合わせを |
   |            | 行うときに使われ、これによりウィンドウのデフォルトの         |
   |            | バインドタグを決定したり、ウィジェットのデフォルトの         |
   |            | レイアウトやスタイルを選択します。これは読み取り専用の       |
   |            | オプションでウィンドウが作られるときにのみ指定できます。     |
   +------------+--------------------------------------------------------------+
   | cursor     | このウィジェットで使うマウスカーソルを指定します。           |
   |            | 空文字列 (デフォルト) が設定されている場合は、               |
   |            | カーソルは親ウィジェットのものを引き継ぎます。               |
   +------------+--------------------------------------------------------------+
   | takefocus  | キーボードによる移動のときにウィンドウがフォーカスを         |
   |            | 受け入れるかを決定します。 0 、 1 、空文字列のいずれかを     |
   |            | 返します。 0 の場合、キーボードによる移動でそのウィンドウは  |
   |            | 常にスキップされます。 1 の場合、そのウィンドウが            |
   |            | 表示されているときに限り入力フォーカスを受け入れます。       |
   |            | 空文字列は、移動スクリプトによってウィンドウに               |
   |            | フォーカスを当てるかどうかが決まることを意味します。         |
   +------------+--------------------------------------------------------------+
   | style      | 独自のウィジェットスタイルを指定するのに使われます。         |
   +------------+--------------------------------------------------------------+


スクロール可能ウィジェットのオプション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下のオプションはスクロールバーで操作されるウィジェットが持っているオプションです。

   +----------------+---------------------------------------------------------+
   | オプション     | 説明                                                    |
   +================+=========================================================+
   | xscrollcommand | 水平方向のスクロールバーとのやり取りに使われます。      |
   |                |                                                         |
   |                | ウィジェットのウィンドウが再描画されたとき,             |
   |                | ウィジェットは scrollcommand に基いて Tcl コマンドを    |
   |                | 生成します。                                            |
   |                |                                                         |
   |                | 通常このオプションにはあるスクロールバーの              |
   |                | :meth:`Scrollbar.set` メソッドが設定されます。          |
   |                | こうすると、ウィンドウの見た目が変わったときに          |
   |                | スクロールバーの状態も更新されます。                    |
   +----------------+---------------------------------------------------------+
   | yscrollcommand | 垂直方向のスクロールバーとのやり取りに使われます。      |
   |                | 詳しいことは、上記を参照してください。                  |
   +----------------+---------------------------------------------------------+


ラベルオプション
^^^^^^^^^^^^^^^^

以下のオプションはラベルやボタンやボタンに類似したウィジェットが持っているオプションです。

.. tabularcolumns:: |p{0.2\textwidth}|p{0.7\textwidth}|
..

   +--------------+-----------------------------------------------------------+
   | オプション   | 説明                                                      |
   +==============+===========================================================+
   | text         | ウィジェットに表示される文字列を指定します。              |
   +--------------+-----------------------------------------------------------+
   | textvariable | text オプションの代わりに使う値の変数名を指定します。     |
   +--------------+-----------------------------------------------------------+
   | underline    | このオプションを設定すると、文字列の中で下線を引く文字の  |
   |              | インデックス (0 基点) を指定します。下線が引かれた文字は  |
   |              | ショートカットとして使われます。                          |
   +--------------+-----------------------------------------------------------+
   | image        | 表示する画像を指定します。これは 1 つ以上の要素を持つ     |
   |              | リストです。先頭の要素はデフォルトの画像名です。          |
   |              | 残りの要素は :meth:`Style.map` で定義されているような     |
   |              | 状態名と値のペアの並びで、ウィジェットがある状態、        |
   |              | もしくはある状態の組み合わせにいるときに使用する          |
   |              | 別の画像を指定します。                                    |
   |              | このリストにある全ての画像は同じサイズでなればなりません。|
   +--------------+-----------------------------------------------------------+
   | compound     | text オプションと image オプションが両方とも              |
   |              | 指定されていた場合に、テキストに対して                    |
   |              | 画像をどう配置するかを指定します。                        |
   |              |                                                           |
   |              | * text: テキストのみ表示する                              |
   |              | * image: 画像のみ表示する                                 |
   |              | * top, bottom, left, right: それぞれ画像をテキストの      |
   |              |   上、下、左、右に配置する。                              |
   |              | * none: デフォルト。もしあれば画像を表示し、              |
   |              |   そうでなければテキストを表示する                        |
   +--------------+-----------------------------------------------------------+
   | width        | 0 より大きい場合、テキストラベルを作成するのに            |
   |              | どれくらいのスペースを使うかを文字の幅で指定します。      |
   |              | 0 より小さい場合、最小の幅が指定されます。                |
   |              | 0 もしくは無指定の場合、テキストラベルに対して            |
   |              | 自然な幅が使われます。                                    |
   +--------------+-----------------------------------------------------------+


互換性オプション
^^^^^^^^^^^^^^^^

   +------------+--------------------------------------------------------------+
   | オプション | 説明                                                         |
   +============+==============================================================+
   | state      | "normal" か "disabled" に設定され、 "disabled" 状態のビットを|
   |            | コントロールします。これは書き込み専用のオプションです:      |
   |            | これを設定するとウィジェットの状態を変更できますが、         |
   |            | :meth:`Widget.state` メソッドはこのオプションに影響を        |
   |            | 及ぼしません。                                               |
   +------------+--------------------------------------------------------------+

ウィジェットの状態
^^^^^^^^^^^^^^^^^^

ウィジェットの状態は独立した状態フラグのビットマップです。

   +------------+-------------------------------------------------------------+
   | フラグ     | 説明                                                        |
   +============+=============================================================+
   | active     | マウスカーソルがウィジェットの上にあり、マウスのボタンを    |
   |            | クリックすることで何らかの動作をさせられます。              |
   +------------+-------------------------------------------------------------+
   | disabled   | プログラムによってウィジェットは無効化されています。        |
   +------------+-------------------------------------------------------------+
   | focus      | ウィジェットにキーボードフォーカスがあります。              |
   +------------+-------------------------------------------------------------+
   | pressed    | ウィジェットは押されています。                              |
   +------------+-------------------------------------------------------------+
   | selected   | チェックボタンやラジオボタンのようなウィジェットでの        |
   |            | "オン" や "チェック有" や "選択中" に当たります。           |
   +------------+-------------------------------------------------------------+
   | background | Windows と Mac には "アクティブな" もしくは最前面の         |
   |            | ウィンドウという概念があります。背面のウィンドウにある      |
   |            | ウィジェットには *background* 状態が設定され、              |
   |            | 最前面のウィンドウにあるウィジェットでは解除されます。      |
   +------------+-------------------------------------------------------------+
   | readonly   | ウィジェットはユーザからの変更を受け付けません。            |
   +------------+-------------------------------------------------------------+
   | alternate  | ウィジェット特有の切り替え表示になっています。              |
   +------------+-------------------------------------------------------------+
   | invalid    | ウィジェットの値が不正です。                                |
   +------------+-------------------------------------------------------------+


状態仕様は状態名の並びになっていて、状態名の先頭にはビットがオフになっていることを示す感嘆符が付くことがあります。

ttk.Widget
^^^^^^^^^^

以下に書かれているメソッドに加えて、 :class:`ttk.Widget` クラスは
:meth:`Tkinter.Widget.cget` メソッドと :meth:`Tkinter.Widget.configure` メソッドをサポートしています。

.. class:: Widget

   .. method:: identify(x, y)

      *x* *y* の位置にある要素の名前、もしくは
      その位置に要素が無ければ空文字列を返します。

      *x* と *y* はウィジェットに対するピクセル単位の座標です。


   .. method:: instate(statespec[, callback=None[, *args[, **kw]]])

      ウィジェットの状態をチェックします。コールバックが指定されていない場合、
      ウィジェットの状態が *statespec* に一致していれば True 、
      そうでなければ False を返します。
      コールバックが指定されていて、ウィジェットの状態が *statespec* に
      一致している場合、引数に *args* を指定してそのコールバックを呼び出します。


   .. method:: state([statespec=None])

      ウィジェットの状態を変更したり、取得したりします。
      *statespec* が指定されている場合、それに応じてウィジェットの状態を設定し、
      どのフラグが変更されたかを示す新しい *statespec* を返します。
      *statespec* が指定されていない場合、現在の状態フラグを返します。

   通常 *statespec* はリストもしくはタプルです。


コンボボックス
--------------

:class:`ttk.Combobox` ウィジェットはテキストフィールドと値のポップダウンリストを結び付けます。
このウィジェットは :class:`Entry` の子クラスです。

:class:`Widget` から継承したメソッド (:meth:`Widget.cget`、
:meth:`Widget.configure`, :meth:`Widget.identify`, :meth:`Widget.instate`
、 :meth:`Widget.state`) と :class:`Entry` から継承したメソッド
(:meth:`Entry.bbox`, :meth:`Entry.delete`, :meth:`Entry.icursor` 、
:meth:`Entry.index`, :meth:`Entry.inset`, :meth:`Entry.selection` 、
:meth:`Entry.xview`) に加え、このクラスには :class:`ttk.Combobox` で説明する
メソッドがあります。

オプション
^^^^^^^^^^

このウィジェットは以下のオプションを受け付けます:

   +-----------------+---------------------------------------------------------+
   | オプション      | 説明                                                    |
   +=================+=========================================================+
   | exportselection | 真偽値を取る。設定されている場合、ウィジェットの選択は  |
   |                 | ウィンドウマネージャの選択とリンクしています。(例えば、 |
   |                 | :meth:`Misc.selection_get` を実行することで得られます。)|
   +-----------------+---------------------------------------------------------+
   | justify         | ウィジェットの中でテキストをどう配置するかを指定します。|
   |                 | "left" 、 "center" 、 "right" のうちのどれか 1 つです。 |
   +-----------------+---------------------------------------------------------+
   | height          | ポップダウンリストの高さを行数で指定します。            |
   +-----------------+---------------------------------------------------------+
   | postcommand     | コンボボックスの値を表示する直前に呼び出される、        |
   |                 | (:meth:`Misc.register` などで登録した) スクリプトです。 |
   |                 | どの値を表示するかについても指定できます。              |
   +-----------------+---------------------------------------------------------+
   | state           | "normal" 、 "readonly" 、 "disabled" のどれか 1 つです。|
   |                 | "readonly" 状態では、直接入力値を編集することはできず、 |
   |                 | ユーザはドロップダウンリストから値を 1 つ選ぶことしか   |
   |                 | できません。 "normal" 状態では、テキストフィールドは    |
   |                 | 直接編集できます。 "disabled" 状態では、                |
   |                 | コンボボックスは一切反応しません。                      |
   +-----------------+---------------------------------------------------------+
   | textvariable    | コンボボックスの値とリンクさせる変数名を指定します。    |
   |                 | その変数の値が変更されたとき、ウィジェットの値は更新    |
   |                 | されます。ウィジェットの値が更新されたときも同様です。  |
   |                 | :class:`Tkinter.StringVar` を参照してください。         |
   +-----------------+---------------------------------------------------------+
   | values          | ドロップダウンリストに表示する値のリストを指定します。  |
   +-----------------+---------------------------------------------------------+
   | width           | 入力ウィンドウに必要な幅をウィジェットのフォントの      |
   |                 | 平均的なサイズの文字で測った、文字数を指定します。      |
   +-----------------+---------------------------------------------------------+


仮想イベント
^^^^^^^^^^^^

コンボボックスウィジェットは、ユーザが値のリストから1つ選んだときに
仮想イベント **<<ComboboxSelected>>** を生成します。


ttk.Combobox
^^^^^^^^^^^^

.. class:: Combobox

   .. method:: current([newindex=None])

      *newindex* が指定されている場合、コンボボックスの値が
      ドロップダウンリストの *newindex* の位置にある値に設定されます。
      そうでない場合、現在の値のインデックスを、もしくは現在の値がリストに
      含まれていないなら -1 を返します。


   .. method:: get()

      コンボボックスの現在の値を返します。


   .. method:: set(value)

      コンボボックスの値を *value* に設定します。


ノートブック
------------

Ttk ノートブックウィジェットは複数のウィンドウを管理し、同時に 1 つのウィンドウを表示します。
それぞれの子ウィンドウはタブの関連付けられていて、ユーザはそれを選択して表示されているウィンドウを切り替えます。


オプション
^^^^^^^^^^

このウィジェットは以下のオプションを受け付けます:

   +------------+-------------------------------------------------------------+
   | オプション | 説明                                                        |
   +============+=============================================================+
   | height     | 0 より大きな値が設定されている場合、                        |
   |            | (内部のパディングやタブを含まない) ペイン領域に必要な高さを |
   |            | 指定します。設定されていない場合、全てのペインの            |
   |            | 高さの最大値が使われます。                                  |
   +------------+-------------------------------------------------------------+
   | padding    | ノートブックの外周に付け足す追加の領域の量を指定します。    |
   |            | パディングは最大 4 個の長さ指定のリストです:                |
   |            | 左、上、右、下の順で指定します。4 個より少ない場合、        |
   |            | デフォルトで下は上と、右は左と、上は左と同じ値が、          |
   |            | それぞれ使われます。                                        |
   +------------+-------------------------------------------------------------+
   | width      | 0 より大きな値が指定されている場合、                        |
   |            | (内部のパディングを含まない) ペイン領域に必要な幅を         |
   |            | 指定します。設定されていない場合、全てのペインの            |
   |            | 幅の最大値が使われます。                                    |
   +------------+-------------------------------------------------------------+


タブオプション
^^^^^^^^^^^^^^

.. memo

   by cocoatomo
   The description about image option refers to :class:`Widget`,
   which section has no explanation about image option.
   It may be refering `ラベルオプション`_ ?

タブ用のオプションもあります:

   +-----------+--------------------------------------------------------------+
   | オプション| 説明                                                         |
   +===========+==============================================================+
   | state     | "normal" 、 "disabled" 、 "hidden" のうちどれか 1 つです。   |
   |           | "disabled" の場合、タブは選択することができません。          |
   |           | "hidden" の場合、タブは表示されません。                      |
   +-----------+--------------------------------------------------------------+
   | sticky    | ペイン領域の中に子ウィンドウがどう置かれるかを指定します。   |
   |           | 指定する値は "n" 、 "s" 、 "e" 、 "w" からなる 0 文字以上の  |
   |           | 文字列です。配置マネージャの :meth:`grid` と同様に、         |
   |           | それぞれの文字は子ウィンドウが (北、南、東、西の) どの辺に   |
   |           | 対して追随するかに対応しています。                           |
   +-----------+--------------------------------------------------------------+
   | padding   | ノートブックとこのペインの間に付け足す追加の領域の量を       |
   |           | 指定します。文法はこのウィジェットの padding オプションと    |
   |           | 同じです。                                                   |
   +-----------+--------------------------------------------------------------+
   | text      | タブに表示するテキストを指定します。                         |
   +-----------+--------------------------------------------------------------+
   | image     | タブに表示する画像を指定します。 :class:`Widget` の          |
   |           | オプションの説明を参照してください。                         |
   +-----------+--------------------------------------------------------------+
   | compound  | text オプションと image オプションが両方指定されているときに |
   |           | テキストに対して画像をどう表示するかを指定します。           |
   |           | 指定する値については `ラベルオプション`_ を参照してください。|
   +-----------+--------------------------------------------------------------+
   | underline | テキスト中の下線を引く文字のインデックス (0 基点) を指定     |
   |           | します。                                                     |
   |           | :meth:`Notebook.enable_traversal` が呼ばれていた場合、       |
   |           | 下線が引かれた文字はショートカットとして使われます。         |
   +-----------+--------------------------------------------------------------+


タブ識別子
^^^^^^^^^^

:class:`ttk.Notebook` のいくつかのメソッドにある *tab_id* は以下の形式を取ります:

* 0 からタブの数の間の整数。
* 子ウィンドウの名前。
* タブを指し示す "@x,y" という形式の位置指定。
* 現在選択されているタブを指し示すリテラル文字列 "current"。
* タブ数を返すリテラル文字列 "end" (:meth:`Notebook.index` でのみ有効)。


仮想イベント
^^^^^^^^^^^^

このウィジェットは新しいタブが選択された後に仮想イベント **<<NotebookTabChanged>>** を生成します。


ttk.Notebook
^^^^^^^^^^^^

.. class:: Notebook

   .. method:: add(child, **kw)

      ノートブックに新しいタブを追加します。

      ウィンドウが現在ノートブックによって管理されているが隠れている場合、
      以前の位置に復元します。

      利用可能なオプションのリストについては `タブオプション`_ を参照してください。


   .. method:: forget(tab_id)

      *tab_id* で指定されたタブを削除します。関連付けられていたウィンドウは切り離され、管理対象でなくなります。


   .. method:: hide(tab_id)

      *tab_id* で指定されたタブを隠します。

      タブは表示されませんが、関連付いているウィンドウはノートブックによって保持されていて、
      その設定も記憶されています。隠れたタブは :meth:`add` コマンドで復元できます。


   .. method:: identify(x, y)

      *x* *y* の位置にあるタブの名前を、そこにタブが無ければ空文字列を返します。


   .. method:: index(tab_id)

      *tab_id* で指定されたタブのインデックスを、*tab_id* が文字列の "end"
      だった場合はタブの総数を返します。


   .. method:: insert(pos, child, **kw)

      指定された位置にペインを挿入します。

      *pos* は文字列の "end" か整数のインデックスか管理されている子ウィンドウの名前です。
      *child* が既にノートブックの管理対象だった場合、指定された場所に移動させます。

      利用可能なオプションのリストについては `タブオプション`_ を参照してください。


   .. method:: select([tab_id])

      指定された *tab_id* を選択します。

      関連付いている子ウィンドウは表示され、直前に選択されていたウィンドウは
      (もし異なれば) 表示されなくなります。
      *tab_id* が指定されていない場合は、現在選択されているペインのウィジェット名を返します。


   .. method:: tab(tab_id[, option=None[, **kw]])

      指定された *tab_id* のオプションを問い合わせたり、変更したりします。

      *kw* が与えられなかった場合、タブのオプション値の辞書を返します。
      *option* が指定されていた場合、その *option* の値を返します。
      それ以外の場合は、オプションに対応する値が設定されます。


   .. method:: tabs()

      ノートブックに管理されているウィンドウのリストを返します。


   .. method:: enable_traversal()

      このノートブックを含む最上位にあるウィンドウでのキーボード移動を可能にします。

      これによりノートブックを含んだ最上位にあるウィンドウに対し、
      以下のキーバインディングが追加されます:

      * Control-Tab: 現在選択されているタブの 1 つ次のタブを選択します。
      * Shift-Control-Tab: 現在選択されているタブの 1 つ前のタブを選択します。
      * Alt-K: K があるタブの (下線が引かれた) ショートカットキーだとして、
        そのタブを選択します。

      ネストしたノートブックも含め、1 つのウィンドウの最上位にある
      複数のノートブックのキーボード移動が可能になることもあります。
      しかしノートブック上の移動は、全てのペインが同じノートブックを親としているときのみ正しく動作します。


プログレスバー
--------------

:class:`ttk.Progressbar` ウィジェットは長く走る処理の状態を表示します。
このウィジェットは 2 つのモードで動作します:
決定的モードでは、全ての処理の総量のうち完了した量を表示します。
非決定的モードでは、今何か処理が行われていることをユーザに示します。


オプション
^^^^^^^^^^

このウィジェットは以下のオプションを受け付けます:

   +------------+-------------------------------------------------------------+
   | オプション | 説明                                                        |
   +============+=============================================================+
   | orient     | "horizontal" もしくは "vertical" のいずれかです。           |
   |            | プログレスバーの方向を指定します。                          |
   +------------+-------------------------------------------------------------+
   | length     | プログレスバーの長さを指定します。                          |
   |            | (水平方向の場合は幅、垂直方向の場合は高さです)              |
   +------------+-------------------------------------------------------------+
   | mode       | "determinate" か "indeterminate" のいずれかです。           |
   +------------+-------------------------------------------------------------+
   | maximum    | 最大値を数値で指定します。デフォルトは 100 です。           |
   +------------+-------------------------------------------------------------+
   | value      | プログレスバーの現在値です。決定的 ("determinate") モード   |
   |            | では、完了した処理の量を表します。                          |
   |            | 非決定的 ("indeterminate") モードでは、*maximum* を法として |
   |            | 解釈され、値が *maximum* に達したときにプログレスバーは     |
   |            | 1 "サイクル" を完了したことになります。                     |
   +------------+-------------------------------------------------------------+
   | variable   | value オプションとリンクさせる変数名です。                  |
   |            | 指定されている場合、変数の値が変更されるとプログレスバーの  |
   |            | 値は自動的にその値に設定されます。                          |
   +------------+-------------------------------------------------------------+
   | phase      | 読み取り専用のオプションです。このウィジェットの値が 0 より |
   |            | 大きく、かつ決定的モードでは最大値より小さいときに、        |
   |            | ウィジェットが定期的にこのオプションの値を増加させます。    |
   |            | このオプションは現在の画面テーマが追加のアニメーション効果を|
   |            | 出すのに使います。                                          |
   +------------+-------------------------------------------------------------+


ttk.Progressbar
^^^^^^^^^^^^^^^

.. class:: Progressbar

   .. method:: start([interval])

      自動増加モードを開始します: *interval* ミリ秒ごとに
      :meth:`Progressbar.step` を繰り返し呼び出すタイマーイベントを設定します。
      引数で指定しない場合は、 *interval* はデフォルトで 50 ミリ秒になります。


   .. method:: step([amount])

      プログレスバーの値を *amount* だけ増加させます。

      引数で指定しない場合は、 *amount* はデフォルトで 1.0 になります。


   .. method:: stop()

      自動増加モードを停止します: このプログレスバーの :meth:`Progressbar.start` で
      開始された繰り返しのタイマーイベントを全てキャンセルします。


セパレータ
----------

:class:`ttk.Separator` ウィジェットは水平もしくは垂直のセパレータを表示します。

:class:`ttk.Widget` から継承したメソッド以外にメソッドを持ちません。


オプション
^^^^^^^^^^

このウィジェットは以下のオプションを受け付けます:

   +------------+------------------------------------------------------------+
   | オプション | 説明                                                       |
   +============+============================================================+
   | orient     | "horizontal" か "vertical" のいずれかです。                |
   |            | セパレータの方向を指定します。                             |
   +------------+------------------------------------------------------------+


サイズグリップ
--------------

(グローボックスとしても知られる) :class:`ttk.Sizegrip` ウィジェットは、
押してつまみ部分をドラッグすることで最上位のウィンドウのサイズを変更できます。

このウィジェットは :class:`ttk.Widget` から継承したもの以外のオプションとメソッドを持ちません。


プラットフォーム固有のメモ
^^^^^^^^^^^^^^^^^^^^^^^^^^

* Mac OS X では、最上位のウィンドウにはデフォルトで組み込みのサイズグリップが含まれています。
  組み込みのグリップが :class:`Sizegrip` を隠してしまうので、 :class:`Sizegrip` を追加するのは無害です。


バグ
^^^^

.. memo

   I (cocoatomo) didn't have confidence translations on 

   - relative to the right or bottom of the screen
   - (e.g. ....).

* 最上位のウィンドウの位置がスクリーンに対して右や下に指定されている場合 (などなど....)、
  :class:`Sizegrip` ウィジェットはウィンドウのサイズ変更をしません。
* このウィジェットは "南東" 方向のサイズ変更しかサポートしていません。


ツリービュー
------------

:class:`ttk.Treeview` ウィジェットは階層のある要素 (アイテム) の集まりを表示します。
それぞれの要素はテキストラベル、オプションの画像、オプションのデータのリストを持っています。
データはラベルの後に続くカラムに表示されます。

データが表示される順序はウィジェットの ``displaycolumns`` オプションで制御されます。
ツリーウィジェットはカラムヘッダを表示することもできます。
カラムには数字もしくはウィジェットの columns オプションにある名前でアクセスできます。
`カラム識別子`_ を参照してください。

それぞれの要素は一意な名前で識別されます。
要素の作成時に ID が与えられなかった場合、ウィジェットが要素の ID を生成します。
このウィジェットには ``{}`` という名前の特別なルート要素があります。
ルート要素自身は表示されません; その子要素たちが階層の最上位に現れます。

それぞれの要素はタグのリストも持っていて、イベントバインディングと個別の要素を関連付け、要素の見た目を管理するのに使えます。

ツリービューウィジェットは水平方向と垂直方向のスクロールをサポートしていて、
`スクロール可能ウィジェットのオプション`_ に記述してあるオプションと :meth:`Treeview.xview` メソッドおよび :meth:`Treeview.yview` メソッドが使えます。


オプション
^^^^^^^^^^

このウィジェットは以下のオプションを受け付けます:

.. note from translator (cocoatomo)

   - tag binding refers tag_bind method
   - 'list' is list in Tcl, which is space-separated strings, not list in Python

.. tabularcolumns:: |p{0.2\textwidth}|p{0.7\textwidth}|
..

   +----------------+--------------------------------------------------------+
   | オプション     | 説明                                                   |
   +================+========================================================+
   | columns        | カラム数とその名前を指定するカラム識別子のリストです。 |
   +----------------+--------------------------------------------------------+
   | displaycolumns | どのデータカラムをどの順序で表示するかを指定する、     |
   |                | (名前もしくは整数のインデックスの) カラム識別子の      |
   |                | リストか、文字列 "#all" です。                         |
   +----------------+--------------------------------------------------------+
   | height         | 表示する行数を指定します。                             |
   |                | メモ: 表示に必要な幅はカラム幅の合計から決定されます。 |
   +----------------+--------------------------------------------------------+
   | padding        | ウィジェットの内部のパディングのサイズを指定します。   |
   |                | パディングは最大 4 個の長さ指定のリストです。          |
   +----------------+--------------------------------------------------------+
   | selectmode     | 組み込みのクラスバインディングが選択状態を             |
   |                | どう管理するかを指定します。設定する値は               |
   |                | "extended" 、 "browse" 、 "none" のどれか 1 つです。   |
   |                | "extended" に設定した場合 (デフォルト)、複数の要素が   |
   |                | 選択できます。 "browse" に設定した場合、同時に 1 つの  |
   |                | 要素しか選択できません。 "none" に設定した場合、選択を |
   |                | 変更することはできません。                             |
   |                |                                                        |
   |                | このオプションの値によらず、アプリケーションのコードと |
   |                | タグバインディングからは好きなように選択状態を         |
   |                | 設定できます。                                         |
   +----------------+--------------------------------------------------------+
   | show           | ツリーのどの要素を表示するかを指定する、以下にある値を |
   |                | 0 個以上含むリストです。                               |
   |                |                                                        |
   |                | * tree: カラム #0 にツリーのラベルを表示します。       |
   |                | * headings: ヘッダ行を表示します。                     |
   |                |                                                        |
   |                | デフォルトは "tree headings" 、つまり全ての要素を      |
   |                | 表示します。                                           |
   |                |                                                        |
   |                | **メモ**: show="tree" が指定されていない場合でも、     |
   |                | カラム #0 は常にツリーカラムを参照します。             |
   +----------------+--------------------------------------------------------+


要素オプション
^^^^^^^^^^^^^^

以下の要素オプションは、ウィジェットの insert コマンドと item コマンドで要素に対して指定できます。

   +------------+--------------------------------------------------------------+
   | オプション | 説明                                                         |
   +============+==============================================================+
   | text       | アイテムに表示するテキストラベルです。                       |
   +------------+--------------------------------------------------------------+
   | image      | ラベルの左に表示される Tk 画像です。                         |
   +------------+--------------------------------------------------------------+
   | values     | 要素に関連付けられている値のリストです。                     |
   |            |                                                              |
   |            | それぞれの要素はウィジェットの columns オプションと          |
   |            | 同じ数の値を持たなければいけません。 columns オプションより  |
   |            | 少ない場合、残りの値は空として扱われます。                   |
   |            | columns オプションより多い場合、余計な値は無視されます。     |
   +------------+--------------------------------------------------------------+
   | open       | 要素の子供を表示するか隠すかを指示する真偽値です。           |
   +------------+--------------------------------------------------------------+
   | tags       | この要素に関連付いているタグのリストです。                   |
   +------------+--------------------------------------------------------------+


タグオプション
^^^^^^^^^^^^^^

以下のオプションはタグに対して設定できます:

   +------------+-----------------------------------------------------------+
   | オプション | 説明                                                      |
   +============+===========================================================+
   | foreground | テキストの色を指定します。                                |
   +------------+-----------------------------------------------------------+
   | background | セルや要素の背景色を指定します。                          |
   +------------+-----------------------------------------------------------+
   | font       | テキストを描画するときに使うフォントを指定します。        |
   +------------+-----------------------------------------------------------+
   | image      | 要素の image オプションが空だった場合に使用する画像を     |
   |            | 指定します。                                              |
   +------------+-----------------------------------------------------------+


カラム識別子
^^^^^^^^^^^^

カラム識別子は以下のいずれかの形式を取ります:

* columns オプションのリストにある名前。
* n 番目のデータカラムを指し示す整数 n 。
* n を整数として n 番目の表示されているカラムを指し示す #n という形式の文字列。

メモ:

* 要素のオプション値は実際に格納されている順序とは違った順序で表示されることがあります。
* show="tree" が指定されていない場合でも、カラム #0 は常にツリーカラムを指しています。

データカラムを指す数字は、要素の values オプションのリストのインデックスです;
表示カラムを指す数字は、値が表示されているツリーのカラム番号です。
ツリーラベルはカラム #0 に表示されます。
displaycolumns オプションが設定されていない場合は、 n 番目のデータカラムは
カラム #n+1 に表示されます。
再度言っておくと、 **カラム #0 は常にツリーカラムを指します** 。


仮想イベント
^^^^^^^^^^^^

ツリービューは以下の仮想イベントを生成します。

   +--------------------+--------------------------------------------------+
   | イベント           | 説明                                             |
   +====================+==================================================+
   | <<TreeviewSelect>> | 選択状態が変更されたときに生成されます。         |
   +--------------------+--------------------------------------------------+
   | <<TreeviewOpen>>   | フォーカスが当たっている要素に open=True が      |
   |                    | 設定される直前に生成されます。                   |
   +--------------------+--------------------------------------------------+
   | <<TreeviewClose>>  | フォーカスが当たっている要素に open=False が     |
   |                    | 設定された直後に生成されます。                   |
   +--------------------+--------------------------------------------------+

:meth:`Treeview.focus` メソッドと :meth:`Treeview.selection` メソッドは変更を受けた要素を判別するのに使えます。


ttk.Treeview
^^^^^^^^^^^^

.. class:: Treeview

   .. method:: bbox(item[, column=None])

      (ツリービューウィジェットのウィンドウを基準として) 指定された *item* の
      バウンディングボックス情報を (x 座標, y 座標, 幅, 高さ) の形式で返します。

      *column* が指定されている場合は、セルのバウンディングボックスを返します。
      (例えば、閉じた状態の要素の子供であったり、枠外にスクロールされていて)
      *item* が見えなくなっている場合は、空文字列が返されます。


   .. method:: get_children([item])

      *item* の子要素のリストを返します。

      *item* が指定されていなかった場合は、ルート要素の子供が返されます。


   .. method:: set_children(item, *newchildren)

      *item* の子要素を *newchildren* で置き換えます。

      *item* にいる子供のうち *newchildren* にないものはツリーから切り離されます。
      *newchildren* にあるどの要素も *item* の祖先であってはいけません。
      *newchildren* を指定しなかった場合は、 *item* の子要素が全て切り離されることに注意してください。


   .. method:: column(column[, option=None[, **kw]])

      指定した *column* のオプションを問い合わせたり、変更したりします。

      *kw* が与えられなかった場合は、カラムのオプション値の辞書が返されます。
      *option* が指定されていた場合は、その *option* の値が返されます。
      それ以外の場合は、オプションに値を設定します。

      設定できるオプションとその値は次の通りです:

      * id
         カラム名を返します。これは読み取り専用のオプションです。
      * anchor: 標準の Tk anchor の値
         このカラムでセルに対してテキストをどう配置するかを指定します。
      * minwidth: 幅
         カラムの最小幅をピクセル単位で表したものです。
         ツリービューウィジェットは、ウィジェットのサイズが変更されたり
         カラムをユーザがドラッグして移動させたりしたときに、
         このオプションで指定した幅より狭くすることはありません。
      * stretch: True もしくは False
         ウィジェットがサイズ変更されたとき、カラムの幅をそれに合わせるかどうかを指定します。
      * width: 幅
         カラムの幅をピクセル単位で表したものです。

      ツリーカラムの設定を行うには、 column = "#0" を付けてこのメソッドを呼び出してください。

   .. method:: delete(*items)

      指定された *items* とその子孫たち全てを削除します。

      ルート要素は削除されません。


   .. method:: detach(*items)

      指定された *items* を全てツリーから切り離します。

      The items and all of their descendants are still present, and may be
      reinserted at another point in the tree, but will not be displayed.
      その要素と子孫たちは依然として存在していて、ツリーの別の場所に再度
      挿入することができますが、隠された状態になり表示はされません。

      ルート要素は切り離されません。


   .. method:: exists(item)

      指定された *item* がツリーの中にあれば True を返します。


   .. method:: focus([item=None])

      *item* が指定されていた場合は、 *item* にフォーカスを当てます。
      そうでない場合は、現在フォーカスが当たっている要素が、
      どの要素にもフォーカスが当たっていない場合は '' が返されます。


   .. method:: heading(column[, option=None[, **kw]])

      Query or modify the heading options for the specified *column*.

      If *kw* is not given, returns a dict of the heading option values. If
      *option* is specified then the value for that *option* is returned.
      Otherwise, sets the options to the corresponding values.

      The valid options/values are:

      * text: text
         The text to display in the column heading.
      * image: imageName
         Specifies an image to display to the right of the column heading.
      * anchor: anchor
         Specifies how the heading text should be aligned. One of the standard
         Tk anchor values.
      * command: callback
         A callback to be invoked when the heading label is pressed.

      To configure the tree column heading, call this with column = "#0".


   .. method:: identify(component, x, y)

      Returns a description of the specified *component* under the point given
      by *x* and *y*, or the empty string if no such *component* is present at
      that position.


   .. method:: identify_row(y)

      Returns the item ID of the item at position *y*.


   .. method:: identify_column(x)

      Returns the data column identifier of the cell at position *x*.

      The tree column has ID #0.


   .. method:: identify_region(x, y)

      Returns one of:

      +-----------+--------------------------------------+
      | region    | meaning                              |
      +===========+======================================+
      | heading   | Tree heading area.                   |
      +-----------+--------------------------------------+
      | separator | Space between two columns headings.  |
      +-----------+--------------------------------------+
      | tree      | The tree area.                       |
      +-----------+--------------------------------------+
      | cell      | A data cell.                         |
      +-----------+--------------------------------------+

      Availability: Tk 8.6.


   .. method:: identify_element(x, y)

      Returns the element at position *x*, *y*.

      Availability: Tk 8.6.


   .. method:: index(item)

      Returns the integer index of *item* within its parent's list of children.


   .. method:: insert(parent, index[, iid=None[, **kw]])

      Creates a new item and returns the item identifier of the newly created
      item.

      *parent* is the item ID of the parent item, or the empty string to create
      a new top-level item. *index* is an integer, or the value "end",
      specifying where in the list of parent's children to insert the new item.
      If *index* is less than or equal to zero, the new node is inserted at
      the beginning; if *index* is greater than or equal to the current number
      of children, it is inserted at the end. If *iid* is specified, it is used
      as the item identifier; *iid* must not already exist in the tree.
      Otherwise, a new unique identifier is generated.

      See `要素オプション`_ for the list of available points.


   .. method:: item(item[, option[, **kw]])

      Query or modify the options for the specified *item*.

      If no options are given, a dict with options/values for the item is
      returned.
      If *option* is specified then the value for that option is returned.
      Otherwise, sets the options to the corresponding values as given by *kw*.


   .. method:: move(item, parent, index)

      Moves *item* to position *index* in *parent*'s list of children.

      It is illegal to move an item under one of its descendants. If *index* is
      less than or equal to zero, *item* is moved to the beginning; if greater
      than or equal to the number of children, it is moved to the end. If *item*
      was detached it is reattached.


   .. method:: next(item)

      Returns the identifier of *item*'s next sibling, or '' if *item* is the
      last child of its parent.


   .. method:: parent(item)

      Returns the ID of the parent of *item*, or '' if *item* is at the top
      level of the hierarchy.


   .. method:: prev(item)

      Returns the identifier of *item*'s previous sibling, or '' if *item* is
      the first child of its parent.


   .. method:: reattach(item, parent, index)

      An alias for :meth:`Treeview.move`.


   .. method:: see(item)

      Ensure that *item* is visible.

      Sets all of *item*'s ancestors open option to True, and scrolls the
      widget if necessary so that *item* is within the visible portion of
      the tree.


   .. method:: selection([selop=None[, items=None]])

      If *selop* is not specified, returns selected items. Otherwise, it will
      act according to the following selection methods.


   .. method:: selection_set(items)

      *items* becomes the new selection.


   .. method:: selection_add(items)

      Add *items* to the selection.


   .. method:: selection_remove(items)

      Remove *items* from the selection.


   .. method:: selection_toggle(items)

      Toggle the selection state of each item in *items*.


   .. method:: set(item[, column=None[, value=None]])

      With one argument, returns a dictionary of column/value pairs for the
      specified *item*. With two arguments, returns the current value of the
      specified *column*. With three arguments, sets the value of given
      *column* in given *item* to the specified *value*.


   .. method:: tag_bind(tagname[, sequence=None[, callback=None]])

      Bind a callback for the given event *sequence* to the tag *tagname*.
      When an event is delivered to an item, the callbacks for each of the
      item's tags option are called.


   .. method:: tag_configure(tagname[, option=None[, **kw]])

      Query or modify the options for the specified *tagname*.

      If *kw* is not given, returns a dict of the option settings for
      *tagname*. If *option* is specified, returns the value for that *option*
      for the specified *tagname*. Otherwise, sets the options to the
      corresponding values for the given *tagname*.


   .. method:: tag_has(tagname[, item])

      If *item* is specified, returns 1 or 0 depending on whether the specified
      *item* has the given *tagname*. Otherwise, returns a list of all items
      that have the specified tag.

      Availability: Tk 8.6


   .. method:: xview(*args)

      Query or modify horizontal position of the treeview.


   .. method:: yview(*args)

      Query or modify vertical position of the treeview.


.. _TtkStyling:

Ttk Styling
-----------

Each widget in :mod:`ttk` is assigned a style, which specifies the set of
elements making up the widget and how they are arranged, along with dynamic and
default settings for element options. By default the style name is the same as
the widget's class name, but it may be overridden by the widget's style
option. If the class name of a widget is unknown, use the method
:meth:`Misc.winfo_class` (somewidget.winfo_class()).

.. seealso::

   `Tcl'2004 conference presentation <http://tktable.sourceforge.net/tile/tile-tcl2004.pdf>`_
      This document explains how the theme engine works


.. class:: Style

   This class is used to manipulate the style database.


   .. method:: configure(style, query_opt=None, **kw)

      Query or set the default value of the specified option(s) in *style*.

      Each key in *kw* is an option and each value is a string identifying
      the value for that option.

      For example, to change every default button to be a flat button with some
      padding and a different background color do::

         import ttk
         import Tkinter

         root = Tkinter.Tk()

         ttk.Style().configure("TButton", padding=6, relief="flat",
            background="#ccc")

         btn = ttk.Button(text="Sample")
         btn.pack()

         root.mainloop()


   .. method:: map(style, query_opt=None, **kw)

      Query or sets dynamic values of the specified option(s) in *style*.

      Each key in *kw* is an option and each value should be a list or a
      tuple (usually) containing statespecs grouped in tuples, lists, or
      something else of your preference. A statespec is a compound of one
      or more states and then a value.

      An example::

         import Tkinter
         import ttk

         root = Tkinter.Tk()

         style = ttk.Style()
         style.map("C.TButton",
             foreground=[('pressed', 'red'), ('active', 'blue')],
             background=[('pressed', '!disabled', 'black'), ('active', 'white')]
             )

         colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

         root.mainloop()


      Note that the order of the (states, value) sequences for an
      option matters.  In the previous example, if you change the
      order to ``[('active', 'blue'), ('pressed', 'red')]`` in the
      foreground option, for example, you would get a blue foreground
      when the widget is in the active or pressed states.

   .. method:: lookup(style, option[, state=None[, default=None]])

      Returns the value specified for *option* in *style*.

      If *state* is specified, it is expected to be a sequence of one or more
      states. If the *default* argument is set, it is used as a fallback value
      in case no specification for option is found.

      To check what font a Button uses by default, do::

         import ttk

         print ttk.Style().lookup("TButton", "font")


   .. method:: layout(style[, layoutspec=None])

      Define the widget layout for given *style*. If *layoutspec* is omitted,
      return the layout specification for given style.

      *layoutspec*, if specified, is expected to be a list or some other
      sequence type (excluding strings), where each item should be a tuple and
      the first item is the layout name and the second item should have the
      format described described in `Layouts`_.

      To understand the format, see the following example (it is not
      intended to do anything useful)::

         import ttk
         import Tkinter

         root = Tkinter.Tk()

         style = ttk.Style()
         style.layout("TMenubutton", [
            ("Menubutton.background", None),
            ("Menubutton.button", {"children":
                [("Menubutton.focus", {"children":
                    [("Menubutton.padding", {"children":
                        [("Menubutton.label", {"side": "left", "expand": 1})]
                    })]
                })]
            }),
         ])

         mbtn = ttk.Menubutton(text='Text')
         mbtn.pack()
         root.mainloop()


   .. method:: element_create(elementname, etype, *args, **kw)

      Create a new element in the current theme, of the given *etype* which is
      expected to be either "image", "from" or "vsapi". The latter is only
      available in Tk 8.6a for Windows XP and Vista and is not described here.

      If "image" is used, *args* should contain the default image name followed
      by statespec/value pairs (this is the imagespec), and *kw* may have the
      following options:

       * border=padding
          padding is a list of up to four integers, specifying the left, top,
          right, and bottom borders, respectively.

       * height=height
          Specifies a minimum height for the element. If less than zero, the
          base image's height is used as a default.

       * padding=padding
          Specifies the element's interior padding. Defaults to border's value
          if not specified.

       * sticky=spec
          Specifies how the image is placed within the final parcel. spec
          contains zero or more characters “n”, “s”, “w”, or “e”.

       * width=width
          Specifies a minimum width for the element. If less than zero, the
          base image's width is used as a default.

      If "from" is used as the value of *etype*,
      :meth:`element_create` will clone an existing
      element. *args* is expected to contain a themename, from which
      the element will be cloned, and optionally an element to clone from.
      If this element to clone from is not specified, an empty element will
      be used. *kw* is discarded.


   .. method:: element_names()

      Returns the list of elements defined in the current theme.


   .. method:: element_options(elementname)

      Returns the list of *elementname*'s options.


   .. method:: theme_create(themename[, parent=None[, settings=None]])

      Create a new theme.

      It is an error if *themename* already exists. If *parent* is specified,
      the new theme will inherit styles, elements and layouts from the parent
      theme. If *settings* are present they are expected to have the same
      syntax used for :meth:`theme_settings`.


   .. method:: theme_settings(themename, settings)

      Temporarily sets the current theme to *themename*, apply specified
      *settings* and then restore the previous theme.

      Each key in *settings* is a style and each value may contain the keys
      'configure', 'map', 'layout' and 'element create' and they are expected
      to have the same format as specified by the methods
      :meth:`Style.configure`, :meth:`Style.map`, :meth:`Style.layout` and
      :meth:`Style.element_create` respectively.

      As an example, let's change the Combobox for the default theme a bit::

         import ttk
         import Tkinter

         root = Tkinter.Tk()

         style = ttk.Style()
         style.theme_settings("default", {
            "TCombobox": {
                "configure": {"padding": 5},
                "map": {
                    "background": [("active", "green2"),
                                   ("!disabled", "green4")],
                    "fieldbackground": [("!disabled", "green3")],
                    "foreground": [("focus", "OliveDrab1"),
                                   ("!disabled", "OliveDrab2")]
                }
            }
         })

         combo = ttk.Combobox().pack()

         root.mainloop()


   .. method:: theme_names()

      Returns a list of all known themes.


   .. method:: theme_use([themename])

      If *themename* is not given, returns the theme in use.  Otherwise, sets
      the current theme to *themename*, refreshes all widgets and emits a
      <<ThemeChanged>> event.


Layouts
^^^^^^^

A layout can be just None, if it takes no options, or a dict of
options specifying how to arrange the element. The layout mechanism
uses a simplified version of the pack geometry manager: given an
initial cavity, each element is allocated a parcel. Valid
options/values are:

 * side: whichside
    Specifies which side of the cavity to place the element; one of
    top, right, bottom or left. If omitted, the element occupies the
    entire cavity.

 * sticky: nswe
    Specifies where the element is placed inside its allocated parcel.

 * unit: 0 or 1
    If set to 1, causes the element and all of its descendants to be treated as
    a single element for the purposes of :meth:`Widget.identify` et al. It's
    used for things like scrollbar thumbs with grips.

 * children: [sublayout... ]
    Specifies a list of elements to place inside the element. Each
    element is a tuple (or other sequence type) where the first item is
    the layout name, and the other is a `Layout`_.

.. _Layout: `Layouts`_
