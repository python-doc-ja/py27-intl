@@ -91,24 +91,33 @@
    class yourself, as long as it has an appropriate :meth:`fileno` method (that
    really returns a file descriptor, not just a random integer).
 
    .. note::
 
       .. index:: single: WinSock
 
       File objects on Windows are not acceptable, but sockets are.  On Windows,
       the underlying :cfunc:`select` function is provided by the WinSock
       library, and does not handle file descriptors that don't originate from
       WinSock.
 
+.. attribute:: select.PIPE_BUF
+
+   Files reported as ready for writing by :func:`select`, :func:`poll` or
+   similar interfaces in this module are guaranteed to not block on a write
+   of up to :const:`PIPE_BUF` bytes.
+   This value is guaranteed by POSIX to be at least 512.  Availability: Unix.
+
+   .. versionadded:: 2.7
+
 
 .. _epoll-objects:
 
 Edge and Level Trigger Polling (epoll) Objects
 ----------------------------------------------
 
    http://linux.die.net/man/4/epoll
 
    *eventmask*
 
    +-----------------------+-----------------------------------------------+
    | Constant              | Meaning                                       |
@@ -120,33 +129,33 @@
    | :const:`EPOLLPRI`     | Urgent data for read                          |
    +-----------------------+-----------------------------------------------+
    | :const:`EPOLLERR`     | Error condition happened on the assoc. fd     |
    +-----------------------+-----------------------------------------------+
    | :const:`EPOLLHUP`     | Hang up happened on the assoc. fd             |
    +-----------------------+-----------------------------------------------+
    | :const:`EPOLLET`      | Set Edge Trigger behavior, the default is     |
    |                       | Level Trigger behavior                        |
    +-----------------------+-----------------------------------------------+
    | :const:`EPOLLONESHOT` | Set one-shot behavior. After one event is     |
    |                       | pulled out, the fd is internally disabled     |
    +-----------------------+-----------------------------------------------+
-   | :const:`EPOLLRDNORM`  | ???                                           |
+   | :const:`EPOLLRDNORM`  | Equivalent to :const:`EPOLLIN`                |
    +-----------------------+-----------------------------------------------+
-   | :const:`EPOLLRDBAND`  | ???                                           |
+   | :const:`EPOLLRDBAND`  | Priority data band can be read.               |
    +-----------------------+-----------------------------------------------+
-   | :const:`EPOLLWRNORM`  | ???                                           |
+   | :const:`EPOLLWRNORM`  | Equivalent to :const:`EPOLLOUT`               |
    +-----------------------+-----------------------------------------------+
-   | :const:`EPOLLWRBAND`  | ???                                           |
+   | :const:`EPOLLWRBAND`  | Priority data may be written.                 |
    +-----------------------+-----------------------------------------------+
-   | :const:`EPOLLMSG`     | ???                                           |
+   | :const:`EPOLLMSG`     | Ignored.                                      |
    +-----------------------+-----------------------------------------------+
 
 
 .. method:: epoll.close()
 
    Close the control file descriptor of the epoll object.
 
 
 .. method:: epoll.fileno()
 
    Return the file descriptor number of the control fd.
 
@@ -222,25 +231,25 @@
    | :const:`POLLHUP`  | Hung up                                  |
    +-------------------+------------------------------------------+
    | :const:`POLLNVAL` | Invalid request: descriptor not open     |
    +-------------------+------------------------------------------+
 
    Registering a file descriptor that's already registered is not an error, and has
    the same effect as registering the descriptor exactly once.
 
 
 .. method:: poll.modify(fd, eventmask)
 
    Modifies an already registered fd. This has the same effect as
-   :meth:`register(fd, eventmask)`.  Attempting to modify a file descriptor
+   ``register(fd, eventmask)``.  Attempting to modify a file descriptor
    that was never registered causes an :exc:`IOError` exception with errno
    :const:`ENOENT` to be raised.
 
    .. versionadded:: 2.6
 
 
 .. method:: poll.unregister(fd)
 
    Remove a file descriptor being tracked by a polling object.  Just like the
    :meth:`register` method, *fd* can be an integer or an object with a
    :meth:`fileno` method that returns an integer.
 
