@@ -17,80 +17,91 @@
    statement: except
 
 For class exceptions, in a :keyword:`try` statement with an :keyword:`except`
 clause that mentions a particular class, that clause also handles any exception
 classes derived from that class (but not exception classes from which *it* is
 derived).  Two exception classes that are not related via subclassing are never
 equivalent, even if they have the same name.
 
 .. index:: statement: raise
 
 The built-in exceptions listed below can be generated by the interpreter or
 built-in functions.  Except where mentioned, they have an "associated value"
-indicating the detailed cause of the error. This may be a string or a tuple
+indicating the detailed cause of the error.  This may be a string or a tuple
 containing several items of information (e.g., an error code and a string
 explaining the code). The associated value is the second argument to the
 :keyword:`raise` statement.  If the exception class is derived from the standard
 root class :exc:`BaseException`, the associated value is present as the
 exception instance's :attr:`args` attribute.
 
 User code can raise built-in exceptions.  This can be used to test an exception
 handler or to report an error condition "just like" the situation in which the
 interpreter raises the same exception; but beware that there is nothing to
 prevent user code from raising an inappropriate error.
 
 The built-in exception classes can be sub-classed to define new exceptions;
 programmers are encouraged to at least derive new exceptions from the
 :exc:`Exception` class and not :exc:`BaseException`.  More information on
 defining exceptions is available in the Python Tutorial under
 :ref:`tut-userexceptions`.
 
 The following exceptions are only used as base classes for other exceptions.
 
-
 .. exception:: BaseException
 
    The base class for all built-in exceptions.  It is not meant to be directly
-   inherited by user-defined classes (for that use :exc:`Exception`).  If
+   inherited by user-defined classes (for that, use :exc:`Exception`).  If
    :func:`str` or :func:`unicode` is called on an instance of this class, the
-   representation of the argument(s) to the instance are returned or the empty
-   string when there were no arguments.  All arguments are  stored in :attr:`args`
-   as a tuple.
+   representation of the argument(s) to the instance are returned, or the empty
+   string when there were no arguments.
 
    .. versionadded:: 2.5
 
+   .. attribute:: args
+
+      The tuple of arguments given to the exception constructor.  Some built-in
+      exceptions (like :exc:`IOError`) expect a certain number of arguments and
+      assign a special meaning to the elements of this tuple, while others are
+      usually called only with a single string giving an error message.
+
 
 .. exception:: Exception
 
    All built-in, non-system-exiting exceptions are derived from this class.  All
    user-defined exceptions should also be derived from this class.
 
    .. versionchanged:: 2.5
       Changed to inherit from :exc:`BaseException`.
 
 
 .. exception:: StandardError
 
    The base class for all built-in exceptions except :exc:`StopIteration`,
    :exc:`GeneratorExit`, :exc:`KeyboardInterrupt` and :exc:`SystemExit`.
    :exc:`StandardError` itself is derived from :exc:`Exception`.
 
 
 .. exception:: ArithmeticError
 
    The base class for those built-in exceptions that are raised for various
    arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`,
    :exc:`FloatingPointError`.
 
 
+.. exception:: BufferError
+
+   Raised when a :ref:`buffer <bufferobjects>` related operation cannot be
+   performed.
+
+
 .. exception:: LookupError
 
    The base class for the exceptions that are raised when a key or index used on
    a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  This
    can be raised directly by :func:`codecs.lookup`.
 
 
 .. exception:: EnvironmentError
 
    The base class for exceptions that can occur outside the Python system:
    :exc:`IOError`, :exc:`OSError`.  When exceptions of this type are created with a
    2-tuple, the first item is available on the instance's :attr:`errno` attribute
@@ -132,25 +143,25 @@
 .. exception:: EOFError
 
    Raised when one of the built-in functions (:func:`input` or :func:`raw_input`)
    hits an end-of-file condition (EOF) without reading any data. (N.B.: the
    :meth:`file.read` and :meth:`file.readline` methods return an empty string
    when they hit EOF.)
 
 
 .. exception:: FloatingPointError
 
    Raised when a floating point operation fails.  This exception is always defined,
    but can only be raised when Python is configured with the
-   :option:`--with-fpectl` option, or the :const:`WANT_SIGFPE_HANDLER` symbol is
+   ``--with-fpectl`` option, or the :const:`WANT_SIGFPE_HANDLER` symbol is
    defined in the :file:`pyconfig.h` file.
 
 
 .. exception:: GeneratorExit
 
    Raise when a :term:`generator`\'s :meth:`close` method is called.  It
    directly inherits from :exc:`BaseException` instead of :exc:`StandardError` since
    it is technically not an error.
 
    .. versionadded:: 2.5
 
    .. versionchanged:: 2.6
@@ -292,24 +303,36 @@
 .. exception:: SyntaxError
 
    Raised when the parser encounters a syntax error.  This may occur in an
    :keyword:`import` statement, in an :keyword:`exec` statement, in a call to the
    built-in function :func:`eval` or :func:`input`, or when reading the initial
    script or standard input (also interactively).
 
    Instances of this class have attributes :attr:`filename`, :attr:`lineno`,
    :attr:`offset` and :attr:`text` for easier access to the details.  :func:`str`
    of the exception instance returns only the message.
 
 
+.. exception:: IndentationError
+
+   Base class for syntax errors related to incorrect indentation.  This is a
+   subclass of :exc:`SyntaxError`.
+
+
+.. exception:: TabError
+
+   Raised when indentation contains an inconsistent use of tabs and spaces.
+   This is a subclass of :exc:`IndentationError`.
+
+
 .. exception:: SystemError
 
    Raised when the interpreter finds an internal error, but the situation does not
    look so serious to cause it to abandon all hope. The associated value is a
    string indicating what went wrong (in low-level terms).
 
    You should report this to the author or maintainer of your Python interpreter.
    Be sure to report the version of the Python interpreter (``sys.version``; it is
    also printed at the start of an interactive Python session), the exact error
    message (the exception's associated value) and if possible the source of the
    program that triggered the error.
 
