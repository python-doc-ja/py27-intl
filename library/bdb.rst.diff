@@ -99,25 +99,25 @@
 
       The default implementation decides how to dispatch a frame, depending on
       the type of event (passed as a string) that is about to be executed.
       *event* can be one of the following:
 
       * ``"line"``: A new line of code is going to be executed.
       * ``"call"``: A function is about to be called, or another code block
         entered.
       * ``"return"``: A function or other code block is about to return.
       * ``"exception"``: An exception has occurred.
       * ``"c_call"``: A C function is about to be called.
       * ``"c_return"``: A C function has returned.
-      * ``"c_exception"``: A C function has thrown an exception.
+      * ``"c_exception"``: A C function has raised an exception.
 
       For the Python events, specialized functions (see below) are called.  For
       the C events, no action is taken.
 
       The *arg* parameter depends on the previous event.
 
       See the documentation for :func:`sys.settrace` for more information on the
       trace function.  For more information on code and frame objects, refer to
       :ref:`types`.
 
    .. method:: dispatch_line(frame)
 
@@ -333,21 +333,19 @@
 
    Check whether we should break here, depending on the way the breakpoint *b*
    was set.
 
    If it was set via line number, it checks if ``b.line`` is the same as the one
    in the frame also passed as argument.  If the breakpoint was set via function
    name, we have to check we are in the right frame (the right function) and if
    we are in its first executable line.
 
 .. function:: effective(file, line, frame)
 
    Determine if there is an effective (active) breakpoint at this line of code.
-   Return breakpoint number or 0 if none.
-
-   Called only if we know there is a breakpoint at this location.  Returns the
-   breakpoint that was triggered and a flag that indicates if it is ok to delete
-   a temporary breakpoint.
+   Return a tuple of the breakpoint and a boolean that indicates if it is ok
+   to delete a temporary breakpoint.  Return ``(None, None)`` if there is no
+   matching breakpoint.
 
 .. function:: set_trace()
 
-   Starts debugging with a :class:`Bdb` instance from caller's frame.
+   Start debugging with a :class:`Bdb` instance from caller's frame.
