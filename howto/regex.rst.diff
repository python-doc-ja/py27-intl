@@ -5,7 +5,6 @@
 ****************************
 
 :Author: A.M. Kuchling <amk@amk.ca>
-:Release: 0.05
 
 .. TODO:
    Document lookbehind assertions
@@ -82,7 +81,7 @@
 Here's a complete list of the metacharacters; their meanings will be discussed
 in the rest of this HOWTO. ::
 
-   . ^ $ * + ? { [ ] \ | ( )
+   . ^ $ * + ? { } [ ] \ | ( )
 
 The first metacharacters we'll look at are ``[`` and ``]``. They're used for
 specifying a character class, which is a set of characters that you wish to
@@ -113,7 +112,10 @@
 Some of the special sequences beginning with ``'\'`` represent predefined sets
 of characters that are often useful, such as the set of digits, the set of
 letters, or the set of anything that isn't whitespace.  The following predefined
-special sequences are available:
+special sequences are a subset of those available. The equivalent classes are
+for byte string patterns. For a complete list of sequences and expanded class
+definitions for Unicode string patterns, see the last part of
+:ref:`Regular Expression Syntax <re-syntax>`.
 
 ``\d``
    Matches any decimal digit; this is equivalent to the class ``[0-9]``.
@@ -264,7 +266,7 @@
    >>> import re
    >>> p = re.compile('ab*')
    >>> print p
-   <_sre.SRE_Pattern object at 80b4150>
+   <_sre.SRE_Pattern object at 0x...>
 
 :func:`re.compile` also accepts an optional *flags* argument, used to enable
 various special features and syntax variations.  We'll go over the available
@@ -377,7 +379,7 @@
    >>> import re
    >>> p = re.compile('[a-z]+')
    >>> p
-   <_sre.SRE_Pattern object at 80c3c28>
+   <_sre.SRE_Pattern object at 0x...>
 
 Now, you can try matching various strings against the RE ``[a-z]+``.  An empty
 string shouldn't match at all, since ``+`` means 'one or more repetitions'.
@@ -395,7 +397,7 @@
 
    >>> m = p.match('tempo')
    >>> print m
-   <_sre.SRE_Match object at 80c4f68>
+   <_sre.SRE_Match object at 0x...>
 
 Now you can query the :class:`MatchObject` for information about the matching
 string.   :class:`MatchObject` instances also have several methods and
@@ -434,7 +436,7 @@
    >>> print p.match('::: message')
    None
    >>> m = p.search('::: message') ; print m
-   <re.MatchObject instance at 80c9650>
+   <_sre.SRE_Match object at 0x...>
    >>> m.group()
    'message'
    >>> m.span()
@@ -485,7 +487,7 @@
    >>> print re.match(r'From\s+', 'Fromage amk')
    None
    >>> re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')
-   <re.MatchObject instance at 80c5978>
+   <_sre.SRE_Match object at 0x...>
 
 Under the hood, these functions simply create a pattern object for you
 and call the appropriate method on it.  They also store the compiled object in a
@@ -686,7 +688,7 @@
    line, the RE to use is ``^From``. ::
 
       >>> print re.search('^From', 'From Here to Eternity')
-      <re.MatchObject instance at 80c1520>
+      <_sre.SRE_Match object at 0x...>
       >>> print re.search('^From', 'Reciting From Memory')
       None
 
@@ -698,11 +700,11 @@
    or any location followed by a newline character.     ::
 
       >>> print re.search('}$', '{block}')
-      <re.MatchObject instance at 80adfa8>
+      <_sre.SRE_Match object at 0x...>
       >>> print re.search('}$', '{block} ')
       None
       >>> print re.search('}$', '{block}\n')
-      <re.MatchObject instance at 80adfa8>
+      <_sre.SRE_Match object at 0x...>
 
    To match a literal ``'$'``, use ``\$`` or enclose it inside a character class,
    as in  ``[$]``.
@@ -727,7 +729,7 @@
 
       >>> p = re.compile(r'\bclass\b')
       >>> print p.search('no class at all')
-      <re.MatchObject instance at 80c8f28>
+      <_sre.SRE_Match object at 0x...>
       >>> print p.search('the declassified algorithm')
       None
       >>> print p.search('one subclass is')
@@ -745,7 +747,7 @@
       >>> print p.search('no class at all')
       None
       >>> print p.search('\b' + 'class' + '\b')
-      <re.MatchObject instance at 80c3ee0>
+      <_sre.SRE_Match object at 0x...>
 
    Second, inside a character class, where there's no use for this assertion,
    ``\b`` represents the backspace character, for compatibility with Python's
@@ -1315,7 +1317,7 @@
 be *very* complicated.  Use an HTML or XML parser module for such tasks.)
 
 
-Not Using re.VERBOSE
+Using re.VERBOSE
 --------------------
 
 By now you've probably noticed that regular expressions are a very compact
