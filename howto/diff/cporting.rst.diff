--- r262/howto/cporting.rst	2009-04-04 06:56:36.770670000 +0900
+++ r266/howto/cporting.rst	2010-05-14 23:30:11.711058000 +0900
@@ -109,25 +109,25 @@
 
        if (!PyArg_ParseTuple(args, "ii:add_ints", &one, &two))
            return NULL;
 
        return PyInt_FromLong(one + two);
    }
 
 
 
 Module initialization and state
 ===============================
 
-Python 3.0 has a revamped extension module initialization system.  (See PEP
+Python 3.0 has a revamped extension module initialization system.  (See
 :pep:`3121`.)  Instead of storing module state in globals, they should be stored
 in an interpreter specific structure.  Creating modules that act correctly in
 both 2.x and 3.0 is tricky.  The following simple example demonstrates how. ::
 
    #include "Python.h"
 
    struct module_state {
        PyObject *error;
    };
 
    #if PY_MAJOR_VERSION >= 3
    #define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))
