# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:09+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/import.rst:6
msgid "Importing Modules"
msgstr "モジュールのインポート"

#: ../../c-api/import.rst:16
msgid ""
"This is a simplified interface to :c:func:`PyImport_ImportModuleEx` below, "
"leaving the *globals* and *locals* arguments set to *NULL* and *level* set "
"to 0.  When the *name* argument contains a dot (when it specifies a "
"submodule of a package), the *fromlist* argument is set to the list "
"``['*']`` so that the return value is the named module rather than the top-"
"level package containing it as would otherwise be the case.  (Unfortunately,"
" this has an additional side effect when *name* in fact specifies a "
"subpackage instead of a submodule: the submodules specified in the package's"
" ``__all__`` variable are  loaded.)  Return a new reference to the imported "
"module, or *NULL* with an exception set on failure.  Before Python 2.4, the "
"module may still be created in the failure case --- examine ``sys.modules`` "
"to find out.  Starting with Python 2.4, a failing import of a module no "
"longer leaves the module in ``sys.modules``."
msgstr ""

#: ../../c-api/import.rst:30 ../../c-api/import.rst:64
msgid "Failing imports remove incomplete module objects."
msgstr ""

#: ../../c-api/import.rst:33 ../../c-api/import.rst:97
msgid "Always uses absolute imports."
msgstr ""

#: ../../c-api/import.rst:39
msgid ""
"This version of :c:func:`PyImport_ImportModule` does not block. It's "
"intended to be used in C functions that import other modules to execute a "
"function. The import may block if another thread holds the import lock. The "
"function :c:func:`PyImport_ImportModuleNoBlock` never blocks. It first tries"
" to fetch the module from sys.modules and falls back to "
":c:func:`PyImport_ImportModule` unless the lock is held, in which case the "
"function will raise an :exc:`ImportError`."
msgstr ""

#: ../../c-api/import.rst:54 ../../c-api/import.rst:74
msgid ""
"Import a module.  This is best described by referring to the built-in Python"
" function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr "モジュールを import します。モジュールの import については組み込みの Python 関数 :func:`__import__` を読むとよく分かります。というのも、標準の :func:`__import__`  はこの関数を直接呼び出しているからです。"

#: ../../c-api/import.rst:58
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or *NULL* with an exception set on failure (before Python 2.4, the "
"module may still be created in this case).  Like for :func:`__import__`, the"
" return value when a submodule of a package was requested is normally the "
"top-level package, unless a non-empty *fromlist* was given."
msgstr ""

#: ../../c-api/import.rst:67
msgid ""
"The function is an alias for :c:func:`PyImport_ImportModuleLevel` with -1 as"
" level, meaning relative import."
msgstr ""

#: ../../c-api/import.rst:78
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or *NULL* with an exception set on failure.  Like for "
":func:`__import__`, the return value when a submodule of a package was "
"requested is normally the top-level package, unless a non-empty *fromlist* "
"was given."
msgstr "戻り値は、インポートされたモジュールかトップレベルパッケージへの新しい参照か、失敗した場合は例外を設定して *NULL* を返します。 :func:`__import__` と同じように、パッケージのサブモジュールが要求されたときは、空でない *fromlist* を渡された時以外は、トップレベルのパッケージを返します。"

#: ../../c-api/import.rst:92
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\". It invokes the :func:`__import__` function from the "
"``__builtins__`` of the current globals.  This means that the import is done"
" using whatever import hooks are installed in the current environment, e.g. "
"by :mod:`rexec` or :mod:`ihooks`."
msgstr ""

#: ../../c-api/import.rst:105
msgid ""
"Reload a module.  This is best described by referring to the built-in Python"
" function :func:`reload`, as the standard :func:`reload` function calls this"
" function directly.  Return a new reference to the reloaded module, or "
"*NULL* with an exception set on failure (the module still exists in this "
"case)."
msgstr ""

#: ../../c-api/import.rst:113
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert it "
"in the modules dictionary. Return *NULL* with an exception set on failure."
msgstr "モジュール名に対応するモジュールオブジェクトを返します。*name* 引数は ``package.module`` の形式でもかまいません。まずモジュール辞書に該当するモジュールがあるかどうか調べ、なければ新たなモジュールを生成してモジュール辞書に挿入します。失敗した場合には例外をセットして *NULL* を返します。"

#: ../../c-api/import.rst:120
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use "
":c:func:`PyImport_ImportModule` or one of its variants to import a module.  "
"Package structures implied by a dotted name for *name* are not created if "
"not already present."
msgstr "この関数はモジュールの import やロードを行いません; モジュールがまだロードされていなければ、空のモジュールオブジェクトを得ることになります。 :c:func:`PyImport_ImportModule` やその別形式を使ってモジュールを import してください。ドット名表記で指定した *name* が存在しない場合、パッケージ構造は作成されません。"

#: ../../c-api/import.rst:130
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or *NULL* with an exception set if an error occurred.  Before"
" Python 2.4, the module could still be created in error cases.  Starting "
"with Python 2.4, *name* is removed from :attr:`sys.modules` in error cases, "
"and even if *name* was already in :attr:`sys.modules` on entry to "
":c:func:`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules"
" in :attr:`sys.modules` is dangerous, as imports of such modules have no way"
" to know that the module object is an unknown (and probably damaged with "
"respect to the module author's intents) state."
msgstr ""

#: ../../c-api/import.rst:141
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's "
":c:member:`co_filename`."
msgstr "モジュールの :attr:`__file__` 属性が、コードオブジェクトの :c:member:`co_filename` に設定されます。"

#: ../../c-api/import.rst:144
msgid ""
"This function will reload the module if it was already imported.  See "
":c:func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr "この関数は、すでに import されているモジュールの場合には再ロードを行います。意図的にモジュールの再ロードを行う方法は :c:func:`PyImport_ReloadModule` を参照してください。"

#: ../../c-api/import.rst:147
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr "*name* が ``package.module`` 形式のドット名表記であった場合、まだ作成されていないパッケージ構造はその作成されないままになります。"

#: ../../c-api/import.rst:150
msgid "*name* is removed from :attr:`sys.modules` in error cases."
msgstr ""

#: ../../c-api/import.rst:156
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute "
"of the module object is set to *pathname* if it is non-``NULL``."
msgstr ":c:func:`PyImport_ExecCodeModule` と似ていますが、*pathname* が ``NULL`` でない場合にモジュールオブジェクトの :attr:`__file__` 属性に *pathname* が設定される点が異なります。"

#: ../../c-api/import.rst:162
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` and "
":file:`.pyo` files).  The magic number should be present in the first four "
"bytes of the bytecode file, in little-endian byte order."
msgstr ""

#: ../../c-api/import.rst:169
msgid ""
"Return the dictionary used for the module administration (a.k.a. "
"``sys.modules``).  Note that this is a per-interpreter variable."
msgstr "モジュール管理のための辞書 (いわゆる ``sys.modules``)を返します。この辞書はインタプリタごとに一つだけある変数なので注意してください。"

#: ../../c-api/import.rst:175
msgid ""
"Return an importer object for a :data:`sys.path`/:attr:`pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook"
" is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller it should fall back to the built-in import mechanism. "
"Cache the result in :data:`sys.path_importer_cache`.  Return a new reference"
" to the importer object."
msgstr ":data:`sys.path`/:attr:`pkg.__path__` の要素 *path* の、 importer オブジェクトを返します。可能なら、 :data:`sys.path_importer_cache` からフェッチします。まだキャッシュされていない場合、そのパスを扱える hook が見つかるまで :data:`sys.path_hooks` を巡回します。 hook が見つからない場合、 ``None`` を返します。この場合、呼び出し元はビルトインの import 機構にフォールバックします。結果は :data:`sys.path_importer_cache` にキャッシュされます。 importer オブジェクトへの新しい参照を返します。"

#: ../../c-api/import.rst:188
msgid "Initialize the import mechanism.  For internal use only."
msgstr "import 機構を初期化します。内部使用だけのための関数です。"

#: ../../c-api/import.rst:193
msgid "Empty the module table.  For internal use only."
msgstr "モジュールテーブルを空にします。内部使用だけのための関数です。"

#: ../../c-api/import.rst:198
msgid "Finalize the import mechanism.  For internal use only."
msgstr "import 機構を終了処理します。内部使用だけのための関数です。"

#: ../../c-api/import.rst:203 ../../c-api/import.rst:208
msgid "For internal use only."
msgstr "内部使用だけのための関数です。"

#: ../../c-api/import.rst:213
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use "
":c:func:`PyImport_ImportModule`.  (Note the misnomer --- this function would"
" reload the module if it was already imported.)"
msgstr "*name* という名前のフリーズ (freeze) されたモジュールをロードします。成功すると ``1`` を、モジュールが見つからなかった場合には ``0`` を、初期化が失敗した場合には例外をセットして ``-1`` を返します。ロードに成功したモジュールにアクセスするには :c:func:`PyImport_ImportModule` を使ってください。 (Note この関数名はいささか誤称めいています --- この関数はすでに import 済みのモジュールをリロードしてしまいます。)"

#: ../../c-api/import.rst:224
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the"
" Python source distribution).  Its definition, found in "
":file:`Include/import.h`, is::"
msgstr ":program:`freeze` ユーティリティが生成するようなフリーズ化モジュールデスクリプタの構造体型定義です。 (Python ソース配布物の :file:`Tools/freeze/` を参照してください) この構造体の定義は :file:`Include/import.h` にあり、以下のようになっています::"

#: ../../c-api/import.rst:238
msgid ""
"This pointer is initialized to point to an array of :c:type:`struct _frozen`"
" records, terminated by one whose members are all *NULL* or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr "このポインタは :c:type:`struct _frozen` のレコードからなり、終端の要素のメンバが *NULL* かゼロになっているような配列を指すよう初期化されます。フリーズされたモジュールを import するとき、このテーブルを検索します。サードパーティ製のコードからこのポインタに仕掛けを講じて、動的に生成されたフリーズ化モジュールの集合を提供するようにできます。"

#: ../../c-api/import.rst:246
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called before"
" :c:func:`Py_Initialize`."
msgstr "既存の組み込みモジュールテーブルに単一のモジュールを追加します。この関数は利便性を目的とした :c:func:`PyImport_ExtendInittab` のラッパ関数で、テーブルが拡張できないときには ``-1`` を返します。新たなモジュールは *name* で import でき、最初に import を試みた際に呼び出される関数として *initfunc* を使います。 :c:func:`Py_Initialize` よりも前に呼び出さなければなりません。"

#: ../../c-api/import.rst:256
msgid ""
"Structure describing a single entry in the list of built-in modules.  Each "
"of these structures gives the name and initialization function for a module "
"built into the interpreter.  Programs which embed Python may use an array of"
" these structures in conjunction with :c:func:`PyImport_ExtendInittab` to "
"provide additional built-in modules.  The structure is defined in "
":file:`Include/import.h` as::"
msgstr ""

#: ../../c-api/import.rst:271
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains *NULL* for the "
":attr:`name` field; failure to provide the sentinel value can result in a "
"memory fault. Returns ``0`` on success or ``-1`` if insufficient memory "
"could be allocated to extend the internal table.  In the event of failure, "
"no modules are added to the internal table.  This should be called before "
":c:func:`Py_Initialize`."
msgstr "組み込みモジュールのテーブルに一群のモジュールを追加します。配列 *newtab* は :attr:`name` フィールドが *NULL* になっているセンチネル (sentinel) エントリで終端されていなければなりません; センチネル値を与えられなかった場合にはメモリ違反になるかもしれません。成功すると ``0`` を、内部テーブルを拡張するのに十分なメモリを確保できなかった場合には ``-1`` を返します。操作が失敗した場合、モジュールは一切内部テーブルに追加されません。 :c:func:`Py_Initialize` よりも前に呼び出さなければなりません。"
