# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:10+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr "引数の解釈と値の構築"

#: ../../c-api/arg.rst:8
msgid ""
"These functions are useful when creating your own extensions functions and "
"methods.  Additional information and examples are available in :ref"
":`extending-index`."
msgstr "これらの関数は独自の拡張モジュール用の関数やメソッドを作成する際に便利です。詳しい情報や用例は :ref:`extending-index` にあります。"

#: ../../c-api/arg.rst:12
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`, "
":c:func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all use "
"*format strings* which are used to tell the function about the expected "
"arguments.  The format strings use the same syntax for each of these "
"functions."
msgstr "最初に説明する 3 つの関数、 :c:func:`PyArg_ParseTuple`, :c:func:`PyArg_ParseTupleAndKeywords`,および :c:func:`PyArg_Parse` はいずれも *書式化文字列 (format string)* を使います。書式化文字列は、関数が受け取るはずの引数に関する情報を伝えるのに用いられます。いずれの関数における書式化文字列も、同じ書式を使っています。"

#: ../../c-api/arg.rst:18
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit "
"describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a single "
"address argument to these functions.  In the following description, the "
"quoted form is the format unit; the entry in (round) parentheses is the "
"Python object type that matches the format unit; and the entry in [square] "
"brackets is the type of the C variable(s) whose address should be passed."
msgstr "書式化文字列は、ゼロ個またはそれ以上の \"書式化単位 (format unit)\" から成り立ちます。1つの書式化単位は1つの Python オブジェクトを表します; 通常は単一の文字か、書式化単位からなる文字列を括弧で囲ったものになります。例外として、括弧で囲われていない書式化単位文字列が単一のアドレス引数に対応する場合がいくつかあります。以下の説明では、引用符のついた形式は書式化単位です; (丸)括弧で囲った部分は書式化単位に対応する Python のオブジェクト型です; [角] 括弧は値をアドレス渡しする際に使う C の変数型です。"

#: ../../c-api/arg.rst:27
msgid ""
"These formats allow to access an object as a contiguous chunk of memory. You"
" don't have to provide raw storage for the returned unicode or bytes area.  "
"Also, you won't have to release any memory yourself, except with the ``es``,"
" ``es#``, ``et`` and ``et#`` formats."
msgstr "以下のフォーマットはオブジェクトに連続したメモリチャンクとしてアクセスするためのものです。返される unicode や bytes のために生のストレージを用意する必要はありません。また、``es``,  ``es#``, ``et``, ``et#`` フォーマットの場合を除いて自分でメモリを解放する必要もありません。"

#: ../../c-api/arg.rst:39
msgid "``s`` (string or Unicode) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:33
msgid ""
"Convert a Python string or Unicode object to a C pointer to a character "
"string.  You must not provide storage for the string itself; a pointer to an"
" existing string is stored into the character pointer variable whose address"
" you pass.  The C string is NUL-terminated.  The Python string must not "
"contain embedded NUL bytes; if it does, a :exc:`TypeError` exception is "
"raised. Unicode objects are converted to C strings using the default "
"encoding.  If this conversion fails, a :exc:`UnicodeError` is raised."
msgstr ""

#: ../../c-api/arg.rst:52
msgid ""
"``s#`` (string, Unicode or any read buffer compatible object) [const char "
"\\*, int (or :c:type:`Py_ssize_t`, see below)]"
msgstr ""

#: ../../c-api/arg.rst:42
msgid ""
"This variant on ``s`` stores into two C variables, the first one a pointer "
"to a character string, the second one its length.  In this case the Python "
"string may contain embedded null bytes.  Unicode objects pass back a pointer"
" to the default encoded string version of the object if such a conversion is"
" possible.  All other read-buffer compatible objects pass back a reference "
"to the raw internal data representation."
msgstr ""

#: ../../c-api/arg.rst:49
msgid ""
"Starting with Python 2.5 the type of the length argument can be controlled "
"by defining the macro :c:macro:`PY_SSIZE_T_CLEAN` before including "
":file:`Python.h`.  If the macro is defined, length is a :c:type:`Py_ssize_t`"
" rather than an int."
msgstr ""

#: ../../c-api/arg.rst:61
msgid "``s*`` (string, Unicode, or any buffer compatible object) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:55
msgid ""
"Similar to ``s#``, this code fills a Py_buffer structure provided by the "
"caller.  The buffer gets locked, so that the caller can subsequently use the"
" buffer even inside a ``Py_BEGIN_ALLOW_THREADS`` block; the caller is "
"responsible for calling ``PyBuffer_Release`` with the structure after it has"
" processed the data."
msgstr ""

#: ../../c-api/arg.rst:65
msgid "``z`` (string, Unicode  or ``None``) [const char \\*]"
msgstr ""

#: ../../c-api/arg.rst:64
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the C "
"pointer is set to *NULL*."
msgstr "``s`` に似ていますが、Python オブジェクトは ``None`` でもよく、その場合には C のポインタは *NULL* にセットされます。"

#: ../../c-api/arg.rst:68
msgid ""
"``z#`` (string, Unicode, ``None`` or any read buffer compatible object) "
"[const char \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:68
msgid "This is to ``s#`` as ``z`` is to ``s``."
msgstr ""

#: ../../c-api/arg.rst:73
msgid ""
"``z*`` (string, Unicode, ``None`` or any buffer compatible object) "
"[Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:71
msgid "This is to ``s*`` as ``z`` is to ``s``."
msgstr ""

#: ../../c-api/arg.rst:80
msgid "``u`` (Unicode) [Py_UNICODE \\*]"
msgstr ""

#: ../../c-api/arg.rst:76
msgid ""
"Convert a Python Unicode object to a C pointer to a NUL-terminated buffer of"
" 16-bit Unicode (UTF-16) data.  As with ``s``, there is no need to provide "
"storage for the Unicode data buffer; a pointer to the existing Unicode data "
"is stored into the :c:type:`Py_UNICODE` pointer variable whose address you "
"pass."
msgstr ""

#: ../../c-api/arg.rst:86
msgid "``u#`` (Unicode) [Py_UNICODE \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:83
msgid ""
"This variant on ``u`` stores into two C variables, the first one a pointer "
"to a Unicode data buffer, the second one its length. Non-Unicode objects are"
" handled by interpreting their read-buffer pointer as pointer to a "
":c:type:`Py_UNICODE` array."
msgstr ""

#: ../../c-api/arg.rst:105
msgid ""
"``es`` (string, Unicode or character buffer compatible object) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""

#: ../../c-api/arg.rst:89
msgid ""
"This variant on ``s`` is used for encoding Unicode and objects convertible "
"to Unicode into a character buffer. It only works for encoded data without "
"embedded NUL bytes."
msgstr ""

#: ../../c-api/arg.rst:93
msgid ""
"This format requires two arguments.  The first is only used as input, and "
"must be a :c:type:`const char\\*` which points to the name of an encoding as"
" a NUL-terminated string, or *NULL*, in which case the default encoding is "
"used.  An exception is raised if the named encoding is not known to Python. "
"The second argument must be a :c:type:`char\\*\\*`; the value of the pointer"
" it references will be set to a buffer with the contents of the argument "
"text.  The text will be encoded in the encoding specified by the first "
"argument."
msgstr ""

#: ../../c-api/arg.rst:102
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, copy "
"the encoded data into this buffer and adjust *\\*buffer* to reference the "
"newly allocated storage.  The caller is responsible for calling "
":c:func:`PyMem_Free` to free the allocated buffer after use."
msgstr ":c:func:`PyArg_ParseTuple` を使うと、必要なサイズのバッファを確保し、そのバッファにエンコード後のデータをコピーして、 *\\*buffer* がこの新たに確保された記憶領域を指すように変更します。呼び出し側には、確保されたバッファを使い終わった後に :c:func:`PyMem_Free` で解放する責任があります。"

#: ../../c-api/arg.rst:110
msgid ""
"``et`` (string, Unicode or character buffer compatible object) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""

#: ../../c-api/arg.rst:108
msgid ""
"Same as ``es`` except that 8-bit string objects are passed through without "
"recoding them.  Instead, the implementation assumes that the string object "
"uses the encoding passed in as parameter."
msgstr ""

#: ../../c-api/arg.rst:142
msgid ""
"``es#`` (string, Unicode or character buffer compatible object) [const char "
"\\*encoding, char \\*\\*buffer, int \\*buffer_length]"
msgstr ""

#: ../../c-api/arg.rst:113
msgid ""
"This variant on ``s#`` is used for encoding Unicode and objects convertible "
"to Unicode into a character buffer.  Unlike the ``es`` format, this variant "
"allows input data which contains NUL characters."
msgstr ""

#: ../../c-api/arg.rst:117
msgid ""
"It requires three arguments.  The first is only used as input, and must be a"
" :c:type:`const char\\*` which points to the name of an encoding as a NUL-"
"terminated string, or *NULL*, in which case the default encoding is used.  "
"An exception is raised if the named encoding is not known to Python. The "
"second argument must be a :c:type:`char\\*\\*`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text.  "
"The text will be encoded in the encoding specified by the first argument.  "
"The third argument must be a pointer to an integer; the referenced integer "
"will be set to the number of bytes in the output buffer."
msgstr ""

#: ../../c-api/arg.rst:127
msgid "There are two modes of operation:"
msgstr "この書式化単位の処理には二つのモードがあります:"

#: ../../c-api/arg.rst:129
msgid ""
"If *\\*buffer* points a *NULL* pointer, the function will allocate a buffer "
"of the needed size, copy the encoded data into this buffer and set "
"*\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer "
"after usage."
msgstr "*\\*buffer* が *NULL* ポインタを指している場合、関数は必要なサイズのバッファを確保し、そのバッファにエンコード後のデータをコピーして、 *\\*buffer* がこの新たに確保された記憶領域を指すように変更します。呼び出し側には、確保されたバッファを使い終わった後に :c:func:`PyMem_Free` で解放する責任があります。"

#: ../../c-api/arg.rst:135
msgid ""
"If *\\*buffer* points to a non-*NULL* pointer (an already allocated buffer),"
" :c:func:`PyArg_ParseTuple` will use this location as the buffer and "
"interpret the initial value of *\\*buffer_length* as the buffer size.  It "
"will then copy the encoded data into the buffer and NUL-terminate it.  If "
"the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr "*\\*buffer* が非 *NULL* のポインタ (すでにメモリ確保済みのバッファ) を指している場合、 :c:func:`PyArg_ParseTuple` はこのメモリ位置をバッファとして用い、 *\\*buffer_length* の初期値をバッファサイズとして用います。 :c:func:`PyArg_ParseTuple` は次にエンコード済みのデータをバッファにコピーして、NUL で終端します。バッファの大きさが足りなければ :exc:`ValueError`  がセットされます。"

#: ../../c-api/arg.rst:141
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded data "
"without the trailing NUL byte."
msgstr "どちらの場合も、*\\*buffer_length* は終端の NUL バイトを含まないエンコード済みデータの長さにセットされます。"

#: ../../c-api/arg.rst:147
msgid ""
"``et#`` (string, Unicode or character buffer compatible object) [const char "
"\\*encoding, char \\*\\*buffer, int \\*buffer_length]"
msgstr ""

#: ../../c-api/arg.rst:145
msgid ""
"Same as ``es#`` except that string objects are passed through without "
"recoding them. Instead, the implementation assumes that the string object "
"uses the encoding passed in as parameter."
msgstr ""

#: ../../c-api/arg.rst:151
msgid "``b`` (integer) [unsigned char]"
msgstr ""

#: ../../c-api/arg.rst:150
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny int, stored in a C "
":c:type:`unsigned char`."
msgstr "Python の非負の整数を、 C の :c:type:`unsigned char` 型の小さな符号無し整数に変換します。"

#: ../../c-api/arg.rst:157 ../../c-api/arg.rst:484
msgid "``B`` (integer) [unsigned char]"
msgstr ""

#: ../../c-api/arg.rst:154
msgid ""
"Convert a Python integer to a tiny int without overflow checking, stored in "
"a C :c:type:`unsigned char`."
msgstr "Python の整数を、オーバフローチェックを行わずに、 C の :c:type:`unsigned char` 型の小さな整数に変換します。"

#: ../../c-api/arg.rst:160 ../../c-api/arg.rst:478
msgid "``h`` (integer) [short int]"
msgstr ""

#: ../../c-api/arg.rst:160
msgid "Convert a Python integer to a C :c:type:`short int`."
msgstr "Python の整数を、 C の :c:type:`short int` 型に変換します。"

#: ../../c-api/arg.rst:166 ../../c-api/arg.rst:487
msgid "``H`` (integer) [unsigned short int]"
msgstr ""

#: ../../c-api/arg.rst:163
msgid ""
"Convert a Python integer to a C :c:type:`unsigned short int`, without "
"overflow checking."
msgstr "Python の整数を、オーバフローチェックを行わずに、 C の :c:type:`unsigned short int` 型に変換します。"

#: ../../c-api/arg.rst:169 ../../c-api/arg.rst:472
msgid "``i`` (integer) [int]"
msgstr ""

#: ../../c-api/arg.rst:169
msgid "Convert a Python integer to a plain C :c:type:`int`."
msgstr "Python の整数を、 C の :c:type:`int` 型に変換します。"

#: ../../c-api/arg.rst:175
msgid "``I`` (integer) [unsigned int]"
msgstr ""

#: ../../c-api/arg.rst:172
msgid ""
"Convert a Python integer to a C :c:type:`unsigned int`, without overflow "
"checking."
msgstr "Python の整数を、オーバフローチェックを行わずに、 C の :c:type:`unsigned int` 型に変換します。"

#: ../../c-api/arg.rst:178 ../../c-api/arg.rst:481
msgid "``l`` (integer) [long int]"
msgstr ""

#: ../../c-api/arg.rst:178
msgid "Convert a Python integer to a C :c:type:`long int`."
msgstr "Python の整数を、 C の :c:type:`long int` 型に変換します。"

#: ../../c-api/arg.rst:184
msgid "``k`` (integer) [unsigned long]"
msgstr ""

#: ../../c-api/arg.rst:181
msgid ""
"Convert a Python integer or long integer to a C :c:type:`unsigned long` "
"without overflow checking."
msgstr ""

#: ../../c-api/arg.rst:189
msgid "``L`` (integer) [PY_LONG_LONG]"
msgstr ""

#: ../../c-api/arg.rst:187
msgid ""
"Convert a Python integer to a C :c:type:`long long`.  This format is only "
"available on platforms that support :c:type:`long long` (or :c:type:`_int64`"
" on Windows)."
msgstr "Python の整数を、 C の :c:type:`long long` 型に変換します。この書式化単位は、 :c:type:`long long` 型 (または Windows の  :c:type:`_int64` 型) がサポートされているプラットフォームでのみ利用できます。"

#: ../../c-api/arg.rst:197
msgid "``K`` (integer) [unsigned PY_LONG_LONG]"
msgstr ""

#: ../../c-api/arg.rst:192
msgid ""
"Convert a Python integer or long integer to a C :c:type:`unsigned long long`"
" without overflow checking.  This format is only available on platforms that"
" support :c:type:`unsigned long long` (or :c:type:`unsigned _int64` on "
"Windows)."
msgstr ""

#: ../../c-api/arg.rst:202
msgid "``n`` (integer) [Py_ssize_t]"
msgstr ""

#: ../../c-api/arg.rst:200
msgid "Convert a Python integer or long integer to a C :c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/arg.rst:206 ../../c-api/arg.rst:512
msgid "``c`` (string of length 1) [char]"
msgstr ""

#: ../../c-api/arg.rst:205
msgid ""
"Convert a Python character, represented as a string of length 1, to a C "
":c:type:`char`."
msgstr ""

#: ../../c-api/arg.rst:209 ../../c-api/arg.rst:518
msgid "``f`` (float) [float]"
msgstr ""

#: ../../c-api/arg.rst:209
msgid "Convert a Python floating point number to a C :c:type:`float`."
msgstr "Python の浮動小数点型を、 C の :c:type:`float` 型に変換します。"

#: ../../c-api/arg.rst:212 ../../c-api/arg.rst:515
msgid "``d`` (float) [double]"
msgstr ""

#: ../../c-api/arg.rst:212
msgid "Convert a Python floating point number to a C :c:type:`double`."
msgstr "Python の浮動小数点型を、 C の :c:type:`double` 型に変換します。"

#: ../../c-api/arg.rst:215
msgid "``D`` (complex) [Py_complex]"
msgstr ""

#: ../../c-api/arg.rst:215
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr "Python の複素数型を、 C の :c:type:`Py_complex` 構造体に変換します。"

#: ../../c-api/arg.rst:220 ../../c-api/arg.rst:529
msgid "``O`` (object) [PyObject \\*]"
msgstr "``O`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:218
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  The C"
" program thus receives the actual object that was passed.  The object's "
"reference count is not increased.  The pointer stored is not *NULL*."
msgstr "Python オブジェクトを (一切変換を行わずに) C の Python オブジェクト型ポインタに保存します。これにより、C プログラムは実際のオブジェクトを受け渡しされます。オブジェクトの参照カウントは増加しません。保存されるポインタが *NULL* になることはありません。"

#: ../../c-api/arg.rst:227
msgid "``O!`` (object) [*typeobject*, PyObject \\*]"
msgstr "``O!`` (object) [*typeobject*, PyObject \\*]"

#: ../../c-api/arg.rst:223
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, but "
"takes two C arguments: the first is the address of a Python type object, the"
" second is the address of the C variable (of type :c:type:`PyObject\\*`) "
"into which the object pointer is stored.  If the Python object does not have"
" the required type, :exc:`TypeError` is raised."
msgstr "Python オブジェクトを C の Python オブジェクト型ポインタに保存します。 ``O`` に似ていますが、二つの C の引数をとります: 一つ目の引数は Python の型オブジェクトへのアドレスで、二つ目の引数はオブジェクトへのポインタが保存されている (:c:type:`PyObject\\*` の) C の変数へのアドレスです。Python オブジェクトが指定した型ではない場合、 :exc:`TypeError` を送出します。"

#: ../../c-api/arg.rst:242 ../../c-api/arg.rst:543
msgid "``O&`` (object) [*converter*, *anything*]"
msgstr "``O&`` (object) [*converter*, *anything*]"

#: ../../c-api/arg.rst:230
msgid ""
"Convert a Python object to a C variable through a *converter* function. This"
" takes two arguments: the first is a function, the second is the address of "
"a C variable (of arbitrary type), converted to :c:type:`void \\*`. The "
"*converter* function in turn is called as follows::"
msgstr ""

#: ../../c-api/arg.rst:237
msgid ""
"where *object* is the Python object to be converted and *address* is the "
":c:type:`void\\*` argument that was passed to the :c:func:`PyArg_Parse\\*` "
"function.  The returned *status* should be ``1`` for a successful conversion"
" and ``0`` if the conversion has failed.  When the conversion fails, the "
"*converter* function should raise an exception and leave the content of "
"*address* unmodified."
msgstr ""

#: ../../c-api/arg.rst:247
msgid "``S`` (string) [PyStringObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:245
msgid ""
"Like ``O`` but requires that the Python object is a string object.  Raises "
":exc:`TypeError` if the object is not a string object.  The C variable may "
"also be declared as :c:type:`PyObject\\*`."
msgstr ""

#: ../../c-api/arg.rst:252
msgid "``U`` (Unicode string) [PyUnicodeObject \\*]"
msgstr ""

#: ../../c-api/arg.rst:250
msgid ""
"Like ``O`` but requires that the Python object is a Unicode object.  Raises "
":exc:`TypeError` if the object is not a Unicode object.  The C variable may "
"also be declared as :c:type:`PyObject\\*`."
msgstr ""

#: ../../c-api/arg.rst:259
msgid "``t#`` (read-only character buffer) [char \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:255
msgid ""
"Like ``s#``, but accepts any object which implements the read-only buffer "
"interface.  The :c:type:`char\\*` variable is set to point to the first byte"
" of the buffer, and the :c:type:`int` is set to the length of the buffer. "
"Only single-segment buffer objects are accepted; :exc:`TypeError` is raised "
"for all others."
msgstr ""

#: ../../c-api/arg.rst:265
msgid "``w`` (read-write character buffer) [char \\*]"
msgstr ""

#: ../../c-api/arg.rst:262
msgid ""
"Similar to ``s``, but accepts any object which implements the read-write "
"buffer interface.  The caller must determine the length of the buffer by "
"other means, or use ``w#`` instead.  Only single-segment buffer objects are "
"accepted; :exc:`TypeError` is raised for all others."
msgstr ""

#: ../../c-api/arg.rst:272
msgid "``w#`` (read-write character buffer) [char \\*, Py_ssize_t]"
msgstr ""

#: ../../c-api/arg.rst:268
msgid ""
"Like ``s#``, but accepts any object which implements the read-write buffer "
"interface.  The :c:type:`char \\*` variable is set to point to the first "
"byte of the buffer, and the :c:type:`Py_ssize_t` is set to the length of the"
" buffer.  Only single-segment buffer objects are accepted; :exc:`TypeError` "
"is raised for all others."
msgstr ""

#: ../../c-api/arg.rst:277
msgid "``w*`` (read-write byte-oriented buffer) [Py_buffer]"
msgstr ""

#: ../../c-api/arg.rst:275
msgid "This is to ``w`` what ``s*`` is to ``s``."
msgstr ""

#: ../../c-api/arg.rst:290 ../../c-api/arg.rst:547
msgid "``(items)`` (tuple) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:280
msgid ""
"The object must be a Python sequence whose length is the number of format "
"units in *items*.  The C arguments must correspond to the individual format "
"units in *items*.  Format units for sequences may be nested."
msgstr "オブジェクトは *items* に入っている書式化単位の数だけの長さを持つ Python のシーケンス型でなければなりません。各 C 引数は *items* 内の個々の書式化単位に対応づけできなければなりません。シーケンスの書式化単位は入れ子構造にできます。"

#: ../../c-api/arg.rst:286
msgid ""
"Prior to Python version 1.5.2, this format specifier only accepted a tuple "
"containing the individual parameters, not an arbitrary sequence. Code which "
"previously caused :exc:`TypeError` to be raised here may now proceed without"
" an exception.  This is not expected to be a problem for existing code."
msgstr ""

#: ../../c-api/arg.rst:292
msgid ""
"It is possible to pass Python long integers where integers are requested; "
"however no proper range checking is done --- the most significant bits are "
"silently truncated when the receiving field is too small to receive the "
"value (actually, the semantics are inherited from downcasts in C --- your "
"mileage may vary)."
msgstr ""

#: ../../c-api/arg.rst:298
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr "その他、書式化文字列において意味を持つ文字がいくつかあります。それらの文字は括弧による入れ子内には使えません。以下に文字を示します:"

#: ../../c-api/arg.rst:306
msgid "``|``"
msgstr "``|``"

#: ../../c-api/arg.rst:302
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional.  The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""

#: ../../c-api/arg.rst:311
msgid "``:``"
msgstr "``:``"

#: ../../c-api/arg.rst:309
msgid ""
"The list of format units ends here; the string after the colon is used as "
"the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr "この文字があると、書式化単位の記述はそこで終わります; コロン以降の文字列は、エラーメッセージにおける関数名 (:c:func:`PyArg_ParseTuple` が送出する例外の \"付属値 (associated value)\") として使われます。"

#: ../../c-api/arg.rst:316
msgid "``;``"
msgstr "``;``"

#: ../../c-api/arg.rst:314
msgid ""
"The list of format units ends here; the string after the semicolon is used "
"as the error message *instead* of the default error message.  ``:`` and "
"``;`` mutually exclude each other."
msgstr "この文字があると、書式化単位の記述はそこで終わります; セミコロン以降の文字列は、デフォルトエラーメッセージを *置き換える* エラーメッセージとして使われます。``:`` と ``;`` は相互に排他の文字です。"

#: ../../c-api/arg.rst:318
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not decrement their reference count!"
msgstr "呼び出し側に提供される Python オブジェクトの参照は全て *借りた (borrowed)* ものです; オブジェクトの参照カウントをデクリメントしてはなりません!"

#: ../../c-api/arg.rst:321
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used to "
"store values from the input tuple.  There are a few cases, as described in "
"the list of format units above, where these parameters are used as input "
"values; they should match what is specified for the corresponding format "
"unit in that case."
msgstr "以下の関数に渡す補助引数 (additional argument) は、書式化文字列から決定される型へのアドレスでなければなりません; 補助引数に指定したアドレスは、タプルから入力された値を保存するために使います。上の書式化単位のリストで説明したように、補助引数を入力値として使う場合がいくつかあります; その場合、対応する書式化単位の指定する形式に従うようにしなければなりません。"

#: ../../c-api/arg.rst:327
msgid ""
"For the conversion to succeed, the *arg* object must match the format and "
"the format must be exhausted.  On success, the :c:func:`PyArg_Parse\\*` "
"functions return true, otherwise they return false and raise an appropriate "
"exception. When the :c:func:`PyArg_Parse\\*` functions fail due to "
"conversion failure in one of the format units, the variables at the "
"addresses corresponding to that and the following format units are left "
"untouched."
msgstr "変換を正しく行うためには、 *arg* オブジェクトは書式化文字に一致しなければならず、かつ書式化文字列内の書式化単位に全て値が入るようにしなければなりません。成功すると、 :c:func:`PyArg_Parse\\*` 関数は真を返します。それ以外の場合には偽を返し、適切な例外を送出します。書式化単位のどれかの変換失敗により :c:func:`PyArg_Parse\\*` が失敗した場合、失敗した書式化単位に対応するアドレスとそれ以降のアドレスの内容は変更されません。"

#: ../../c-api/arg.rst:337
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns false"
" and raises the appropriate exception."
msgstr "固定引数のみを引数にとる関数のパラメタを解釈して、ローカルな変数に変換します。成功すると真を返します;失敗すると偽を返し、適切な例外を送出します。"

#: ../../c-api/arg.rst:344
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ":c:func:`PyArg_ParseTuple` と同じですが、可変長の引数ではなく *va_list* を引数にとります。"

#: ../../c-api/arg.rst:350
msgid ""
"Parse the parameters of a function that takes both positional and keyword "
"parameters into local variables.  Returns true on success; on failure, it "
"returns false and raises the appropriate exception."
msgstr "固定引数およびキーワード引数をとる関数のパラメタを解釈して、ローカルな変数に変換します。成功すると真を返します;失敗すると偽を返し、適切な例外を送出します。"

#: ../../c-api/arg.rst:357
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it accepts a"
" va_list rather than a variable number of arguments."
msgstr ":c:func:`PyArg_ParseTupleAndKeywords` と同じですが、可変長の引数ではなく *va_list* を引数にとります。"

#: ../../c-api/arg.rst:363
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" functions "
"--- these are functions which use the :const:`METH_OLDARGS` parameter "
"parsing method.  This is not recommended for use in parameter parsing in new"
" code, and most code in the standard interpreter has been modified to no "
"longer use this for that purpose.  It does remain a convenient way to "
"decompose other tuples, however, and may continue to be used for that "
"purpose."
msgstr "\"旧スタイル\" の関数における引数リストを分析するために使われる関数です --- 旧スタイルの関数は、引数解釈手法に :const:`METH_OLDARGS` を使います。新たに書かれるコードでのパラメタ解釈にはこの関数の使用は奨められず、標準のインタプリタにおけるほとんどのコードがもはや引数解釈のためにこの関数を使わないように変更済みです。この関数を残しているのは、この関数が依然として引数以外のタプルを分析する上で便利だからですが、この目的においては将来も使われつづけるかもしれません。"

#: ../../c-api/arg.rst:374
msgid ""
"A simpler form of parameter retrieval which does not use a format string to "
"specify the types of the arguments.  Functions which use this method to "
"retrieve their parameters should be declared as :const:`METH_VARARGS` in "
"function or method tables.  The tuple containing the actual parameters "
"should be passed as *args*; it must actually be a tuple.  The length of the "
"tuple must be at least *min* and no more than *max*; *min* and *max* may be "
"equal.  Additional arguments must be passed to the function, each of which "
"should be a pointer to a :c:type:`PyObject\\*` variable; these will be "
"filled in with the values from *args*; they will contain borrowed "
"references.  The variables which correspond to optional parameters not given"
" by *args* will not be filled in; these should be initialized by the caller."
" This function returns true on success and false if *args* is not a tuple or"
" contains the wrong number of elements; an exception will be set if there "
"was a failure."
msgstr "パラメータ取得を簡単にした形式で、引数の型を指定する書式化文字列を使いません。パラメタの取得にこの手法を使う関数は、関数宣言テーブル、またはメソッド宣言テーブル内で :const:`METH_VARARGS` として宣言しなければなりません。実引数の入ったタプルは *args* に渡します; このタプルは本当のタプルでなければなりません。タプルの長さは少なくとも *min* で、 *max* を超えてはなりません; *min* と *max* が等しくてもかまいません。補助引数を関数に渡さなければならず、各補助引数は :c:type:`PyObject\\*`  変数へのポインタでなければなりません; これらの補助引数には、 *args* の値が入ります; 値の参照は借用参照です。オプションのパラメタに対応する変数のうち、 *args* に指定していないものには値が入りません; 呼び出し側はそれらの値を初期化しておかなければなりません。この関数は成功すると真を返し、 *args* がタプルでない場合や間違った数の要素が入っている場合に偽を返します; 何らかの失敗が起きた場合には例外をセットします。"

#: ../../c-api/arg.rst:388
msgid ""
"This is an example of the use of this function, taken from the sources for "
"the :mod:`_weakref` helper module for weak references::"
msgstr "この関数の使用例を以下に示します。この例は、弱参照のための :mod:`_weakref` 補助モジュールのソースコードからとったものです::"

#: ../../c-api/arg.rst:404
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr "この例における :c:func:`PyArg_UnpackTuple` 呼び出しは、 :c:func:`PyArg_ParseTuple` を使った以下の呼び出しと全く等価です::"

#: ../../c-api/arg.rst:411
msgid ""
"This function used an :c:type:`int` type for *min* and *max*. This might "
"require changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/arg.rst:418
msgid ""
"Create a new value based on a format string similar to those accepted by the"
" :c:func:`PyArg_Parse\\*` family of functions and a sequence of values. "
"Returns the value or *NULL* in the case of an error; an exception will be "
"raised if *NULL* is returned."
msgstr ""

#: ../../c-api/arg.rst:423
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple "
"only if its format string contains two or more format units.  If the format "
"string is empty, it returns ``None``; if it contains exactly one format "
"unit, it returns whatever object is described by that format unit.  To force"
" it to return a tuple of size 0 or one, parenthesize the format string."
msgstr ":c:func:`Py_BuildValue` は常にタプルを生成するとは限りません。この関数がタプルを生成するのは、書式化文字列に二つ以上の書式化単位が入っているときだけです。書式化文字列が空の場合、 ``None``  を返します; 書式化単位が厳密に一つだけ入っている場合、書式化単位で指定されている何らかのオブジェクト単体を返します。サイズがゼロや 1 のタプルを返すように強制するには、丸括弧で囲われた書式化文字列を使います。"

#: ../../c-api/arg.rst:430
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is copied. "
"Buffers provided by the caller are never referenced by the objects created "
"by :c:func:`Py_BuildValue`.  In other words, if your code invokes "
":c:func:`malloc` and passes the allocated memory to :c:func:`Py_BuildValue`,"
" your code is responsible for calling :c:func:`free` for that memory once "
":c:func:`Py_BuildValue` returns."
msgstr ""

#: ../../c-api/arg.rst:438
msgid ""
"In the following description, the quoted form is the format unit; the entry "
"in (round) parentheses is the Python object type that the format unit will "
"return; and the entry in [square] brackets is the type of the C value(s) to "
"be passed."
msgstr "以下の説明では、引用符のついた形式は書式化単位です; (丸)括弧で囲った部分は書式化単位が返す Python のオブジェクト型です; [角] 括弧は関数に渡す値の C 変数型です。"

#: ../../c-api/arg.rst:443
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make long"
" format strings a tad more readable."
msgstr "書式化文字列内では、(``s#`` のような書式化単位を除いて) スペース、タブ、コロンおよびコンマは無視されます。これらの文字を使うと、長い書式化文字列をちょっとだけ読みやすくできます。"

#: ../../c-api/arg.rst:449
msgid "``s`` (string) [char \\*]"
msgstr ""

#: ../../c-api/arg.rst:448
msgid ""
"Convert a null-terminated C string to a Python object.  If the C string "
"pointer is *NULL*, ``None`` is used."
msgstr ""

#: ../../c-api/arg.rst:453
msgid "``s#`` (string) [char \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:452
msgid ""
"Convert a C string and its length to a Python object.  If the C string "
"pointer is *NULL*, the length is ignored and ``None`` is returned."
msgstr ""

#: ../../c-api/arg.rst:456
msgid "``z`` (string or ``None``) [char \\*]"
msgstr ""

#: ../../c-api/arg.rst:456
msgid "Same as ``s``."
msgstr "``s`` と同じです。"

#: ../../c-api/arg.rst:459
msgid "``z#`` (string or ``None``) [char \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:459
msgid "Same as ``s#``."
msgstr "``s#`` と同じです。"

#: ../../c-api/arg.rst:464
msgid "``u`` (Unicode string) [Py_UNICODE \\*]"
msgstr ""

#: ../../c-api/arg.rst:462
msgid ""
"Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4) data to a "
"Python Unicode object.  If the Unicode buffer pointer is *NULL*, ``None`` is"
" returned."
msgstr "null 終端された Unicode (UCS-2 または UCS-4) データのバッファから Python オブジェクトに変換します。Unicode バッファポインタが *NULL* の場合、``None`` になります。"

#: ../../c-api/arg.rst:469
msgid "``u#`` (Unicode string) [Py_UNICODE \\*, int]"
msgstr ""

#: ../../c-api/arg.rst:467
msgid ""
"Convert a Unicode (UCS-2 or UCS-4) data buffer and its length to a Python "
"Unicode object.   If the Unicode buffer pointer is *NULL*, the length is "
"ignored and ``None`` is returned."
msgstr "null 終端された Unicode (UCS-2 または UCS-4) データのバッファとその長さから Python オブジェクトに変換します。Unicode バッファポインタが *NULL* の場合、長さは無視され ``None`` になります。"

#: ../../c-api/arg.rst:472
msgid "Convert a plain C :c:type:`int` to a Python integer object."
msgstr "通常の C の :c:type:`int` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:475
msgid "``b`` (integer) [char]"
msgstr ""

#: ../../c-api/arg.rst:475
msgid "Convert a plain C :c:type:`char` to a Python integer object."
msgstr "通常のC の :c:type:`char` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:478
msgid "Convert a plain C :c:type:`short int` to a Python integer object."
msgstr "通常のC の :c:type:`short int` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:481
msgid "Convert a C :c:type:`long int` to a Python integer object."
msgstr "C の :c:type:`long int` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:484
msgid "Convert a C :c:type:`unsigned char` to a Python integer object."
msgstr "C の :c:type:`unsigned char` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:487
msgid "Convert a C :c:type:`unsigned short int` to a Python integer object."
msgstr "C の :c:type:`unsigned short int` を Python の整数オブジェクトに変換します。"

#: ../../c-api/arg.rst:491
msgid "``I`` (integer/long) [unsigned int]"
msgstr ""

#: ../../c-api/arg.rst:490
msgid ""
"Convert a C :c:type:`unsigned int` to a Python integer object or a Python "
"long integer object, if it is larger than ``sys.maxint``."
msgstr ""

#: ../../c-api/arg.rst:495
msgid "``k`` (integer/long) [unsigned long]"
msgstr ""

#: ../../c-api/arg.rst:494
msgid ""
"Convert a C :c:type:`unsigned long` to a Python integer object or a Python "
"long integer object, if it is larger than ``sys.maxint``."
msgstr ""

#: ../../c-api/arg.rst:499
msgid "``L`` (long) [PY_LONG_LONG]"
msgstr ""

#: ../../c-api/arg.rst:498
msgid ""
"Convert a C :c:type:`long long` to a Python long integer object. Only "
"available on platforms that support :c:type:`long long`."
msgstr ""

#: ../../c-api/arg.rst:503
msgid "``K`` (long) [unsigned PY_LONG_LONG]"
msgstr ""

#: ../../c-api/arg.rst:502
msgid ""
"Convert a C :c:type:`unsigned long long` to a Python long integer object. "
"Only available on platforms that support :c:type:`unsigned long long`."
msgstr ""

#: ../../c-api/arg.rst:508
msgid "``n`` (int) [Py_ssize_t]"
msgstr ""

#: ../../c-api/arg.rst:506
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer or long integer."
msgstr ""

#: ../../c-api/arg.rst:511
msgid ""
"Convert a C :c:type:`int` representing a character to a Python string of "
"length 1."
msgstr ""

#: ../../c-api/arg.rst:515
msgid "Convert a C :c:type:`double` to a Python floating point number."
msgstr "C の :c:type:`double` を Python の浮動小数点数に変換します。"

#: ../../c-api/arg.rst:518
msgid "Same as ``d``."
msgstr ""

#: ../../c-api/arg.rst:521
msgid "``D`` (complex) [Py_complex \\*]"
msgstr ""

#: ../../c-api/arg.rst:521
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr "C の :c:type:`Py_complex` 構造体を Python の複素数に変換します。"

#: ../../c-api/arg.rst:524
msgid ""
"Pass a Python object untouched (except for its reference count, which is "
"incremented by one).  If the object passed in is a *NULL* pointer, it is "
"assumed that this was caused because the call producing the argument found "
"an error and set an exception. Therefore, :c:func:`Py_BuildValue` will "
"return *NULL* but won't raise an exception.  If no exception has been raised"
" yet, :exc:`SystemError` is set."
msgstr "Python オブジェクトを手を加えずに渡します (ただし、参照カウントは 1 インクリメントします)。渡したオブジェクトが *NULL* ポインタの場合、この引数を生成するのに使った何らかの呼び出しがエラーになったのが原因であると仮定して、例外をセットします。従ってこのとき :c:func:`Py_BuildValue` は *NULL* を返しますが :c:func:`Py_BuildValue` 自体は例外を送出しません。例外をまだ送出していなければ :exc:`SystemError` をセットします。"

#: ../../c-api/arg.rst:532
msgid "``S`` (object) [PyObject \\*]"
msgstr "``S`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:532
msgid "Same as ``O``."
msgstr "``O`` と同じです。"

#: ../../c-api/arg.rst:537
msgid "``N`` (object) [PyObject \\*]"
msgstr "``N`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:535
msgid ""
"Same as ``O``, except it doesn't increment the reference count on the "
"object.  Useful when the object is created by a call to an object "
"constructor in the argument list."
msgstr ""

#: ../../c-api/arg.rst:540
msgid ""
"Convert *anything* to a Python object through a *converter* function. The "
"function is called with *anything* (which should be compatible with "
":c:type:`void \\*`) as its argument and should return a \"new\" Python "
"object, or *NULL* if an error occurred."
msgstr ""

#: ../../c-api/arg.rst:546
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr "C の値からなる配列を、同じ要素数を持つ Python のタプルに変換します。"

#: ../../c-api/arg.rst:551
msgid "``[items]`` (list) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:550
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr "C の値からなる配列を、同じ要素数を持つ Python のリストに変換します。"

#: ../../c-api/arg.rst:556
msgid "``{items}`` (dictionary) [*matching-items*]"
msgstr ""

#: ../../c-api/arg.rst:554
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr "C の値からなる配列を Python の辞書に変換します。一連のペアからなる C の値が、それぞれキーおよび値となって辞書に追加されます。"

#: ../../c-api/arg.rst:558
msgid ""
"If there is an error in the format string, the :exc:`SystemError` exception "
"is set and *NULL* returned."
msgstr "書式化文字列に関するエラーが生じると、 :exc:`SystemError` 例外をセットして *NULL* を返します。"

#: ../../c-api/arg.rst:563
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ":c:func:`Py_BuildValue` と同じですが、可変長引数の代わりに va_list を受け取ります。"
