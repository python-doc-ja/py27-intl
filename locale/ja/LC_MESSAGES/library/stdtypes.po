# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:37+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/stdtypes.rst:8
msgid "Built-in Types"
msgstr "組み込み型"

#: ../../library/stdtypes.rst:10
msgid ""
"The following sections describe the standard types that are built into the "
"interpreter."
msgstr "以下のセクションでは、インタプリタに組み込まれている標準型について記述します。"

#: ../../library/stdtypes.rst:15
msgid ""
"Historically (until release 2.2), Python's built-in types have differed from"
" user-defined types because it was not possible to use the built-in types as"
" the basis for object-oriented inheritance. This limitation no longer "
"exists."
msgstr ""

#: ../../library/stdtypes.rst:22
msgid ""
"The principal built-in types are numerics, sequences, mappings, files, "
"classes, instances and exceptions."
msgstr ""

#: ../../library/stdtypes.rst:27
msgid ""
"Some operations are supported by several object types; in particular, "
"practically all objects can be compared, tested for truth value, and "
"converted to a string (with the :ref:`repr() <func-repr>` function or the "
"slightly different :func:`str` function).  The latter function is implicitly"
" used when an object is written by the :func:`print` function."
msgstr ""

#: ../../library/stdtypes.rst:37
msgid "Truth Value Testing"
msgstr "真理値判定"

#: ../../library/stdtypes.rst:46
msgid ""
"Any object can be tested for truth value, for use in an :keyword:`if` or "
":keyword:`while` condition or as operand of the Boolean operations below. "
"The following values are considered false:"
msgstr "どのオブジェクトも真理値を判定でき、 :keyword:`if` や :keyword:`while` 条件に、または以下のブール演算の被演算子に使えます。以下の値は偽と見なされます:"

#: ../../library/stdtypes.rst:52
msgid "``None``"
msgstr "``None``"

#: ../../library/stdtypes.rst:56
msgid "``False``"
msgstr "``False``"

#: ../../library/stdtypes.rst:58
msgid "zero of any numeric type, for example, ``0``, ``0L``, ``0.0``, ``0j``."
msgstr ""

#: ../../library/stdtypes.rst:60
msgid "any empty sequence, for example, ``''``, ``()``, ``[]``."
msgstr "空のシーケンス。例えば ``''``, ``()``, ``[]`` 。"

#: ../../library/stdtypes.rst:62
msgid "any empty mapping, for example, ``{}``."
msgstr "空のマッピング。例えば ``{}`` 。"

#: ../../library/stdtypes.rst:64
msgid ""
"instances of user-defined classes, if the class defines a "
":meth:`__nonzero__` or :meth:`__len__` method, when that method returns the "
"integer zero or :class:`bool` value ``False``. [1]_"
msgstr ""

#: ../../library/stdtypes.rst:70
msgid ""
"All other values are considered true --- so objects of many types are always"
" true."
msgstr "それ以外の全ての値は真と見なされます --- 従って、多くの型のオブジェクトは常に真です。"

#: ../../library/stdtypes.rst:79
msgid ""
"Operations and built-in functions that have a Boolean result always return "
"``0`` or ``False`` for false and ``1`` or ``True`` for true, unless "
"otherwise stated. (Important exception: the Boolean operations ``or`` and "
"``and`` always return one of their operands.)"
msgstr "ブール値の結果を返す演算および組み込み関数は、特に注釈のない限り常に偽値として ``0`` または ``False`` を返し、真値として ``1`` または ``True`` を返します。 (重要な例外: ブール演算 ``or`` および ``and`` は常に被演算子のうちの一つを返します。)"

#: ../../library/stdtypes.rst:88
msgid "Boolean Operations --- :keyword:`and`, :keyword:`or`, :keyword:`not`"
msgstr "ブール演算 --- :keyword:`and`, :keyword:`or`, :keyword:`not`"

#: ../../library/stdtypes.rst:92
msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr "以下にブール演算を、優先順位が低い順に示します:"

#: ../../library/stdtypes.rst:95 ../../library/stdtypes.rst:153
#: ../../library/stdtypes.rst:299 ../../library/stdtypes.rst:397
#: ../../library/stdtypes.rst:439 ../../library/stdtypes.rst:728
#: ../../library/stdtypes.rst:1596
msgid "Operation"
msgstr "演算"

#: ../../library/stdtypes.rst:95 ../../library/stdtypes.rst:299
#: ../../library/stdtypes.rst:397 ../../library/stdtypes.rst:439
#: ../../library/stdtypes.rst:728 ../../library/stdtypes.rst:1596
msgid "Result"
msgstr "結果"

#: ../../library/stdtypes.rst:95 ../../library/stdtypes.rst:153
#: ../../library/stdtypes.rst:299 ../../library/stdtypes.rst:397
#: ../../library/stdtypes.rst:439 ../../library/stdtypes.rst:728
#: ../../library/stdtypes.rst:1445 ../../library/stdtypes.rst:1596
msgid "Notes"
msgstr "注釈"

#: ../../library/stdtypes.rst:97
msgid "``x or y``"
msgstr "``x or y``"

#: ../../library/stdtypes.rst:97
msgid "if *x* is false, then *y*, else *x*"
msgstr "*x* が偽なら *y*, そうでなければ *x*"

#: ../../library/stdtypes.rst:97 ../../library/stdtypes.rst:165
#: ../../library/stdtypes.rst:307 ../../library/stdtypes.rst:730
#: ../../library/stdtypes.rst:733 ../../library/stdtypes.rst:1451
#: ../../library/stdtypes.rst:1607
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/stdtypes.rst:100
msgid "``x and y``"
msgstr "``x and y``"

#: ../../library/stdtypes.rst:100
msgid "if *x* is false, then *x*, else *y*"
msgstr "*x* が偽なら *x*, そうでなければ *y*"

#: ../../library/stdtypes.rst:100 ../../library/stdtypes.rst:321
#: ../../library/stdtypes.rst:323 ../../library/stdtypes.rst:739
#: ../../library/stdtypes.rst:1455 ../../library/stdtypes.rst:1457
#: ../../library/stdtypes.rst:1613
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/stdtypes.rst:103
msgid "``not x``"
msgstr "``not x``"

#: ../../library/stdtypes.rst:103
msgid "if *x* is false, then ``True``, else ``False``"
msgstr "*x* が偽なら ``True``, そうでなければ ``False``"

#: ../../library/stdtypes.rst:103 ../../library/stdtypes.rst:318
#: ../../library/stdtypes.rst:742 ../../library/stdtypes.rst:1459
#: ../../library/stdtypes.rst:1461 ../../library/stdtypes.rst:1463
#: ../../library/stdtypes.rst:1465 ../../library/stdtypes.rst:1616
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/stdtypes.rst:112 ../../library/stdtypes.rst:172
#: ../../library/stdtypes.rst:345 ../../library/stdtypes.rst:457
#: ../../library/stdtypes.rst:782 ../../library/stdtypes.rst:1488
#: ../../library/stdtypes.rst:1643
msgid "Notes:"
msgstr "注釈:"

#: ../../library/stdtypes.rst:115
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is :const:`False`."
msgstr "これは、短絡的な演算子であり、第一引数が :const:`False` のときにのみ、第二引数を評価します。"

#: ../../library/stdtypes.rst:119
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is :const:`True`."
msgstr "これは、短絡的な演算子であり、第一引数が :const:`True` のときにのみ、第二引数を評価します。"

#: ../../library/stdtypes.rst:123
msgid ""
"``not`` has a lower priority than non-Boolean operators, so ``not a == b`` "
"is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr "``not`` は非ブール演算子よりも優先度が低いので、 ``not a == b`` は ``not (a == b)`` と解釈され、 ``a == not b`` は構文エラーです。"

#: ../../library/stdtypes.rst:130
msgid "Comparisons"
msgstr "比較"

#: ../../library/stdtypes.rst:144
msgid ""
"Comparison operations are supported by all objects.  They all have the same "
"priority (which is higher than that of the Boolean operations). Comparisons "
"can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x"
" < y and y <= z``, except that *y* is evaluated only once (but in both cases"
" *z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""

#: ../../library/stdtypes.rst:150
msgid "This table summarizes the comparison operations:"
msgstr "以下の表に比較演算をまとめます:"

#: ../../library/stdtypes.rst:153 ../../library/stdtypes.rst:1422
#: ../../library/stdtypes.rst:1445
msgid "Meaning"
msgstr "意味"

#: ../../library/stdtypes.rst:155
msgid "``<``"
msgstr "``<``"

#: ../../library/stdtypes.rst:155
msgid "strictly less than"
msgstr "より小さい"

#: ../../library/stdtypes.rst:157
msgid "``<=``"
msgstr "``<=``"

#: ../../library/stdtypes.rst:157
msgid "less than or equal"
msgstr "以下"

#: ../../library/stdtypes.rst:159
msgid "``>``"
msgstr "``>``"

#: ../../library/stdtypes.rst:159
msgid "strictly greater than"
msgstr "より大きい"

#: ../../library/stdtypes.rst:161
msgid "``>=``"
msgstr "``>=``"

#: ../../library/stdtypes.rst:161
msgid "greater than or equal"
msgstr "以上"

#: ../../library/stdtypes.rst:163
msgid "``==``"
msgstr "``==``"

#: ../../library/stdtypes.rst:163
msgid "equal"
msgstr "等しい"

#: ../../library/stdtypes.rst:165
msgid "``!=``"
msgstr "``!=``"

#: ../../library/stdtypes.rst:165
msgid "not equal"
msgstr "等しくない"

#: ../../library/stdtypes.rst:167
msgid "``is``"
msgstr "``is``"

#: ../../library/stdtypes.rst:167
msgid "object identity"
msgstr "同一のオブジェクトである"

#: ../../library/stdtypes.rst:169
msgid "``is not``"
msgstr "``is not``"

#: ../../library/stdtypes.rst:169
msgid "negated object identity"
msgstr "同一のオブジェクトでない"

#: ../../library/stdtypes.rst:175
msgid ""
"``!=`` can also be written ``<>``, but this is an obsolete usage kept for "
"backwards compatibility only. New code should always use ``!=``."
msgstr ""

#: ../../library/stdtypes.rst:183
msgid ""
"Objects of different types, except different numeric types and different "
"string types, never compare equal; such objects are ordered consistently but"
" arbitrarily (so that sorting a heterogeneous array yields a consistent "
"result). Furthermore, some types (for example, file objects) support only a "
"degenerate notion of comparison where any two objects of that type are "
"unequal.  Again, such objects are ordered arbitrarily but consistently. The "
"``<``, ``<=``, ``>`` and ``>=`` operators will raise a :exc:`TypeError` "
"exception when any operand is a complex number."
msgstr ""

#: ../../library/stdtypes.rst:201
msgid ""
"Non-identical instances of a class normally compare as non-equal unless the "
"class defines the :meth:`__eq__` method or the :meth:`__cmp__` method."
msgstr ""

#: ../../library/stdtypes.rst:204
msgid ""
"Instances of a class cannot be ordered with respect to other instances of "
"the same class, or other types of object, unless the class defines either "
"enough of the rich comparison methods (:meth:`__lt__`, :meth:`__le__`, "
":meth:`__gt__`, and :meth:`__ge__`) or the :meth:`__cmp__` method."
msgstr ""

#: ../../library/stdtypes.rst:211
msgid ""
"Objects of different types except numbers are ordered by their type names; "
"objects of the same types that don't support proper comparison are ordered "
"by their address."
msgstr ""

#: ../../library/stdtypes.rst:219
msgid ""
"Two more operations with the same syntactic priority, ``in`` and ``not in``,"
" are supported only by sequence types (below)."
msgstr ""

#: ../../library/stdtypes.rst:226
msgid ""
"Numeric Types --- :class:`int`, :class:`float`, :class:`long`, "
":class:`complex`"
msgstr ""

#: ../../library/stdtypes.rst:237
msgid ""
"There are four distinct numeric types: :dfn:`plain integers`, :dfn:`long "
"integers`, :dfn:`floating point numbers`, and :dfn:`complex numbers`. In "
"addition, Booleans are a subtype of plain integers. Plain integers (also "
"just called :dfn:`integers`) are implemented using :c:type:`long` in C, "
"which gives them at least 32 bits of precision (``sys.maxint`` is always set"
" to the maximum plain integer value for the current platform, the minimum "
"value is ``-sys.maxint - 1``).  Long integers have unlimited precision.  "
"Floating point numbers are usually implemented using :c:type:`double` in C; "
"information about the precision and internal representation of floating "
"point numbers for the machine on which your program is running is available "
"in :data:`sys.float_info`.  Complex numbers have a real and imaginary part, "
"which are each a floating point number.  To extract these parts from a "
"complex number *z*, use ``z.real`` and ``z.imag``. (The standard library "
"includes additional numeric types, :mod:`fractions` that hold rationals, and"
" :mod:`decimal` that hold floating-point numbers with user-definable "
"precision.)"
msgstr ""

#: ../../library/stdtypes.rst:262
msgid ""
"Numbers are created by numeric literals or as the result of built-in "
"functions and operators.  Unadorned integer literals (including binary, hex,"
" and octal numbers) yield plain integers unless the value they denote is too"
" large to be represented as a plain integer, in which case they yield a long"
" integer. Integer literals with an ``'L'`` or ``'l'`` suffix yield long "
"integers (``'L'`` is preferred because ``1l`` looks too much like eleven!)."
"  Numeric literals containing a decimal point or an exponent sign yield "
"floating point numbers. Appending ``'j'`` or ``'J'`` to a numeric literal "
"yields a complex number with a zero real part. A complex numeric literal is "
"the sum of a real and an imaginary part."
msgstr ""

#: ../../library/stdtypes.rst:287
msgid ""
"Python fully supports mixed arithmetic: when a binary arithmetic operator "
"has operands of different numeric types, the operand with the \"narrower\" "
"type is widened to that of the other, where plain integer is narrower than "
"long integer is narrower than floating point is narrower than complex. "
"Comparisons between numbers of mixed type use the same rule. [2]_ The "
"constructors :func:`int`, :func:`long`, :func:`float`, and :func:`complex` "
"can be used to produce numbers of a specific type."
msgstr ""

#: ../../library/stdtypes.rst:295
msgid ""
"All built-in numeric types support the following operations. See "
":ref:`power` and later sections for the operators' priorities."
msgstr ""

#: ../../library/stdtypes.rst:301
msgid "``x + y``"
msgstr "``x + y``"

#: ../../library/stdtypes.rst:301
msgid "sum of *x* and *y*"
msgstr "*x* と *y* の和"

#: ../../library/stdtypes.rst:303
msgid "``x - y``"
msgstr "``x - y``"

#: ../../library/stdtypes.rst:303
msgid "difference of *x* and *y*"
msgstr "*x* と *y* の差"

#: ../../library/stdtypes.rst:305
msgid "``x * y``"
msgstr "``x * y``"

#: ../../library/stdtypes.rst:305
msgid "product of *x* and *y*"
msgstr "*x* と *y* の積"

#: ../../library/stdtypes.rst:307
msgid "``x / y``"
msgstr "``x / y``"

#: ../../library/stdtypes.rst:307
msgid "quotient of *x* and *y*"
msgstr "*x* と *y* の商"

#: ../../library/stdtypes.rst:309
msgid "``x // y``"
msgstr "``x // y``"

#: ../../library/stdtypes.rst:309
msgid "(floored) quotient of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:309
msgid "(4)(5)"
msgstr ""

#: ../../library/stdtypes.rst:312
msgid "``x % y``"
msgstr "``x % y``"

#: ../../library/stdtypes.rst:312
msgid "remainder of ``x / y``"
msgstr "``x / y`` の剰余"

#: ../../library/stdtypes.rst:312 ../../library/stdtypes.rst:1467
#: ../../library/stdtypes.rst:1471 ../../library/stdtypes.rst:1625
#: ../../library/stdtypes.rst:1634
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/stdtypes.rst:314
msgid "``-x``"
msgstr "``-x``"

#: ../../library/stdtypes.rst:314
msgid "*x* negated"
msgstr "*x* の符号反転"

#: ../../library/stdtypes.rst:316
msgid "``+x``"
msgstr "``+x``"

#: ../../library/stdtypes.rst:316
msgid "*x* unchanged"
msgstr "*x* そのまま"

#: ../../library/stdtypes.rst:318
msgid "``abs(x)``"
msgstr "``abs(x)``"

#: ../../library/stdtypes.rst:318
msgid "absolute value or magnitude of *x*"
msgstr "*x* の絶対値または大きさ"

#: ../../library/stdtypes.rst:321
msgid "``int(x)``"
msgstr "``int(x)``"

#: ../../library/stdtypes.rst:321
msgid "*x* converted to integer"
msgstr "*x* の整数への変換"

#: ../../library/stdtypes.rst:323
msgid "``long(x)``"
msgstr ""

#: ../../library/stdtypes.rst:323
msgid "*x* converted to long integer"
msgstr ""

#: ../../library/stdtypes.rst:325
msgid "``float(x)``"
msgstr "``float(x)``"

#: ../../library/stdtypes.rst:325
msgid "*x* converted to floating point"
msgstr "*x* の浮動小数点数への変換"

#: ../../library/stdtypes.rst:325 ../../library/stdtypes.rst:736
#: ../../library/stdtypes.rst:1481 ../../library/stdtypes.rst:1631
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/stdtypes.rst:327
msgid "``complex(re,im)``"
msgstr ""

#: ../../library/stdtypes.rst:327
msgid ""
"a complex number with real part *re*, imaginary part *im*. *im* defaults to "
"zero."
msgstr "実部 *re*, 虚部 *im* の複素数。 *im* の既定値はゼロ。"

#: ../../library/stdtypes.rst:331
msgid "``c.conjugate()``"
msgstr "``c.conjugate()``"

#: ../../library/stdtypes.rst:331
msgid "conjugate of the complex number *c*. (Identity on real numbers)"
msgstr ""

#: ../../library/stdtypes.rst:334
msgid "``divmod(x, y)``"
msgstr "``divmod(x, y)``"

#: ../../library/stdtypes.rst:334
msgid "the pair ``(x // y, x % y)``"
msgstr "``(x // y, x % y)`` からなるペア"

#: ../../library/stdtypes.rst:334 ../../library/stdtypes.rst:744
msgid "(3)(4)"
msgstr "(3)(4)"

#: ../../library/stdtypes.rst:336
msgid "``pow(x, y)``"
msgstr "``pow(x, y)``"

#: ../../library/stdtypes.rst:336 ../../library/stdtypes.rst:338
msgid "*x* to the power *y*"
msgstr "*x* の *y* 乗"

#: ../../library/stdtypes.rst:336
msgid "(3)(7)"
msgstr ""

#: ../../library/stdtypes.rst:338
msgid "``x ** y``"
msgstr "``x ** y``"

#: ../../library/stdtypes.rst:338 ../../library/stdtypes.rst:1453
#: ../../library/stdtypes.rst:1636
msgid "\\(7)"
msgstr "\\(7)"

#: ../../library/stdtypes.rst:352
msgid ""
"For (plain or long) integer division, the result is an integer. The result "
"is always rounded towards minus infinity: 1/2 is 0, (-1)/2 is -1, 1/(-2) is "
"-1, and (-1)/(-2) is 0.  Note that the result is a long integer if either "
"operand is a long integer, regardless of the numeric value."
msgstr ""

#: ../../library/stdtypes.rst:365
msgid ""
"Conversion from floats using :func:`int` or :func:`long` truncates toward "
"zero like the related function, :func:`math.trunc`.  Use the function "
":func:`math.floor` to round downward and :func:`math.ceil` to round upward."
msgstr ""

#: ../../library/stdtypes.rst:371
msgid "See :ref:`built-in-funcs` for a full description."
msgstr ""

#: ../../library/stdtypes.rst:374
msgid ""
"The floor division operator, the modulo operator, and the :func:`divmod` "
"function are no longer defined for complex numbers.  Instead, convert to a "
"floating point number using the :func:`abs` function if appropriate."
msgstr "切り捨て除算演算子、モジュロ演算子、および :func:`divmod` 関数は、複素数に対してはもはや定義されていません。目的に合うならば、代わりに :func:`abs` を使って浮動小数点に変換してください。"

#: ../../library/stdtypes.rst:380
msgid ""
"Also referred to as integer division.  The resultant value is a whole "
"integer, though the result's type is not necessarily int."
msgstr ""

#: ../../library/stdtypes.rst:384
msgid ""
"float also accepts the strings \"nan\" and \"inf\" with an optional prefix "
"\"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr "浮動小数点数は、文字列 \"nan\" と \"inf\" を、必要なら接頭辞 \"+\" または \"-\" と共に、非数 (Not a Number (NaN)) や正、負の無限大として受け付けます。"

#: ../../library/stdtypes.rst:390
msgid ""
"Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for "
"programming languages."
msgstr "Python は、プログラム言語一般でそうであるように、 ``pow(0, 0)`` および ``0 ** 0`` を ``1`` と定義します。"

#: ../../library/stdtypes.rst:393
msgid ""
"All :class:`numbers.Real` types (:class:`int`, :class:`long`, and "
":class:`float`) also include the following operations:"
msgstr ""

#: ../../library/stdtypes.rst:399
msgid "``math.trunc(x)``"
msgstr "``math.trunc(x)``"

#: ../../library/stdtypes.rst:399
msgid "*x* truncated to Integral"
msgstr "*x* を整数に切り捨てます"

#: ../../library/stdtypes.rst:401
msgid "``round(x[, n])``"
msgstr "``round(x[, n])``"

#: ../../library/stdtypes.rst:401
msgid ""
"*x* rounded to n digits, rounding ties away from zero. If n is omitted, it "
"defaults to 0."
msgstr ""

#: ../../library/stdtypes.rst:405
msgid "``math.floor(x)``"
msgstr "``math.floor(x)``"

#: ../../library/stdtypes.rst:405
msgid "the greatest integral float <= *x*"
msgstr "*x* 以下の最大の整数値を持つ浮動小数点数です"

#: ../../library/stdtypes.rst:407
msgid "``math.ceil(x)``"
msgstr "``math.ceil(x)``"

#: ../../library/stdtypes.rst:407
msgid "the least integral float >= *x*"
msgstr "*x* 以上の最小の整数値を持つ浮動小数点数です"

#: ../../library/stdtypes.rst:416
msgid "Bitwise Operations on Integer Types"
msgstr "整数型におけるビット単位演算"

#: ../../library/stdtypes.rst:428
msgid ""
"Bitwise operations only make sense for integers.  Negative numbers are "
"treated as their 2's complement value (this assumes a sufficiently large "
"number of bits that no overflow occurs during the operation)."
msgstr "ビット単位演算は、整数に対してのみ意味があります。負の数は、その 2 の補数の値として扱われます (演算中にオーバフローが起こらないように十分なビット数があるものと仮定します) 。"

#: ../../library/stdtypes.rst:432
msgid ""
"The priorities of the binary bitwise operations are all lower than the "
"numeric operations and higher than the comparisons; the unary operation "
"``~`` has the same priority as the other unary numeric operations (``+`` and"
" ``-``)."
msgstr "二項ビット単位演算の優先順位は全て、数値演算よりも低く、比較よりも高いです; 単項演算 ``~`` の優先順位は他の単項数値演算 (``+`` および ``-``) と同じです。"

#: ../../library/stdtypes.rst:436
msgid "This table lists the bitwise operations sorted in ascending priority:"
msgstr "以下の表では、ビット単位演算を優先順位が低い順に並べています:"

#: ../../library/stdtypes.rst:441
msgid "``x | y``"
msgstr "``x | y``"

#: ../../library/stdtypes.rst:441
msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr "*x* と *y* のビット単位 :dfn:`論理和`"

#: ../../library/stdtypes.rst:444
msgid "``x ^ y``"
msgstr "``x ^ y``"

#: ../../library/stdtypes.rst:444
msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr "*x* と *y* のビット単位 :dfn:`排他的論理和`"

#: ../../library/stdtypes.rst:447
msgid "``x & y``"
msgstr "``x & y``"

#: ../../library/stdtypes.rst:447
msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr "*x* と *y* のビット単位 :dfn:`論理積`"

#: ../../library/stdtypes.rst:450
msgid "``x << n``"
msgstr "``x << n``"

#: ../../library/stdtypes.rst:450
msgid "*x* shifted left by *n* bits"
msgstr "*x* の *n* ビット左シフト"

#: ../../library/stdtypes.rst:450
msgid "(1)(2)"
msgstr "(1)(2)"

#: ../../library/stdtypes.rst:452
msgid "``x >> n``"
msgstr "``x >> n``"

#: ../../library/stdtypes.rst:452
msgid "*x* shifted right by *n* bits"
msgstr "*x* の *n* ビット右シフト"

#: ../../library/stdtypes.rst:452
msgid "(1)(3)"
msgstr "(1)(3)"

#: ../../library/stdtypes.rst:454
msgid "``~x``"
msgstr "``~x``"

#: ../../library/stdtypes.rst:454
msgid "the bits of *x* inverted"
msgstr "*x* のビット反転"

#: ../../library/stdtypes.rst:460
msgid ""
"Negative shift counts are illegal and cause a :exc:`ValueError` to be "
"raised."
msgstr "負値のシフト数は不正であり、 :exc:`ValueError` が送出されます。"

#: ../../library/stdtypes.rst:463
msgid ""
"A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)``.  "
"A long integer is returned if the result exceeds the range of plain "
"integers."
msgstr ""

#: ../../library/stdtypes.rst:467
msgid "A right shift by *n* bits is equivalent to division by ``pow(2, n)``."
msgstr ""

#: ../../library/stdtypes.rst:471
msgid "Additional Methods on Integer Types"
msgstr "整数型における追加のメソッド"

#: ../../library/stdtypes.rst:473
msgid ""
"The integer types implement the :class:`numbers.Integral` :term:`abstract "
"base class`. In addition, they provide one more method:"
msgstr ""

#: ../../library/stdtypes.rst:479
msgid ""
"Return the number of bits necessary to represent an integer in binary, "
"excluding the sign and leading zeros::"
msgstr "整数を、符号と先頭の 0 は除いて二進法で表すために必要なビットの数を返します::"

#: ../../library/stdtypes.rst:488
msgid ""
"More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique "
"positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. "
"Equivalently, when ``abs(x)`` is small enough to have a correctly rounded "
"logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then "
"``x.bit_length()`` returns ``0``."
msgstr "正確には、 ``x`` が非 0 なら、 ``x.bit_length()`` は ``2**(k-1) <= abs(x) < 2**k`` を満たす唯一の正の整数 ``k`` です。同様に、 ``abs(x)`` が十分小さくて対数を適切に丸められるとき、 ``k = 1 + int(log(abs(x), 2))`` です。 ``x`` が 0 なら、 ``x.bit_length()`` は ``0`` を返します。"

#: ../../library/stdtypes.rst:494
msgid "Equivalent to::"
msgstr "次と等価です::"

#: ../../library/stdtypes.rst:505
msgid "Additional Methods on Float"
msgstr "浮動小数点数に対する追加のメソッド"

#: ../../library/stdtypes.rst:507
msgid ""
"The float type implements the :class:`numbers.Real` :term:`abstract base "
"class`. float also has the following additional methods."
msgstr "浮動小数点数型は、 :class:`numbers.Real` 抽象基底クラス (:term:`abstract base class`) を実装しています。浮動小数点型はまた、以下の追加のメソッドを持ちます。"

#: ../../library/stdtypes.rst:512
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original float"
" and with a positive denominator.  Raises :exc:`OverflowError` on infinities"
" and a :exc:`ValueError` on NaNs."
msgstr "比が元の浮動小数点数とちょうど同じで分母が正である、一対の整数を返します。無限大に対しては :exc:`OverflowError` を、非数 (NaN) に対しては :exc:`ValueError` を送出します。"

#: ../../library/stdtypes.rst:521
msgid ""
"Return ``True`` if the float instance is finite with integral value, and "
"``False`` otherwise::"
msgstr "浮動小数点数インスタンスが有限の整数値なら ``True`` を、そうでなければ ``False`` を返します::"

#: ../../library/stdtypes.rst:531
msgid ""
"Two methods support conversion to and from hexadecimal strings.  Since "
"Python's floats are stored internally as binary numbers, converting a float "
"to or from a *decimal* string usually involves a small rounding error.  In "
"contrast, hexadecimal strings allow exact representation and specification "
"of floating-point numbers.  This can be useful when debugging, and in "
"numerical work."
msgstr "16 進表記の文字列へ、または、 16 進表記からの変換をサポートする二つのメソッドがあります。 Python の浮動小数点数は内部的には2進数で保持されるので、浮動小数点数の *10進数* へまたは *10進数* から変換には若干の丸め誤差があります。それに対し、16 進表記では、浮動小数点数を正確に表現できます。これはデバッグのときや、数学的な用途 (numerical work) に便利でしょう。"

#: ../../library/stdtypes.rst:542
msgid ""
"Return a representation of a floating-point number as a hexadecimal string."
"  For finite floating-point numbers, this representation will always include"
" a leading ``0x`` and a trailing ``p`` and exponent."
msgstr "浮動小数点数の 16 進文字列表現を返します。有限の浮動小数点数に対し、この表現は常に ``0x`` で始まり ``p`` と指数が続きます。"

#: ../../library/stdtypes.rst:552
msgid ""
"Class method to return the float represented by a hexadecimal string *s*.  "
"The string *s* may have leading and trailing whitespace."
msgstr "16 進文字列表現 *s* で表される、浮動小数点数を返すクラスメソッドです。文字列 *s* は、前や後にホワイトスペースを含んでいても構いません。"

#: ../../library/stdtypes.rst:559
msgid ""
"Note that :meth:`float.hex` is an instance method, while "
":meth:`float.fromhex` is a class method."
msgstr ":meth:`float.fromhex` はクラスメソッドですが、 :meth:`float.hex` はインスタンスメソッドであることに注意して下さい。"

#: ../../library/stdtypes.rst:562
msgid "A hexadecimal string takes the form::"
msgstr "16 進文字列表現は以下の書式となります::"

#: ../../library/stdtypes.rst:566
msgid ""
"where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and "
"``fraction`` are strings of hexadecimal digits, and ``exponent`` is a "
"decimal integer with an optional leading sign.  Case is not significant, and"
" there must be at least one hexadecimal digit in either the integer or the "
"fraction.  This syntax is similar to the syntax specified in section 6.4.4.2"
" of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In "
"particular, the output of :meth:`float.hex` is usable as a hexadecimal "
"floating-point literal in C or Java code, and hexadecimal strings produced "
"by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted"
" by :meth:`float.fromhex`."
msgstr "``sign`` は必須ではなく、 ``+`` と ``-`` のどちらかです。 ``integer`` と ``fraction`` は 16 進数の文字列で、 ``exponent`` は 10 進数で符号もつけられます。大文字・小文字は区別されず、最低でも 1 つの 16 進数文字を整数部もしくは小数部に含む必要があります。この制限は C99 規格のセクション 6.4.4.2 で規定されていて、 Java 1.5 以降でも使われています。特に、 :meth:`float.hex` の出力は C や Java コード中で、浮動小数点数の 16 進表記として役に立つでしょう。また、 C の ``%a`` 書式や、 Java の ``Double.toHexString`` で書きだされた文字列は :meth:`float.fromhex` で受け付けられます。"

#: ../../library/stdtypes.rst:579
msgid ""
"Note that the exponent is written in decimal rather than hexadecimal, and "
"that it gives the power of 2 by which to multiply the coefficient. For "
"example, the hexadecimal string ``0x3.a7p10`` represents the floating-point "
"number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr "なお、指数部は 16 進数ではなく 10 進数で書かれ、係数に掛けられる 2 の累乗を与えます。例えば、16 進文字列 ``0x3.a7p10`` は浮動小数点数 ``(3 + 10./16 + 7./16**2) * 2.0**10`` すなわち ``3740.0`` を表します::"

#: ../../library/stdtypes.rst:589
msgid ""
"Applying the reverse conversion to ``3740.0`` gives a different hexadecimal "
"string representing the same number::"
msgstr "逆変換を ``3740.0`` に適用すると、同じ数を表す異なる 16 進文字列表現を返します::"

#: ../../library/stdtypes.rst:599
msgid "Iterator Types"
msgstr "イテレータ型"

#: ../../library/stdtypes.rst:609
msgid ""
"Python supports a concept of iteration over containers.  This is implemented"
" using two distinct methods; these are used to allow user-defined classes to"
" support iteration.  Sequences, described below in more detail, always "
"support the iteration methods."
msgstr "Python はコンテナでの反復処理の概念をサポートしています。この概念は 2 つの別々のメソッドを使って実装されています; これらのメソッドを使ってユーザ定義のクラスで反復を行えるようにできます。後に詳しく述べるシーケンスは、必ず反復処理メソッドをサポートしています。"

#: ../../library/stdtypes.rst:614
msgid ""
"One method needs to be defined for container objects to provide iteration "
"support:"
msgstr "コンテナオブジェクトに反復処理をサポートさせるためには、以下のメソッドを定義しなければなりません:"

#: ../../library/stdtypes.rst:621
msgid ""
"Return an iterator object.  The object is required to support the iterator "
"protocol described below.  If a container supports different types of "
"iteration, additional methods can be provided to specifically request "
"iterators for those iteration types.  (An example of an object supporting "
"multiple forms of iteration would be a tree structure which supports both "
"breadth-first and depth-first traversal.)  This method corresponds to the "
":c:member:`~PyTypeObject.tp_iter` slot of the type structure for Python "
"objects in the Python/C API."
msgstr "イテレータオブジェクトを返します。オブジェクトは後述するイテレータプロトコルをサポートする必要があります。もしコンテナが異なる型の反復処理をサポートするなら、それらの反復処理毎に追加のメソッドを提供しても構いません (複数の形式の反復処理を提供するオブジェクトの例として、幅優先探索と深さ優先探索をサポートする木構造が挙げられます)。このメソッドは Python/C API での Python オブジェクトの型構造体の :c:member:`~PyTypeObject.tp_iter` スロットに対応します。"

#: ../../library/stdtypes.rst:630
msgid ""
"The iterator objects themselves are required to support the following two "
"methods, which together form the :dfn:`iterator protocol`:"
msgstr "イテレータオブジェクト自体は以下の 2 のメソッドをサポートする必要があります。これらのメソッドは 2 つ合わせて :dfn:`イテレータプロトコル` を成します:"

#: ../../library/stdtypes.rst:636
msgid ""
"Return the iterator object itself.  This is required to allow both "
"containers and iterators to be used with the :keyword:`for` and "
":keyword:`in` statements. This method corresponds to the "
":c:member:`~PyTypeObject.tp_iter` slot of the type structure for Python "
"objects in the Python/C API."
msgstr "イテレータオブジェクト自体を返します。このメソッドはコンテナとイテ レータの両方を :keyword:`for` および :keyword:`in` 文で使えるように するために必要です。このメソッドは Python/C API において Python オ ブジェクトを表す型構造体の :c:member:`~PyTypeObject.tp_iter` スロットに対応します。"

#: ../../library/stdtypes.rst:644
msgid ""
"Return the next item from the container.  If there are no further items, "
"raise the :exc:`StopIteration` exception.  This method corresponds to the "
":c:member:`~PyTypeObject.tp_iternext` slot of the type structure for Python "
"objects in the Python/C API."
msgstr "コンテナの次のアイテムを返します。もしそれ以上アイテム無ければ :exc:`StopIteration` 例外を送出します。 このメソッドは Python/C APIでのPythonオブジェクトの型構造体の :c:member:`~PyTypeObject.tp_iternext` スロットに対応します。"

#: ../../library/stdtypes.rst:649
msgid ""
"Python defines several iterator objects to support iteration over general "
"and specific sequence types, dictionaries, and other more specialized forms."
"  The specific types are not important beyond their implementation of the "
"iterator protocol."
msgstr "Python では、いくつかのイテレータオブジェクトを定義しています。これらは一般のおよび特殊なシーケンス型、辞書型、そして他のさらに特殊化された形式に渡る反復をサポートします。特殊型は、イテレータプロトコルの実装以外は重要ではありません。"

#: ../../library/stdtypes.rst:654
msgid ""
"The intention of the protocol is that once an iterator's "
":meth:`~iterator.next` method raises :exc:`StopIteration`, it will continue "
"to do so on subsequent calls. Implementations that do not obey this property"
" are deemed broken.  (This constraint was added in Python 2.3; in Python "
"2.2, various iterators are broken according to this rule.)"
msgstr ""

#: ../../library/stdtypes.rst:664
msgid "Generator Types"
msgstr "ジェネレータ型"

#: ../../library/stdtypes.rst:666
msgid ""
"Python's :term:`generator`\\s provide a convenient way to implement the "
"iterator protocol.  If a container object's :meth:`__iter__` method is "
"implemented as a generator, it will automatically return an iterator object "
"(technically, a generator object) supplying the :meth:`~iterator.__iter__` "
"and :meth:`~iterator.next` methods.  More information about generators can "
"be found in :ref:`the documentation for the yield expression <yieldexpr>`."
msgstr ""

#: ../../library/stdtypes.rst:677
msgid ""
"Sequence Types --- :class:`str`, :class:`unicode`, :class:`list`, "
":class:`tuple`, :class:`bytearray`, :class:`buffer`, :class:`xrange`"
msgstr ""

#: ../../library/stdtypes.rst:679
msgid ""
"There are seven sequence types: strings, Unicode strings, lists, tuples, "
"bytearrays, buffers, and xrange objects."
msgstr ""

#: ../../library/stdtypes.rst:682
msgid ""
"For other containers see the built in :class:`dict` and :class:`set` "
"classes, and the :mod:`collections` module."
msgstr ""

#: ../../library/stdtypes.rst:696
msgid ""
"String literals are written in single or double quotes: ``'xyzzy'``, "
"``\"frobozz\"``.  See :ref:`strings` for more about string literals. Unicode"
" strings are much like strings, but are specified in the syntax using a "
"preceding ``'u'`` character: ``u'abc'``, ``u\"def\"``. In addition to the "
"functionality described here, there are also string-specific methods "
"described in the :ref:`string-methods` section. Lists are constructed with "
"square brackets, separating items with commas: ``[a, b, c]``. Tuples are "
"constructed by the comma operator (not within square brackets), with or "
"without enclosing parentheses, but an empty tuple must have the enclosing "
"parentheses, such as ``a, b, c`` or ``()``.  A single item tuple must have a"
" trailing comma, such as ``(d,)``."
msgstr ""

#: ../../library/stdtypes.rst:708
msgid ""
"Bytearray objects are created with the built-in function :func:`bytearray`."
msgstr ""

#: ../../library/stdtypes.rst:710
msgid ""
"Buffer objects are not directly supported by Python syntax, but can be "
"created by calling the built-in function :func:`buffer`.  They don't support"
" concatenation or repetition."
msgstr ""

#: ../../library/stdtypes.rst:714
msgid ""
"Objects of type xrange are similar to buffers in that there is no specific "
"syntax to create them, but they are created using the :func:`xrange` "
"function.  They don't support slicing, concatenation or repetition, and "
"using ``in``, ``not in``, :func:`min` or :func:`max` on them is inefficient."
msgstr ""

#: ../../library/stdtypes.rst:719
msgid ""
"Most sequence types support the following operations.  The ``in`` and ``not "
"in`` operations have the same priorities as the comparison operations.  The "
"``+`` and ``*`` operations have the same priority as the corresponding "
"numeric operations. [3]_ Additional methods are provided for :ref:`typesseq-"
"mutable`."
msgstr ""

#: ../../library/stdtypes.rst:724
msgid ""
"This table lists the sequence operations sorted in ascending priority. In "
"the table, *s* and *t* are sequences of the same type; *n*, *i* and *j* are "
"integers:"
msgstr ""

#: ../../library/stdtypes.rst:730
msgid "``x in s``"
msgstr "``x in s``"

#: ../../library/stdtypes.rst:730
msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr "*s* のある要素が *x* と等しければ ``True`` , そうでなければ ``False``"

#: ../../library/stdtypes.rst:733
msgid "``x not in s``"
msgstr "``x not in s``"

#: ../../library/stdtypes.rst:733
msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr "*s* のある要素が *x* と等しければ ``False``, そうでなければ ``True``"

#: ../../library/stdtypes.rst:736
msgid "``s + t``"
msgstr "``s + t``"

#: ../../library/stdtypes.rst:736
msgid "the concatenation of *s* and *t*"
msgstr "*s* と *t* の結合"

#: ../../library/stdtypes.rst:739
msgid "``s * n, n * s``"
msgstr ""

#: ../../library/stdtypes.rst:739
msgid "equivalent to adding *s* to itself *n* times"
msgstr ""

#: ../../library/stdtypes.rst:742
msgid "``s[i]``"
msgstr "``s[i]``"

#: ../../library/stdtypes.rst:742
msgid "*i*\\ th item of *s*, origin 0"
msgstr "*s* の 0 から数えて *i* 番目の要素"

#: ../../library/stdtypes.rst:744
msgid "``s[i:j]``"
msgstr "``s[i:j]``"

#: ../../library/stdtypes.rst:744
msgid "slice of *s* from *i* to *j*"
msgstr "*s* の *i* から *j* までのスライス"

#: ../../library/stdtypes.rst:746
msgid "``s[i:j:k]``"
msgstr "``s[i:j:k]``"

#: ../../library/stdtypes.rst:746
msgid "slice of *s* from *i* to *j* with step *k*"
msgstr "*s* の *i* から *j* まで、 *k* 毎のスライス"

#: ../../library/stdtypes.rst:746
msgid "(3)(5)"
msgstr "(3)(5)"

#: ../../library/stdtypes.rst:749
msgid "``len(s)``"
msgstr "``len(s)``"

#: ../../library/stdtypes.rst:749
msgid "length of *s*"
msgstr "*s* の長さ"

#: ../../library/stdtypes.rst:751
msgid "``min(s)``"
msgstr "``min(s)``"

#: ../../library/stdtypes.rst:751
msgid "smallest item of *s*"
msgstr "*s* の最小の要素"

#: ../../library/stdtypes.rst:753
msgid "``max(s)``"
msgstr "``max(s)``"

#: ../../library/stdtypes.rst:753
msgid "largest item of *s*"
msgstr "*s* の最大の要素"

#: ../../library/stdtypes.rst:755
msgid "``s.index(x)``"
msgstr ""

#: ../../library/stdtypes.rst:755
msgid "index of the first occurrence of *x* in *s*"
msgstr ""

#: ../../library/stdtypes.rst:758 ../../library/stdtypes.rst:1622
msgid "``s.count(x)``"
msgstr "``s.count(x)``"

#: ../../library/stdtypes.rst:758
msgid "total number of occurrences of *x* in *s*"
msgstr "*s* 中に *x* が出現する回数"

#: ../../library/stdtypes.rst:762
msgid ""
"Sequence types also support comparisons. In particular, tuples and lists are"
" compared lexicographically by comparing corresponding elements. This means "
"that to compare equal, every element must compare equal and the two "
"sequences must be of the same type and have the same length. (For full "
"details see :ref:`comparisons` in the language reference.)"
msgstr ""

#: ../../library/stdtypes.rst:785
msgid ""
"When *s* is a string or Unicode string object the ``in`` and ``not in`` "
"operations act like a substring test.  In Python versions before 2.3, *x* "
"had to be a string of length 1. In Python 2.3 and beyond, *x* may be a "
"string of any length."
msgstr ""

#: ../../library/stdtypes.rst:791
msgid ""
"Values of *n* less than ``0`` are treated as ``0`` (which yields an empty "
"sequence of the same type as *s*).  Note that items in the sequence *s* are "
"not copied; they are referenced multiple times.  This often haunts new "
"Python programmers; consider:"
msgstr ""

#: ../../library/stdtypes.rst:803
msgid ""
"What has happened is that ``[[]]`` is a one-element list containing an empty"
" list, so all three elements of ``[[]] * 3`` are references to this single "
"empty list.  Modifying any of the elements of ``lists`` modifies this single"
" list. You can create a list of different lists this way:"
msgstr ""

#: ../../library/stdtypes.rst:815
msgid ""
"Further explanation is available in the FAQ entry :ref:`faq-"
"multidimensional-list`."
msgstr ""

#: ../../library/stdtypes.rst:819
msgid ""
"If *i* or *j* is negative, the index is relative to the end of the string: "
"``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is "
"still ``0``."
msgstr "*i* または *j* が負の数の場合、インデクスは文字列の末端からの相対インデクスになります: ``len(s) + i``  または ``len(s) + j`` が代入されます。しかし ``-0`` は ``0`` のままなので注意してください。"

#: ../../library/stdtypes.rst:824
msgid ""
"The slice of *s* from *i* to *j* is defined as the sequence of items with "
"index *k* such that ``i <= k < j``.  If *i* or *j* is greater than "
"``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If "
"*j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal"
" to *j*, the slice is empty."
msgstr "*s* の *i* から *j* へのスライスは ``i <= k < j`` となるようなインデクス *k* を持つ要素からなるシーケンスとして定義されます。 *i* または *j* が ``len(s)`` よりも大きい場合、 ``len(s)`` を使います。 *i* が省略されるか ``None`` だった場合、 ``0`` を使います。 *j* が省略されるか ``None`` だった場合、 ``len(s)`` を使います。 *i* が *j* 以上の場合、スライスは空のシーケンスになります。"

#: ../../library/stdtypes.rst:831
msgid ""
"The slice of *s* from *i* to *j* with step *k* is defined as the sequence of"
" items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other"
" words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, "
"stopping when *j* is reached (but never including *j*).  If *i* or *j* is "
"greater than ``len(s)``, use ``len(s)``.  If *i* or *j* are omitted or "
"``None``, they become \"end\" values (which end depends on the sign of *k*)."
"  Note, *k* cannot be zero. If *k* is ``None``, it is treated like ``1``."
msgstr "*s* の *i* 番目から *j* 番目まで  *k* 毎のスライスは、 ``0 <= n < (j-i)/k`` となるような、インデクス ``x = i + n*k`` を持つ要素からなるシーケンスとして定義されます。言い換えるとインデクスは ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` などであり、 *j* に達したところ (しかし *j* は含みません)でストップします。 *i* または *j* が ``len(s)`` より大きい場合、 ``len(s)`` を使います。 *i* または *j* を省略するか ``None`` だった場合、 \"最後\" (*k* の符号に依存) を示す値を使います。 *k* はゼロにできないので注意してください。 *k* が ``None`` だった場合、 ``1`` として扱われます。"

#: ../../library/stdtypes.rst:842
msgid ""
"If *s* and *t* are both strings, some Python implementations such as CPython"
" can usually perform an in-place optimization for assignments of the form "
"``s = s + t`` or ``s += t``.  When applicable, this optimization makes "
"quadratic run-time much less likely.  This optimization is both version and "
"implementation dependent.  For performance sensitive code, it is preferable "
"to use the :meth:`str.join` method which assures consistent linear "
"concatenation performance across versions and implementations."
msgstr ""

#: ../../library/stdtypes.rst:850
msgid "Formerly, string concatenation never occurred in-place."
msgstr ""

#: ../../library/stdtypes.rst:857
msgid "String Methods"
msgstr "文字列メソッド"

#: ../../library/stdtypes.rst:861
msgid ""
"Below are listed the string methods which both 8-bit strings and Unicode "
"objects support.  Some of them are also available on :class:`bytearray` "
"objects."
msgstr ""

#: ../../library/stdtypes.rst:865
msgid ""
"In addition, Python's strings support the sequence type methods described in"
" the :ref:`typesseq` section. To output formatted strings use template "
"strings or the ``%`` operator described in the :ref:`string-formatting` "
"section. Also, see the :mod:`re` module for string functions based on "
"regular expressions."
msgstr ""

#: ../../library/stdtypes.rst:873
msgid ""
"Return a copy of the string with its first character capitalized and the "
"rest lowercased."
msgstr "最初の文字を大文字にし、残りを小文字にした文字列のコピーを返します。"

#: ../../library/stdtypes.rst:876 ../../library/stdtypes.rst:1013
#: ../../library/stdtypes.rst:1021 ../../library/stdtypes.rst:1029
#: ../../library/stdtypes.rst:1037 ../../library/stdtypes.rst:1045
#: ../../library/stdtypes.rst:1054 ../../library/stdtypes.rst:1062
#: ../../library/stdtypes.rst:1087 ../../library/stdtypes.rst:1260
#: ../../library/stdtypes.rst:1288 ../../library/stdtypes.rst:1325
msgid "For 8-bit strings, this method is locale-dependent."
msgstr ""

#: ../../library/stdtypes.rst:881
msgid ""
"Return centered in a string of length *width*. Padding is done using the "
"specified *fillchar* (default is a space)."
msgstr "*width* の長さをもつ中央寄せされた文字列を返します。パディングには *fillchar* で指定された値 (デフォルトではスペース) が使われます。"

#: ../../library/stdtypes.rst:884 ../../library/stdtypes.rst:1078
#: ../../library/stdtypes.rst:1142
msgid "Support for the *fillchar* argument."
msgstr ""

#: ../../library/stdtypes.rst:890
msgid ""
"Return the number of non-overlapping occurrences of substring *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr "[*start*, *end*] の範囲に、部分文字列 *sub* が重複せず出現する回数を返します。オプション引数 *start* および *end* はスライス表記と同じように解釈されます。"

#: ../../library/stdtypes.rst:897
msgid ""
"Decodes the string using the codec registered for *encoding*. *encoding* "
"defaults to the default string encoding.  *errors* may be given to set a "
"different error handling scheme.  The default is ``'strict'``, meaning that "
"encoding errors raise :exc:`UnicodeError`.  Other possible values are "
"``'ignore'``, ``'replace'`` and any other name registered via "
":func:`codecs.register_error`, see section :ref:`codec-base-classes`."
msgstr ""

#: ../../library/stdtypes.rst:906
msgid "Support for other error handling schemes added."
msgstr ""

#: ../../library/stdtypes.rst:909 ../../library/stdtypes.rst:929
msgid "Support for keyword arguments added."
msgstr "キーワード引数のサポートが追加されました。"

#: ../../library/stdtypes.rst:914
msgid ""
"Return an encoded version of the string.  Default encoding is the current "
"default string encoding.  *errors* may be given to set a different error "
"handling scheme.  The default for *errors* is ``'strict'``, meaning that "
"encoding errors raise a :exc:`UnicodeError`.  Other possible values are "
"``'ignore'``, ``'replace'``, ``'xmlcharrefreplace'``, ``'backslashreplace'``"
" and any other name registered via :func:`codecs.register_error`, see "
"section :ref:`codec-base-classes`. For a list of possible encodings, see "
"section :ref:`standard-encodings`."
msgstr ""

#: ../../library/stdtypes.rst:925
msgid ""
"Support for ``'xmlcharrefreplace'`` and ``'backslashreplace'`` and other "
"error handling schemes added."
msgstr ""

#: ../../library/stdtypes.rst:934
msgid ""
"Return ``True`` if the string ends with the specified *suffix*, otherwise "
"return ``False``.  *suffix* can also be a tuple of suffixes to look for.  "
"With optional *start*, test beginning at that position.  With optional "
"*end*, stop comparing at that position."
msgstr "文字列が指定された *suffix* で終わるなら ``True`` を、そうでなければ ``False`` を返します。 *suffix* は見つけたい複数の接尾語のタプルでも構いません。オプションの *start* があれば、その位置から判定を始めます。オプションの *end* があれば、その位置で比較を止めます。"

#: ../../library/stdtypes.rst:939
msgid "Accept tuples as *suffix*."
msgstr ""

#: ../../library/stdtypes.rst:945
msgid ""
"Return a copy of the string where all tab characters are replaced by one or "
"more spaces, depending on the current column and the given tab size.  Tab "
"positions occur every *tabsize* characters (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the string, the current"
" column is set to zero and the string is examined character by character.  "
"If the character is a tab (``\\t``), one or more space characters are "
"inserted in the result until the current column is equal to the next tab "
"position. (The tab character itself is not copied.)  If the character is a "
"newline (``\\n``) or return (``\\r``), it is copied and the current column "
"is reset to zero.  Any other character is copied unchanged and the current "
"column is incremented by one regardless of how the character is represented "
"when printed."
msgstr "文字列内の全てのタブ文字が 1 つ以上のスペースで置換された、文字列のコピーを返します。スペースの数は現在の桁 (column) 位置と *tabsize* に依存します。タブ位置は *tabsize* 文字毎に存在します (デフォルト値である 8 の場合、タブ位置は 0, 8, 16 などになります)。文字列を展開するため、まず現桁位置がゼロにセットされ、文字列が 1 文字ずつ調べられます。文字がタブ文字 (``\\t``) であれば、現桁位置が次のタブ位置と一致するまで、1 つ以上のスペースが結果の文字列に挿入されます。(タブ文字自体はコピーされません。) 文字が改行文字 (``\\n`` もしくは ``\\r``) の場合、文字がコピーされ、現桁位置は 0 にリセットされます。その他の文字は変更されずにコピーされ、現桁位置は、その文字の表示のされ方 (訳注: 全角、半角など) に関係なく、1 ずつ増加します。"

#: ../../library/stdtypes.rst:966
msgid ""
"Return the lowest index in the string where substring *sub* is found, such "
"that *sub* is contained in the slice ``s[start:end]``.  Optional arguments "
"*start* and *end* are interpreted as in slice notation.  Return ``-1`` if "
"*sub* is not found."
msgstr "文字列のスライス ``s[start:end]`` に *sub* が含まれる場合、その最小のインデクスを返します。オプション引数 *start* および *end* はスライス表記と同様に解釈されます。 *sub* が見つからなかった場合 ``-1`` を返します。"

#: ../../library/stdtypes.rst:973
msgid ""
"The :meth:`~str.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the "
":keyword:`in` operator::"
msgstr ":meth:`~str.find` メソッドは、 *sub* の位置を知りたいときにのみ使うべきです。 *sub* が部分文字列であるかどうかのみを調べるには、 :keyword:`in` 演算子を使ってください::"

#: ../../library/stdtypes.rst:983
msgid ""
"Perform a string formatting operation.  The string on which this method is "
"called can contain literal text or replacement fields delimited by braces "
"``{}``.  Each replacement field contains either the numeric index of a "
"positional argument, or the name of a keyword argument.  Returns a copy of "
"the string where each replacement field is replaced with the string value of"
" the corresponding argument."
msgstr "文字列の書式化操作を行います。このメソッドを呼び出す文字列は通常の文字、または、 ``{}`` で区切られた置換フィールドを含みます。それぞれの置換フィールドは位置引数のインデックスナンバー、または、キーワード引数の名前を含みます。返り値は、それぞれの置換フィールドが対応する引数の文字列値で置換された文字列のコピーです。"

#: ../../library/stdtypes.rst:993
msgid ""
"See :ref:`formatstrings` for a description of the various formatting options"
" that can be specified in format strings."
msgstr "書式指定のオプションについては、書式指定文字列を規定する :ref:`formatstrings` を参照下さい。"

#: ../../library/stdtypes.rst:996
msgid ""
"This method of string formatting is the new standard in Python 3, and should"
" be preferred to the ``%`` formatting described in :ref:`string-formatting` "
"in new code."
msgstr ""

#: ../../library/stdtypes.rst:1005
msgid ""
"Like :meth:`find`, but raise :exc:`ValueError` when the substring is not "
"found."
msgstr ":meth:`find` と同様ですが、部分文字列が見つからなかったとき :exc:`ValueError` を送出します。"

#: ../../library/stdtypes.rst:1010
msgid ""
"Return true if all characters in the string are alphanumeric and there is at"
" least one character, false otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1018
msgid ""
"Return true if all characters in the string are alphabetic and there is at "
"least one character, false otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1026
msgid ""
"Return true if all characters in the string are digits and there is at least"
" one character, false otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1034
msgid ""
"Return true if all cased characters [4]_ in the string are lowercase and "
"there is at least one cased character, false otherwise."
msgstr "文字列中の大小文字の区別のある文字 [4]_ 全てが小文字で、かつ大小文字の区別のある文字が 1 文字以上あるなら真を、そうでなければ偽を返します。"

#: ../../library/stdtypes.rst:1042
msgid ""
"Return true if there are only whitespace characters in the string and there "
"is at least one character, false otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1050
msgid ""
"Return true if the string is a titlecased string and there is at least one "
"character, for example uppercase characters may only follow uncased "
"characters and lowercase characters only cased ones.  Return false "
"otherwise."
msgstr "文字列がタイトルケース文字列であり、かつ 1 文字以上ある場合、例えば大文字は大小文字の区別のない文字の後にのみ続き、小文字は大小文字の区別のある文字の後ろにのみ続く場合には真を返します。そうでない場合は偽を返します。"

#: ../../library/stdtypes.rst:1059
msgid ""
"Return true if all cased characters [4]_ in the string are uppercase and "
"there is at least one cased character, false otherwise."
msgstr "文字列中の大小文字の区別のある文字 [4]_ 全てが大文字で、かつ大小文字の区別のある文字が 1 文字以上あるなら真を、そうでなければ偽を返します。"

#: ../../library/stdtypes.rst:1067
msgid ""
"Return a string which is the concatenation of the strings in the "
":term:`iterable` *iterable*.  The separator between elements is the string "
"providing this method."
msgstr ""

#: ../../library/stdtypes.rst:1074
msgid ""
"Return the string left justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is a space).  The original "
"string is returned if *width* is less than or equal to ``len(s)``."
msgstr "長さ *width* の左揃えした文字列を返します。パディングは指定された *fillchar* (デフォルトではスペース) を使って行われます。 *width* が ``len(s)`` 以下ならば、元の文字列が返されます。"

#: ../../library/stdtypes.rst:1084
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"lowercase."
msgstr "全ての大小文字の区別のある文字 [4]_ が小文字に変換された、文字列のコピーを返します。"

#: ../../library/stdtypes.rst:1092
msgid ""
"Return a copy of the string with leading characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a prefix; rather, all combinations of its values"
" are stripped:"
msgstr "文字列の先頭の文字を除去したコピーを返します。引数 *chars* は除去される文字の集合を指定する文字列です。 *chars* が省略されるか ``None`` の場合、空白文字が除去されます。 *chars* 文字列は接頭辞ではなく、その値に含まれる文字の組み合わせ全てがはぎ取られます。 :"

#: ../../library/stdtypes.rst:1102 ../../library/stdtypes.rst:1179
#: ../../library/stdtypes.rst:1251
msgid "Support for the *chars* argument."
msgstr ""

#: ../../library/stdtypes.rst:1108
msgid ""
"Split the string at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part"
" after the separator.  If the separator is not found, return a 3-tuple "
"containing the string itself, followed by two empty strings."
msgstr "文字列を *sep* の最初の出現位置で区切り、 3 要素のタプルを返します。タプルの内容は、区切りの前の部分、区切り文字列そのもの、そして区切りの後ろの部分です。もし区切れなければ、タプルには元の文字列そのものとその後ろに二つの空文字列が入ります。"

#: ../../library/stdtypes.rst:1118
msgid ""
"Return a copy of the string with all occurrences of substring *old* replaced"
" by *new*.  If the optional argument *count* is given, only the first "
"*count* occurrences are replaced."
msgstr "文字列をコピーし、現れる部分文字列 *old* 全てを *new* に置換して返します。オプション引数 *count* が与えられている場合、先頭から *count* 個の *old* だけを置換します。"

#: ../../library/stdtypes.rst:1125
msgid ""
"Return the highest index in the string where substring *sub* is found, such "
"that *sub* is contained within ``s[start:end]``.  Optional arguments *start*"
" and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr "文字列中の領域 ``s[start:end]`` に *sub* が含まれる場合、その最大のインデクスを返します。オプション引数 *start* および *end* はスライス表記と同様に解釈されます。 *sub* が見つからなかった場合 ``-1``  を返します。"

#: ../../library/stdtypes.rst:1132
msgid ""
"Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is "
"not found."
msgstr ":meth:`rfind` と同様ですが、 *sub* が見つからなかった場合 :exc:`ValueError` を送出します。"

#: ../../library/stdtypes.rst:1138
msgid ""
"Return the string right justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is a space). The original "
"string is returned if *width* is less than or equal to ``len(s)``."
msgstr "*width* の長さをもつ右寄せした文字列を返します。パディングには *fillchar* で指定された文字(デフォルトではスペース)が使われます。 *width* が ``len(s)`` 以下の場合、元の文字列が返されます。"

#: ../../library/stdtypes.rst:1148
msgid ""
"Split the string at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part"
" after the separator.  If the separator is not found, return a 3-tuple "
"containing two empty strings, followed by the string itself."
msgstr "文字列を *sep* の最後の出現位置で区切り、 3 要素のタプルを返します。タプルの内容は、区切りの前の部分、区切り文字列そのもの、そして区切りの後ろの部分です。もし区切れなければ、タプルには二つの空文字列とその後ろに元の文字列そのものが入ります。"

#: ../../library/stdtypes.rst:1158
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string. If *maxsplit* is given, at most *maxsplit* splits are done, the "
"*rightmost* ones.  If *sep* is not specified or ``None``, any whitespace "
"string is a separator.  Except for splitting from the right, :meth:`rsplit` "
"behaves like :meth:`split` which is described in detail below."
msgstr "*sep* を区切り文字とした、文字列中の単語のリストを返します。 *maxsplit* が与えられた場合、文字列の *右端* から最大 *maxsplit* 回分割を行います。*sep* が指定されていない、あるいは ``None`` のとき、全ての空白文字が区切り文字となります。右から分割していくことを除けば、 :meth:`rsplit` は後ほど詳しく述べる :meth:`split` と同様に振る舞います。"

#: ../../library/stdtypes.rst:1169
msgid ""
"Return a copy of the string with trailing characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a suffix; rather, all combinations of its values"
" are stripped:"
msgstr "文字列の末尾部分を除去したコピーを返します。引数 *chars* は除去される文字集合を指定する文字列です。 *chars* が省略されるか ``None`` の場合、空白文字が除去されます。 *chars* 文字列は接尾語ではなく、そこに含まれる文字の組み合わせ全てがはぎ取られます:"

#: ../../library/stdtypes.rst:1185
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, "
"the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not "
"specified or ``-1``, then there is no limit on the number of splits (all "
"possible splits are made)."
msgstr "文字列を *sep* をデリミタ文字列として区切った単語のリストを返します。*maxsplit* が与えられていれば、最大で *maxsplit* 回分割されます (つまり、リストは最大 ``maxsplit+1`` 要素になります)。 *maxsplit* が与えられないか ``-1`` なら、分割の回数に制限はありません (可能なだけ分割されます)。"

#: ../../library/stdtypes.rst:1191
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns "
"``['1', '', '2']``).  The *sep* argument may consist of multiple characters "
"(for example, ``'1<>2<>3'.split('<>')`` returns ``['1', '2', '3']``). "
"Splitting an empty string with a specified separator returns ``['']``."
msgstr "*sep* が与えられた場合、連続した区切り文字はまとめられず、空の文字列を区切っていると判断されます(例えば ``'1,,2'.split(',')`` は ``['1', '', '2']`` を返します)。引数 *sep* は複数の文字にもできます (例えば ``'1<>2<>3'.split('<>')`` は ``['1', '2', '3']`` を返します)。区切り文字を指定して空の文字列を分割すると、 ``['']`` を返します。"

#: ../../library/stdtypes.rst:1197
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is"
" applied: runs of consecutive whitespace are regarded as a single separator,"
" and the result will contain no empty strings at the start or end if the "
"string has leading or trailing whitespace.  Consequently, splitting an empty"
" string or a string consisting of just whitespace with a ``None`` separator "
"returns ``[]``."
msgstr "*sep* が指定されていないか ``None`` であれば、異なる分割アルゴリズムが適用されます。 : 連続する空白文字はひとつのデリミタとみなされます。また、文字列の先頭や末尾に空白があっても、結果の最初や最後に空文字列は含まれません。よって、空文字列や空白だけの文字列を ``None`` デリミタで分割すると ``[]`` が返されます。"

#: ../../library/stdtypes.rst:1204
msgid ""
"For example, ``' 1  2   3  '.split()`` returns ``['1', '2', '3']``, and ``'"
"  1  2   3  '.split(None, 1)`` returns ``['1', '2   3  ']``."
msgstr "例えば、 ``' 1  2   3  '.split()`` は ``['1', '2', '3']`` を返し、 ``'  1  2   3  '.split(None, 1)`` は ``['1', '2   3  ']`` を返します。"

#: ../../library/stdtypes.rst:1213
msgid ""
"Return a list of the lines in the string, breaking at line boundaries. This "
"method uses the :term:`universal newlines` approach to splitting lines. Line"
" breaks are not included in the resulting list unless *keepends* is given "
"and true."
msgstr "文字列を改行部分で分解し、各行からなるリストを返します。 このメソッドは、行の分割に :term:`universal newlines` アプローチを使います。*keepends* に真が与えらない限り、返されるリストに改行は含まれません。"

#: ../../library/stdtypes.rst:1218
msgid ""
"For example, ``'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()`` returns ``['ab "
"c', '', 'de fg', 'kl']``, while the same call with ``splitlines(True)`` "
"returns ``['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']``."
msgstr "例えば、``'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()`` は ``['ab c', '', 'de fg', 'kl']`` を返し、``splitlines(True)`` で同じ呼び出しをすると ``['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']`` を返します。"

#: ../../library/stdtypes.rst:1222
msgid ""
"Unlike :meth:`~str.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break"
" does not result in an extra line."
msgstr ":meth:`~str.split` とは違って、デリミタ文字列 *sep* が与えられたとき、このメソッドは空文字列に空リストを返し、終末の改行は結果に行を追加しません。"

#: ../../library/stdtypes.rst:1229
msgid ""
"Return ``True`` if string starts with the *prefix*, otherwise return "
"``False``. *prefix* can also be a tuple of prefixes to look for.  With "
"optional *start*, test string beginning at that position.  With optional "
"*end*, stop comparing string at that position."
msgstr "文字列が指定された *prefix* で始まるなら ``True`` を、そうでなければ ``False`` を返します。 *prefix* は見つけたい複数の接頭語のタプルでも構いません。オプションの *start* があれば、その位置から判定を始めます。オプションの *end* があれば、その位置で比較を止めます。"

#: ../../library/stdtypes.rst:1234
msgid "Accept tuples as *prefix*."
msgstr ""

#: ../../library/stdtypes.rst:1240
msgid ""
"Return a copy of the string with the leading and trailing characters "
"removed. The *chars* argument is a string specifying the set of characters "
"to be removed. If omitted or ``None``, the *chars* argument defaults to "
"removing whitespace. The *chars* argument is not a prefix or suffix; rather,"
" all combinations of its values are stripped:"
msgstr "文字列の先頭および末尾部分を除去したコピーを返します。引数 *chars* は除去される文字集合を指定する文字列です。 *chars* が省略されるか ``None`` の場合、空白文字が除去されます。 *chars* 文字列は接頭語でも接尾語でもなく、そこに含まれる文字の組み合わせ全てがはぎ取られます。 :"

#: ../../library/stdtypes.rst:1257
msgid ""
"Return a copy of the string with uppercase characters converted to lowercase"
" and vice versa."
msgstr ""

#: ../../library/stdtypes.rst:1265
msgid ""
"Return a titlecased version of the string where words start with an "
"uppercase character and the remaining characters are lowercase."
msgstr "文字列を、単語ごとに大文字から始まり、残りの文字のうち大小文字の区別があるものは全て小文字にする、タイトルケースにして返します。"

#: ../../library/stdtypes.rst:1268
msgid ""
"The algorithm uses a simple language-independent definition of a word as "
"groups of consecutive letters.  The definition works in many contexts but it"
" means that apostrophes in contractions and possessives form word "
"boundaries, which may not be the desired result::"
msgstr "このアルゴリズムは、連続した文字の集まりという、言語から独立した単純な単語の定義を使います。この定義は多くの状況ではうまく機能しますが、短縮形や所有格のアポストロフィが単語の境界になってしまい、望みの結果を得られない場合があります::"

#: ../../library/stdtypes.rst:1276
msgid ""
"A workaround for apostrophes can be constructed using regular expressions::"
msgstr "正規表現を使うことでアポストロフィに対応できます::"

#: ../../library/stdtypes.rst:1293
msgid ""
"Return a copy of the string where all characters occurring in the optional "
"argument *deletechars* are removed, and the remaining characters have been "
"mapped through the given translation table, which must be a string of length"
" 256."
msgstr ""

#: ../../library/stdtypes.rst:1298
msgid ""
"You can use the :func:`~string.maketrans` helper function in the "
":mod:`string` module to create a translation table. For string objects, set "
"the *table* argument to ``None`` for translations that only delete "
"characters:"
msgstr ""

#: ../../library/stdtypes.rst:1305
msgid "Support for a ``None`` *table* argument."
msgstr ""

#: ../../library/stdtypes.rst:1308
msgid ""
"For Unicode objects, the :meth:`translate` method does not accept the "
"optional *deletechars* argument.  Instead, it returns a copy of the *s* "
"where all characters have been mapped through the given translation table "
"which must be a mapping of Unicode ordinals to Unicode ordinals, Unicode "
"strings or ``None``. Unmapped characters are left untouched. Characters "
"mapped to ``None`` are deleted.  Note, a more flexible approach is to create"
" a custom character mapping codec using the :mod:`codecs` module (see "
":mod:`encodings.cp1251` for an example)."
msgstr ""

#: ../../library/stdtypes.rst:1320
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"uppercase.  Note that ``str.upper().isupper()`` might be ``False`` if ``s`` "
"contains uncased characters or if the Unicode category of the resulting "
"character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, "
"titlecase)."
msgstr "全ての大小文字の区別のある文字 [4]_ が大文字に変換された、文字列のコピーを返します。なお ``str.upper().isupper()`` は、 ``s`` が大小文字の区別のある文字を含まなかったり、結果の文字の Unicode カテゴリが \"Lu\" ではなく例えば \"Lt\" (Letter, titlecase) などであったら、 ``False`` になりえます。"

#: ../../library/stdtypes.rst:1330
msgid ""
"Return the numeric string left filled with zeros in a string of length "
"*width*.  A sign prefix is handled correctly.  The original string is "
"returned if *width* is less than or equal to ``len(s)``."
msgstr "数値文字列の左側をゼロ詰めし、幅 *width* の文字列で返します。符号接頭辞も正しく扱われます。 *width* が ``len(s)`` 以下の場合もとの文字列自体が返されます。"

#: ../../library/stdtypes.rst:1337
msgid "The following methods are present only on unicode objects:"
msgstr ""

#: ../../library/stdtypes.rst:1341
msgid ""
"Return ``True`` if there are only numeric characters in S, ``False`` "
"otherwise. Numeric characters include digit characters, and all characters "
"that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION "
"ONE FIFTH."
msgstr ""

#: ../../library/stdtypes.rst:1348
msgid ""
"Return ``True`` if there are only decimal characters in S, ``False`` "
"otherwise. Decimal characters include digit characters, and all characters "
"that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC "
"DIGIT ZERO."
msgstr ""

#: ../../library/stdtypes.rst:1357
msgid "String Formatting Operations"
msgstr ""

#: ../../library/stdtypes.rst:1369
msgid ""
"String and Unicode objects have one unique built-in operation: the ``%`` "
"operator (modulo).  This is also known as the string *formatting* or "
"*interpolation* operator.  Given ``format % values`` (where *format* is a "
"string or Unicode object), ``%`` conversion specifications in *format* are "
"replaced with zero or more elements of *values*.  The effect is similar to "
"the using :c:func:`sprintf` in the C language.  If *format* is a Unicode "
"object, or if any of the objects being converted using the ``%s`` conversion"
" are Unicode objects, the result will also be a Unicode object."
msgstr ""

#: ../../library/stdtypes.rst:1378
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of"
" items specified by the format string, or a single mapping object (for "
"example, a dictionary)."
msgstr "*format* が単一の引数しか要求しない場合、 *values* はタプルでない単一のオブジェクトでもかまいません。 [5]_ それ以外の場合、 *values* はフォーマット文字列中で指定された項目と正確に同じ数の要素からなるタプルか、単一のマップオブジェクトでなければなりません。"

#: ../../library/stdtypes.rst:1383
msgid ""
"A conversion specifier contains two or more characters and has the following"
" components, which must occur in this order:"
msgstr "一つの変換指定子は 2 またはそれ以上の文字を含み、その構成要素は以下からなりますが、示した順に出現しなければなりません:"

#: ../../library/stdtypes.rst:1386
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr "指定子の開始を示す文字 ``'%'`` 。"

#: ../../library/stdtypes.rst:1388
msgid ""
"Mapping key (optional), consisting of a parenthesised sequence of characters"
" (for example, ``(somename)``)."
msgstr "マップキー (オプション)。丸括弧で囲った文字列からなります (例えば ``(somename)``) 。"

#: ../../library/stdtypes.rst:1391
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr "変換フラグ (オプション)。一部の変換型の結果に影響します。"

#: ../../library/stdtypes.rst:1394
msgid ""
"Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the "
"actual width is read from the next element of the tuple in *values*, and the"
" object to convert comes after the minimum field width and optional "
"precision."
msgstr "最小のフィールド幅 (オプション)。 ``'*'`` (アスタリスク) を指定した場合、実際の文字列幅が *values* タプルの次の要素から読み出されます。タプルには最小フィールド幅やオプションの精度指定の後に変換したいオブジェクトがくるようにします。"

#: ../../library/stdtypes.rst:1398
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision.  "
"If specified as ``'*'`` (an asterisk), the actual width is read from the "
"next element of the tuple in *values*, and the value to convert comes after "
"the precision."
msgstr ""

#: ../../library/stdtypes.rst:1403
msgid "Length modifier (optional)."
msgstr "精度長変換子 (オプション)。"

#: ../../library/stdtypes.rst:1405
msgid "Conversion type."
msgstr "変換型。"

#: ../../library/stdtypes.rst:1407
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the string *must* include a parenthesised mapping key into that "
"dictionary inserted immediately after the ``'%'`` character. The mapping key"
" selects the value to be formatted from the mapping.  For example:"
msgstr "``%`` 演算子の右側の引数が辞書の場合 (またはその他のマップ型の場合), 文字列中のフォーマットには、辞書に挿入されているキーを丸括弧で囲い、文字 ``'%'`` の直後にくるようにしたものが含まれていなければ *なりません* 。マップキーはフォーマット化したい値をマップから選び出します。例えば:"

#: ../../library/stdtypes.rst:1416
msgid ""
"In this case no ``*`` specifiers may occur in a format (since they require a"
" sequential parameter list)."
msgstr "この場合、 ``*`` 指定子をフォーマットに含めてはいけません (``*`` 指定子は順番付けされたパラメタのリストが必要だからです)。"

#: ../../library/stdtypes.rst:1419
msgid "The conversion flag characters are:"
msgstr "変換フラグ文字を以下に示します:"

#: ../../library/stdtypes.rst:1422
msgid "Flag"
msgstr "フラグ"

#: ../../library/stdtypes.rst:1424
msgid "``'#'``"
msgstr "``'#'``"

#: ../../library/stdtypes.rst:1424
msgid ""
"The value conversion will use the \"alternate form\" (where defined below)."
msgstr "値の変換に (下で定義されている) \"別の形式\" を使います。"

#: ../../library/stdtypes.rst:1427
msgid "``'0'``"
msgstr "``'0'``"

#: ../../library/stdtypes.rst:1427
msgid "The conversion will be zero padded for numeric values."
msgstr "数値型に対してゼロによるパディングを行います。"

#: ../../library/stdtypes.rst:1429
msgid "``'-'``"
msgstr "``'-'``"

#: ../../library/stdtypes.rst:1429
msgid ""
"The converted value is left adjusted (overrides the ``'0'`` conversion if "
"both are given)."
msgstr "変換された値を左寄せにします (``'0'`` と同時に与えた場合、 ``'0'`` を上書きします) 。"

#: ../../library/stdtypes.rst:1432
msgid "``' '``"
msgstr "``' '``"

#: ../../library/stdtypes.rst:1432
msgid ""
"(a space) A blank should be left before a positive number (or empty string) "
"produced by a signed conversion."
msgstr "(スペース) 符号付きの変換で正の数の場合、前に一つスペースを空けます (そうでない場合は空文字になります) 。"

#: ../../library/stdtypes.rst:1435
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/stdtypes.rst:1435
msgid ""
"A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides"
" a \"space\" flag)."
msgstr "変換の先頭に符号文字 (``'+'`` または ``'-'``) を付けます(\"スペース\" フラグを上書きします) 。"

#: ../../library/stdtypes.rst:1439
msgid ""
"A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as"
" it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr "精度長変換子(``h``, ``l``,または ``L``) を使うことができますが、 Python では必要ないため無視されます。 -- つまり、例えば ``%ld`` は ``%d`` と等価です。"

#: ../../library/stdtypes.rst:1442
msgid "The conversion types are:"
msgstr "変換型を以下に示します:"

#: ../../library/stdtypes.rst:1445
msgid "Conversion"
msgstr "変換"

#: ../../library/stdtypes.rst:1447
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/stdtypes.rst:1447 ../../library/stdtypes.rst:1449
msgid "Signed integer decimal."
msgstr "符号付き 10 進整数。"

#: ../../library/stdtypes.rst:1449
msgid "``'i'``"
msgstr "``'i'``"

#: ../../library/stdtypes.rst:1451
msgid "``'o'``"
msgstr "``'o'``"

#: ../../library/stdtypes.rst:1451
msgid "Signed octal value."
msgstr "符号付き 8 進数。"

#: ../../library/stdtypes.rst:1453
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/stdtypes.rst:1453
msgid "Obsolete type -- it is identical to ``'d'``."
msgstr "旧式の型 -- ``'d'`` と同じです。"

#: ../../library/stdtypes.rst:1455
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/stdtypes.rst:1455
msgid "Signed hexadecimal (lowercase)."
msgstr "符号付き 16 進数 (小文字)。"

#: ../../library/stdtypes.rst:1457
msgid "``'X'``"
msgstr "``'X'``"

#: ../../library/stdtypes.rst:1457
msgid "Signed hexadecimal (uppercase)."
msgstr "符号付き 16 進数 (大文字)。"

#: ../../library/stdtypes.rst:1459
msgid "``'e'``"
msgstr "``'e'``"

#: ../../library/stdtypes.rst:1459
msgid "Floating point exponential format (lowercase)."
msgstr "指数表記の浮動小数点数 (小文字)。"

#: ../../library/stdtypes.rst:1461
msgid "``'E'``"
msgstr "``'E'``"

#: ../../library/stdtypes.rst:1461
msgid "Floating point exponential format (uppercase)."
msgstr "指数表記の浮動小数点数 (大文字)。"

#: ../../library/stdtypes.rst:1463
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/stdtypes.rst:1463 ../../library/stdtypes.rst:1465
msgid "Floating point decimal format."
msgstr "10 進浮動小数点数。"

#: ../../library/stdtypes.rst:1465
msgid "``'F'``"
msgstr "``'F'``"

#: ../../library/stdtypes.rst:1467
msgid "``'g'``"
msgstr "``'g'``"

#: ../../library/stdtypes.rst:1467
msgid ""
"Floating point format. Uses lowercase exponential format if exponent is less"
" than -4 or not less than precision, decimal format otherwise."
msgstr "浮動小数点数。指数部が -4 以上または精度以下の場合には小文字指数表記、それ以外の場合には10進表記。"

#: ../../library/stdtypes.rst:1471
msgid "``'G'``"
msgstr "``'G'``"

#: ../../library/stdtypes.rst:1471
msgid ""
"Floating point format. Uses uppercase exponential format if exponent is less"
" than -4 or not less than precision, decimal format otherwise."
msgstr "浮動小数点数。指数部が -4 以上または精度以下の場合には大文字指数表記、それ以外の場合には10進表記。"

#: ../../library/stdtypes.rst:1475
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/stdtypes.rst:1475
msgid "Single character (accepts integer or single character string)."
msgstr "文字一文字 (整数または一文字からなる文字列を受理します)。"

#: ../../library/stdtypes.rst:1478
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/stdtypes.rst:1478
msgid "String (converts any Python object using :ref:`repr() <func-repr>`)."
msgstr ""

#: ../../library/stdtypes.rst:1478 ../../library/stdtypes.rst:1629
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/stdtypes.rst:1481
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/stdtypes.rst:1481
msgid "String (converts any Python object using :func:`str`)."
msgstr "文字列 (Python オブジェクトを :func:`str` で変換します)。"

#: ../../library/stdtypes.rst:1484
msgid "``'%'``"
msgstr "``'%'``"

#: ../../library/stdtypes.rst:1484
msgid ""
"No argument is converted, results in a ``'%'`` character in the result."
msgstr "引数を変換せず、返される文字列中では文字 ``'%'`` になります。"

#: ../../library/stdtypes.rst:1491
msgid ""
"The alternate form causes a leading zero (``'0'``) to be inserted between "
"left-hand padding and the formatting of the number if the leading character "
"of the result is not already a zero."
msgstr "この形式の出力にした場合、変換結果の先頭の数字がゼロ (``'0'``) でないときには、数字の先頭と左側のパディングとの間にゼロを挿入します。"

#: ../../library/stdtypes.rst:1496
msgid ""
"The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on "
"whether the ``'x'`` or ``'X'`` format was used) to be inserted between left-"
"hand padding and the formatting of the number if the leading character of "
"the result is not already a zero."
msgstr "この形式にした場合、変換結果の先頭の数字がゼロでないときには、数字の先頭と左側のパディングとの間に ``'0x'`` または ``'0X'`` (フォーマット文字が ``'x'`` か ``'X'`` かに依存します) が挿入されます。"

#: ../../library/stdtypes.rst:1502
msgid ""
"The alternate form causes the result to always contain a decimal point, even"
" if no digits follow it."
msgstr "この形式にした場合、変換結果には常に小数点が含まれ、それはその後ろに数字が続かない場合にも適用されます。"

#: ../../library/stdtypes.rst:1505
msgid ""
"The precision determines the number of digits after the decimal point and "
"defaults to 6."
msgstr "指定精度は小数点の後の桁数を決定し、そのデフォルトは 6 です。"

#: ../../library/stdtypes.rst:1509
msgid ""
"The alternate form causes the result to always contain a decimal point, and "
"trailing zeroes are not removed as they would otherwise be."
msgstr "この形式にした場合、変換結果には常に小数点が含まれ他の形式とは違って末尾の 0 は取り除かれません。"

#: ../../library/stdtypes.rst:1512
msgid ""
"The precision determines the number of significant digits before and after "
"the decimal point and defaults to 6."
msgstr "指定精度は小数点の前後の有効桁数を決定し、そのデフォルトは 6 です。"

#: ../../library/stdtypes.rst:1516
msgid "The ``%r`` conversion was added in Python 2.0."
msgstr ""

#: ../../library/stdtypes.rst:1518 ../../library/stdtypes.rst:1524
msgid "The precision determines the maximal number of characters used."
msgstr ""

#: ../../library/stdtypes.rst:1521
msgid ""
"If the object or format provided is a :class:`unicode` string, the resulting"
" string will also be :class:`unicode`."
msgstr ""

#: ../../library/stdtypes.rst:1527
msgid "See :pep:`237`."
msgstr ":pep:`237` を参照してください。"

#: ../../library/stdtypes.rst:1529
msgid ""
"Since Python strings have an explicit length, ``%s`` conversions do not "
"assume that ``'\\0'`` is the end of the string."
msgstr "Python 文字列には明示的な長さ情報があるので、 ``%s`` 変換において ``'\\0'`` を文字列の末端と仮定したりはしません。"

#: ../../library/stdtypes.rst:1534
msgid ""
"``%f`` conversions for numbers whose absolute value is over 1e50 are no "
"longer replaced by ``%g`` conversions."
msgstr "絶対値が 1e50 を超える数値の ``%f`` 変換が ``%g`` 変換に置き換えられなくなりました。"

#: ../../library/stdtypes.rst:1542
msgid ""
"Additional string operations are defined in standard modules :mod:`string` "
"and :mod:`re`."
msgstr ""

#: ../../library/stdtypes.rst:1549
msgid "XRange Type"
msgstr ""

#: ../../library/stdtypes.rst:1553
msgid ""
"The :class:`xrange` type is an immutable sequence which is commonly used for"
" looping.  The advantage of the :class:`xrange` type is that an "
":class:`xrange` object will always take the same amount of memory, no matter"
" the size of the range it represents.  There are no consistent performance "
"advantages."
msgstr ""

#: ../../library/stdtypes.rst:1558
msgid ""
"XRange objects have very little behavior: they only support indexing, "
"iteration, and the :func:`len` function."
msgstr ""

#: ../../library/stdtypes.rst:1565
msgid "Mutable Sequence Types"
msgstr "ミュータブルなシーケンス型"

#: ../../library/stdtypes.rst:1571
msgid ""
"List and :class:`bytearray` objects support additional operations that allow"
" in-place modification of the object. Other mutable sequence types (when "
"added to the language) should also support these operations. Strings and "
"tuples are immutable sequence types: such objects cannot be modified once "
"created. The following operations are defined on mutable sequence types "
"(where *x* is an arbitrary object):"
msgstr ""

#: ../../library/stdtypes.rst:1598
msgid "``s[i] = x``"
msgstr "``s[i] = x``"

#: ../../library/stdtypes.rst:1598
msgid "item *i* of *s* is replaced by *x*"
msgstr "*s* の要素 *i* を *x* と入れ替えます"

#: ../../library/stdtypes.rst:1601
msgid "``s[i:j] = t``"
msgstr "``s[i:j] = t``"

#: ../../library/stdtypes.rst:1601
msgid ""
"slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr "*s* の *i* から *j* 番目までのスライスをイテラブル *t* の内容に入れ替えます"

#: ../../library/stdtypes.rst:1605
msgid "``del s[i:j]``"
msgstr "``del s[i:j]``"

#: ../../library/stdtypes.rst:1605
msgid "same as ``s[i:j] = []``"
msgstr "``s[i:j] = []`` と同じです"

#: ../../library/stdtypes.rst:1607
msgid "``s[i:j:k] = t``"
msgstr "``s[i:j:k] = t``"

#: ../../library/stdtypes.rst:1607
msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr "``s[i:j:k]`` の要素を *t* の要素と入れ替えます"

#: ../../library/stdtypes.rst:1610
msgid "``del s[i:j:k]``"
msgstr "``del s[i:j:k]``"

#: ../../library/stdtypes.rst:1610
msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr "リストから ``s[i:j:k]`` の要素を削除します"

#: ../../library/stdtypes.rst:1613
msgid "``s.append(x)``"
msgstr "``s.append(x)``"

#: ../../library/stdtypes.rst:1613
msgid "same as ``s[len(s):len(s)] = [x]``"
msgstr ""

#: ../../library/stdtypes.rst:1616
msgid "``s.extend(x)`` or ``s += t``"
msgstr ""

#: ../../library/stdtypes.rst:1616
msgid "for the most part the same as ``s[len(s):len(s)] = x``"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid "``s *= n``"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid "updates *s* with its contents repeated *n* times"
msgstr ""

#: ../../library/stdtypes.rst:1619
msgid "\\(11)"
msgstr ""

#: ../../library/stdtypes.rst:1622
msgid "return number of *i*'s for which ``s[i] == x``"
msgstr ""

#: ../../library/stdtypes.rst:1625
msgid "``s.index(x[, i[, j]])``"
msgstr "``s.index(x[, i[, j]])``"

#: ../../library/stdtypes.rst:1625
msgid "return smallest *k* such that ``s[k] == x`` and ``i <= k < j``"
msgstr ""

#: ../../library/stdtypes.rst:1629
msgid "``s.insert(i, x)``"
msgstr "``s.insert(i, x)``"

#: ../../library/stdtypes.rst:1629
msgid "same as ``s[i:i] = [x]``"
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid "``s.pop([i])``"
msgstr "``s.pop([i])``"

#: ../../library/stdtypes.rst:1631
msgid "same as ``x = s[i]; del s[i]; return x``"
msgstr ""

#: ../../library/stdtypes.rst:1634
msgid "``s.remove(x)``"
msgstr "``s.remove(x)``"

#: ../../library/stdtypes.rst:1634
msgid "same as ``del s[s.index(x)]``"
msgstr ""

#: ../../library/stdtypes.rst:1636
msgid "``s.reverse()``"
msgstr "``s.reverse()``"

#: ../../library/stdtypes.rst:1636
msgid "reverses the items of *s* in place"
msgstr "*s* をインプレースに逆転させます"

#: ../../library/stdtypes.rst:1639
msgid "``s.sort([cmp[, key[, reverse]]])``"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid "sort the items of *s* in place"
msgstr ""

#: ../../library/stdtypes.rst:1639
msgid "(7)(8)(9)(10)"
msgstr ""

#: ../../library/stdtypes.rst:1646
msgid "*t* must have the same length as the slice it is  replacing."
msgstr ""

#: ../../library/stdtypes.rst:1649
msgid ""
"The C implementation of Python has historically accepted multiple parameters"
" and implicitly joined them into a tuple; this no longer works in Python "
"2.0.  Use of this misfeature has been deprecated since Python 1.4."
msgstr ""

#: ../../library/stdtypes.rst:1654
msgid "*x* can be any iterable object."
msgstr ""

#: ../../library/stdtypes.rst:1657
msgid ""
"Raises :exc:`ValueError` when *x* is not found in *s*. When a negative index"
" is passed as the second or third parameter to the :meth:`index` method, the"
" list length is added, as for slice indices.  If it is still negative, it is"
" truncated to zero, as for slice indices."
msgstr ""

#: ../../library/stdtypes.rst:1662
msgid ""
"Previously, :meth:`index` didn't have arguments for specifying start and "
"stop positions."
msgstr ""

#: ../../library/stdtypes.rst:1667
msgid ""
"When a negative index is passed as the first parameter to the :meth:`insert`"
" method, the list length is added, as for slice indices.  If it is still "
"negative, it is truncated to zero, as for slice indices."
msgstr ""

#: ../../library/stdtypes.rst:1671
msgid "Previously, all negative indices were truncated to zero."
msgstr ""

#: ../../library/stdtypes.rst:1675
msgid ""
"The :meth:`pop` method's optional argument *i* defaults to ``-1``, so that "
"by default the last item is removed and returned."
msgstr ""

#: ../../library/stdtypes.rst:1679
msgid ""
"The :meth:`sort` and :meth:`reverse` methods modify the list in place for "
"economy of space when sorting or reversing a large list.  To remind you that"
" they operate by side effect, they don't return the sorted or reversed list."
msgstr ""

#: ../../library/stdtypes.rst:1684
msgid ""
"The :meth:`sort` method takes optional arguments for controlling the "
"comparisons."
msgstr ""

#: ../../library/stdtypes.rst:1687
msgid ""
"*cmp* specifies a custom comparison function of two arguments (list items) "
"which should return a negative, zero or positive number depending on whether"
" the first argument is considered smaller than, equal to, or larger than the"
" second argument: ``cmp=lambda x,y: cmp(x.lower(), y.lower())``.  The "
"default value is ``None``."
msgstr ""

#: ../../library/stdtypes.rst:1693
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element: ``key=str.lower``.  The default value"
" is ``None``."
msgstr ""

#: ../../library/stdtypes.rst:1696
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr "*reverse* はブール値です。``True`` に設定された場合、リストの要素は各比較が反転したように並び替えられます。"

#: ../../library/stdtypes.rst:1699
msgid ""
"In general, the *key* and *reverse* conversion processes are much faster "
"than specifying an equivalent *cmp* function.  This is because *cmp* is "
"called multiple times for each list element while *key* and *reverse* touch "
"each element only once.  Use :func:`functools.cmp_to_key` to convert an old-"
"style *cmp* function to a *key* function."
msgstr ""

#: ../../library/stdtypes.rst:1705
msgid "Support for ``None`` as an equivalent to omitting *cmp* was added."
msgstr ""

#: ../../library/stdtypes.rst:1708
msgid "Support for *key* and *reverse* was added."
msgstr ""

#: ../../library/stdtypes.rst:1712
msgid ""
"Starting with Python 2.3, the :meth:`sort` method is guaranteed to be "
"stable.  A sort is stable if it guarantees not to change the relative order "
"of elements that compare equal --- this is helpful for sorting in multiple "
"passes (for example, sort by department, then by salary grade)."
msgstr ""

#: ../../library/stdtypes.rst:1720
msgid ""
"While a list is being sorted, the effect of attempting to mutate, or even "
"inspect, the list is undefined.  The C implementation of Python 2.3 and "
"newer makes the list appear empty for the duration, and raises "
":exc:`ValueError` if it can detect that the list has been mutated during a "
"sort."
msgstr ""

#: ../../library/stdtypes.rst:1727
msgid ""
"The value *n* is an integer, or an object implementing "
":meth:`~object.__index__`.  Zero and negative values of *n* clear the "
"sequence.  Items in the sequence are not copied; they are referenced "
"multiple times, as explained for ``s * n`` under :ref:`typesseq`."
msgstr ""

#: ../../library/stdtypes.rst:1736
msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr "集合型 --- :class:`set`, :class:`frozenset`"

#: ../../library/stdtypes.rst:1740
msgid ""
"A :dfn:`set` object is an unordered collection of distinct :term:`hashable` "
"objects. Common uses include membership testing, removing duplicates from a "
"sequence, and computing mathematical operations such as intersection, union,"
" difference, and symmetric difference. (For other containers see the built "
"in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the "
":mod:`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:1750
msgid ""
"Like other collections, sets support ``x in set``, ``len(set)``, and ``for x"
" in set``.  Being an unordered collection, sets do not record element "
"position or order of insertion.  Accordingly, sets do not support indexing, "
"slicing, or other sequence-like behavior."
msgstr "集合は、他のコレクションと同様、 ``x in set``, ``len(set)``, ``for x in set`` をサポートします。コレクションには順序がないので、集合は挿入の順序や要素の位置を記録しません。従って、集合はインデクシング、スライシング、その他のシーケンス的な振舞いをサポートしません。"

#: ../../library/stdtypes.rst:1755
msgid ""
"There are currently two built-in set types, :class:`set` and "
":class:`frozenset`. The :class:`set` type is mutable --- the contents can be"
" changed using methods like :meth:`~set.add` and :meth:`~set.remove`.  Since"
" it is mutable, it has no hash value and cannot be used as either a "
"dictionary key or as an element of another set.  The :class:`frozenset` type"
" is immutable and :term:`hashable` --- its contents cannot be altered after "
"it is created; it can therefore be used as a dictionary key or as an element"
" of another set."
msgstr ":class:`set` および :class:`frozenset` という、2つの組み込みの集合型があります。 :class:`set` はミュータブルで、:meth:`~set.add` や :meth:`~set.remove` のようなメソッドを使って内容を変更できます。ミュータブルなため、ハッシュ値を持たず、また辞書のキーや他の集合の要素として用いることができません。一方、:class:`frozenset` 型はイミュータブルで、:term:`ハッシュ可能<hashable>` です。作成後に内容を改変できないため、辞書のキーや他の集合の要素として用いることができます。"

#: ../../library/stdtypes.rst:1763
msgid ""
"As of Python 2.7, non-empty sets (not frozensets) can be created by placing "
"a comma-separated list of elements within braces, for example: ``{'jack', "
"'sjoerd'}``, in addition to the :class:`set` constructor."
msgstr ""

#: ../../library/stdtypes.rst:1767
msgid "The constructors for both classes work the same:"
msgstr "どちらのクラスのコンストラクタも同様に働きます:"

#: ../../library/stdtypes.rst:1772
msgid ""
"Return a new set or frozenset object whose elements are taken from "
"*iterable*.  The elements of a set must be :term:`hashable`.  To represent "
"sets of sets, the inner sets must be :class:`frozenset` objects.  If "
"*iterable* is not specified, a new empty set is returned."
msgstr "*iterable* から要素を取り込んだ、新しい :class:`set` もしくは :class:`frozenset` オブジェクトを返します。 集合の要素は :term:`ハッシュ可能 <hashable>` なものでなくてはなりません。集合の集合を表現するためには、内側の集合は :class:`frozenset` オブジェクトでなくてはなりません。*iterable* が指定されない場合、新しい空の集合が返されます。"

#: ../../library/stdtypes.rst:1778
msgid ""
"Instances of :class:`set` and :class:`frozenset` provide the following "
"operations:"
msgstr ":class:`set` および :class:`frozenset` のインスタンスは以下の操作を提供します:"

#: ../../library/stdtypes.rst:1783
msgid "Return the cardinality of set *s*."
msgstr "集合 *s* の要素数を返します。"

#: ../../library/stdtypes.rst:1787
msgid "Test *x* for membership in *s*."
msgstr "*x* が *s* のメンバーに含まれるか判定します。"

#: ../../library/stdtypes.rst:1791
msgid "Test *x* for non-membership in *s*."
msgstr "*x* が *s* のメンバーに含まれていないことを判定します。"

#: ../../library/stdtypes.rst:1795
msgid ""
"Return ``True`` if the set has no elements in common with *other*.  Sets are"
" disjoint if and only if their intersection is the empty set."
msgstr "集合が *other* と共通の要素を持たないとき、``True`` を返します。集合はそれらの積集合が空集合となるときのみ、互いに素 (disjoint) となります。"

#: ../../library/stdtypes.rst:1803
msgid "Test whether every element in the set is in *other*."
msgstr "set の全ての要素が *other* に含まれるか判定します。"

#: ../../library/stdtypes.rst:1807
msgid ""
"Test whether the set is a proper subset of *other*, that is, ``set <= other "
"and set != other``."
msgstr "set が *other* の真部分集合であるかを判定します。つまり、 ``set <= other and set != other`` と等価です。"

#: ../../library/stdtypes.rst:1813
msgid "Test whether every element in *other* is in the set."
msgstr "*other* の全ての要素が set に含まれるか判定します。"

#: ../../library/stdtypes.rst:1817
msgid ""
"Test whether the set is a proper superset of *other*, that is, ``set >= "
"other and set != other``."
msgstr "set が *other* の真上位集合であるかを判定します。つまり、 ``set >= other and set != other`` と等価です。"

#: ../../library/stdtypes.rst:1823
msgid "Return a new set with elements from the set and all others."
msgstr "set と全ての other の要素からなる新しい集合を返します。"

#: ../../library/stdtypes.rst:1825 ../../library/stdtypes.rst:1833
#: ../../library/stdtypes.rst:1841 ../../library/stdtypes.rst:1895
#: ../../library/stdtypes.rst:1903 ../../library/stdtypes.rst:1911
msgid "Accepts multiple input iterables."
msgstr ""

#: ../../library/stdtypes.rst:1831
msgid "Return a new set with elements common to the set and all others."
msgstr "set と全ての other に共通する要素を持つ、新しい集合を返します。"

#: ../../library/stdtypes.rst:1839
msgid "Return a new set with elements in the set that are not in the others."
msgstr "set に含まれて、かつ、全ての other に含まれない要素を持つ、新しい集合を返します。"

#: ../../library/stdtypes.rst:1847
msgid ""
"Return a new set with elements in either the set or *other* but not both."
msgstr "set と *other* のいずれか一方だけに含まれる要素を持つ新しい集合を返します。"

#: ../../library/stdtypes.rst:1851
msgid "Return a new set with a shallow copy of *s*."
msgstr "*s* の浅いコピーを新しい集合として返します。"

#: ../../library/stdtypes.rst:1854
msgid ""
"Note, the non-operator versions of :meth:`union`, :meth:`intersection`, "
":meth:`difference`, and :meth:`symmetric_difference`, :meth:`issubset`, and "
":meth:`issuperset` methods will accept any iterable as an argument.  In "
"contrast, their operator based counterparts require their arguments to be "
"sets.  This precludes error-prone constructions like ``set('abc') & 'cbs'`` "
"in favor of the more readable ``set('abc').intersection('cbs')``."
msgstr "なお、演算子でない版の :meth:`union`, :meth:`intersection`, :meth:`difference`, :meth:`symmetric_difference`, :meth:`issubset`, :meth:`issuperset` メソッドは、任意のイテラブルを引数として受け付けます。対して、演算子を使う版では、引数は集合でなくてはなりません。これは、``set('abc') & 'cbs'`` のような誤りがちな構文を予防し、より読みやすい ``set('abc').intersection('cbs')`` を支持します。"

#: ../../library/stdtypes.rst:1861
msgid ""
"Both :class:`set` and :class:`frozenset` support set to set comparisons. Two"
" sets are equal if and only if every element of each set is contained in the"
" other (each is a subset of the other). A set is less than another set if "
"and only if the first set is a proper subset of the second set (is a subset,"
" but is not equal). A set is greater than another set if and only if the "
"first set is a proper superset of the second set (is a superset, but is not "
"equal)."
msgstr ":class:`set` と :class:`frozenset` のどちらも、集合同士の比較をサポートします。二つの集合は、それぞれの集合の要素全てが他方にも含まれている (互いに他方の部分集合である) とき、かつそのときに限り等しいです。一方の集合が他方の集合の真部分集合である (部分集合であるが等しくない) とき、かつそのときに限り一方の集合は他方の集合より小さいです。一方の集合が他方の集合の真上位集合である (上位集合であるが等しくない) とき、かつそのときに限り一方の集合は他方の集合より大きいです。"

#: ../../library/stdtypes.rst:1868
msgid ""
"Instances of :class:`set` are compared to instances of :class:`frozenset` "
"based on their members.  For example, ``set('abc') == frozenset('abc')`` "
"returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ":class:`set` のインスタンスは、 :class:`frozenset` のインスタンスと、要素に基づいて比較されます。例えば、 ``set('abc') == frozenset('abc')`` や ``set('abc') in set([frozenset('abc')])`` は ``True`` を返します。"

#: ../../library/stdtypes.rst:1872
msgid ""
"The subset and equality comparisons do not generalize to a total ordering "
"function.  For example, any two non-empty disjoint sets are not equal and "
"are not subsets of each other, so *all* of the following return ``False``: "
"``a<b``, ``a==b``, or ``a>b``. Accordingly, sets do not implement the "
":meth:`__cmp__` method."
msgstr ""

#: ../../library/stdtypes.rst:1878
msgid ""
"Since sets only define partial ordering (subset relationships), the output "
"of the :meth:`list.sort` method is undefined for lists of sets."
msgstr "集合は半順序（部分集合関係）しか定義しないので、集合のリストにおける :meth:`list.sort` メソッドの出力は未定義です。"

#: ../../library/stdtypes.rst:1881
msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr "集合の要素は、辞書のキーのように、ハッシュ可能 (:term:`hashable`) でなければなりません。"

#: ../../library/stdtypes.rst:1883
msgid ""
"Binary operations that mix :class:`set` instances with :class:`frozenset` "
"return the type of the first operand.  For example: ``frozenset('ab') | "
"set('bc')`` returns an instance of :class:`frozenset`."
msgstr ":class:`set` インスタンスと :class:`frozenset` インスタンスを取り混ぜての二項演算は、第一被演算子の型を返します。例えば: ``frozenset('ab') | set('bc')`` は :class:`frozenset` インスタンスを返します。"

#: ../../library/stdtypes.rst:1887
msgid ""
"The following table lists operations available for :class:`set` that do not "
"apply to immutable instances of :class:`frozenset`:"
msgstr "以下の表に挙げる演算は :class:`set` に適用されますが、:class:`frozenset` のイミュータブルなインスタンスには適用されません:"

#: ../../library/stdtypes.rst:1893
msgid "Update the set, adding elements from all others."
msgstr "全ての other の要素を追加し、 set を更新します。"

#: ../../library/stdtypes.rst:1901
msgid "Update the set, keeping only elements found in it and all others."
msgstr "元の set と全ての other に共通する要素だけを残して set を更新します。"

#: ../../library/stdtypes.rst:1909
msgid "Update the set, removing elements found in others."
msgstr "*other* に含まれる要素を取り除き、 set を更新します。"

#: ../../library/stdtypes.rst:1917
msgid ""
"Update the set, keeping only elements found in either set, but not in both."
msgstr "どちらかにのみ含まれて、共通には持たない要素のみで set を更新します。"

#: ../../library/stdtypes.rst:1921
msgid "Add element *elem* to the set."
msgstr "要素 *elem* を set に追加します。"

#: ../../library/stdtypes.rst:1925
msgid ""
"Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not"
" contained in the set."
msgstr "要素 *elem* を set から取り除きます。*elem* が set に含まれていなければ :exc:`KeyError` を送出します。"

#: ../../library/stdtypes.rst:1930
msgid "Remove element *elem* from the set if it is present."
msgstr "要素 *elem* が set に含まれていれば、取り除きます。"

#: ../../library/stdtypes.rst:1934
msgid ""
"Remove and return an arbitrary element from the set.  Raises :exc:`KeyError`"
" if the set is empty."
msgstr "任意に要素をから返し、それを set から取り除きます。set が空であれば、 :exc:`KeyError` を送出します。"

#: ../../library/stdtypes.rst:1939
msgid "Remove all elements from the set."
msgstr "set の全ての要素を取り除きます。"

#: ../../library/stdtypes.rst:1942
msgid ""
"Note, the non-operator versions of the :meth:`update`, "
":meth:`intersection_update`, :meth:`difference_update`, and "
":meth:`symmetric_difference_update` methods will accept any iterable as an "
"argument."
msgstr "なお、演算子でない版の :meth:`update`, :meth:`intersection_update`, :meth:`difference_update`, および :meth:`symmetric_difference_update` メソッドは、任意のイテラブルを引数として受け付けます。"

#: ../../library/stdtypes.rst:1947
msgid ""
"Note, the *elem* argument to the :meth:`__contains__`, :meth:`remove`, and "
":meth:`discard` methods may be a set.  To support searching for an "
"equivalent frozenset, the *elem* set is temporarily mutated during the "
"search and then restored.  During the search, the *elem* set should not be "
"read or mutated since it does not have a meaningful value."
msgstr "また、:meth:`__contains__`, :meth:`remove`, および :meth:`discard` メソッドの引数 *elem* は集合にできます。等価な :class:`frozenset` の検索をサポートするために、 *elem* 集合は一時的に検索の間は変化させられ、その後、復元されます。検索の間、 *elem* 集合は意味のある値を持たなくなるため、読み出したり、変更してはいけません。"

#: ../../library/stdtypes.rst:1956
msgid ":ref:`comparison-to-builtin-set`"
msgstr ""

#: ../../library/stdtypes.rst:1957
msgid "Differences between the :mod:`sets` module and the built-in set types."
msgstr ""

#: ../../library/stdtypes.rst:1963
msgid "Mapping Types --- :class:`dict`"
msgstr "マッピング型 --- :class:`dict`"

#: ../../library/stdtypes.rst:1973
msgid ""
"A :term:`mapping` object maps :term:`hashable` values to arbitrary objects. "
"Mappings are mutable objects.  There is currently only one standard mapping "
"type, the :dfn:`dictionary`.  (For other containers see the built in "
":class:`list`, :class:`set`, and :class:`tuple` classes, and the "
":mod:`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:1979
msgid ""
"A dictionary's keys are *almost* arbitrary values.  Values that are not "
":term:`hashable`, that is, values containing lists, dictionaries or other "
"mutable types (that are compared by value rather than by object identity) "
"may not be used as keys.  Numeric types used for keys obey the normal rules "
"for numeric comparison: if two numbers compare equal (such as ``1`` and "
"``1.0``) then they can be used interchangeably to index the same dictionary "
"entry.  (Note however, that since computers store floating-point numbers as "
"approximations it is usually unwise to use them as dictionary keys.)"
msgstr "辞書のキーは *ほぼ* 任意の値です。ハッシュ可能 (:term:`hashable`) でない値、つまり、リストや辞書その他のミュータブルな型 (オブジェクトの同一性ではなく値で比較されるもの) はキーとして使用できません。キーとして使われる数値型は通常の数値比較のルールに従います: もしふたつの数値が (例えば ``1`` と ``1.0`` のように) 等しければ、同じ辞書の項目として互換的に使用できます。 (ただし、コンピュータは浮動小数点数を近似値として保管するので、辞書型のキーとして使用するのはたいてい賢くありません。)"

#: ../../library/stdtypes.rst:1988
msgid ""
"Dictionaries can be created by placing a comma-separated list of ``key: "
"value`` pairs within braces, for example: ``{'jack': 4098, 'sjoerd': 4127}``"
" or ``{4098: 'jack', 4127: 'sjoerd'}``, or by the :class:`dict` constructor."
msgstr "辞書は ``key: value`` 対のカンマ区切りのリストを波括弧でくくることで作成できます。例えば: ``{'jack': 4098, 'sjoerd': 4127}`` あるいは ``{4098: 'jack', 4127: 'sjoerd'}`` 。あるいは、 :class:`dict` コンストラクタでも作成できます。"

#: ../../library/stdtypes.rst:1996
msgid ""
"Return a new dictionary initialized from an optional positional argument and"
" a possibly empty set of keyword arguments."
msgstr "オプションの位置引数と空集合の可能性もあるキーワード引数から初期化された新しい辞書を返します。"

#: ../../library/stdtypes.rst:1999
msgid ""
"If no positional argument is given, an empty dictionary is created. If a "
"positional argument is given and it is a mapping object, a dictionary is "
"created with the same key-value pairs as the mapping object.  Otherwise, the"
" positional argument must be an :term:`iterable` object.  Each item in the "
"iterable must itself be an iterable with exactly two objects.  The first "
"object of each item becomes a key in the new dictionary, and the second "
"object the corresponding value.  If a key occurs more than once, the last "
"value for that key becomes the corresponding value in the new dictionary."
msgstr "位置引数が何も与えられなかった場合、空の辞書が作成されます。位置引数が与えられ、それがマッピングオブジェクトだった場合、そのマッピングオブジェクトと同じキーと値のペアを持つ辞書が作成されます。それ以外の場合、位置引数は :term:`iterable` オブジェクトでなければなりません。iterable のそれぞれの要素自身は、ちょうど 2 個のオブジェクトを持つイテラブルでなければなりません。それぞれの要素の最初のオブジェクトは新しい辞書のキーになり、2 番目のオブジェクトはそれに対応する値になります。同一のキーが 2 回以上現れた場合は、そのキーの最後の値が新しい辞書での対応する値になります。"

#: ../../library/stdtypes.rst:2009
msgid ""
"If keyword arguments are given, the keyword arguments and their values are "
"added to the dictionary created from the positional argument.  If a key "
"being added is already present, the value from the keyword argument replaces"
" the value from the positional argument."
msgstr "キーワード引数が与えられた場合、キーワード引数とその値が位置引数から作られた辞書に追加されます。既に存在しているキーが追加された場合、キーワード引数の値は位置引数の値を置き換えます。"

#: ../../library/stdtypes.rst:2014
msgid ""
"To illustrate, the following examples all return a dictionary equal to "
"``{\"one\": 1, \"two\": 2, \"three\": 3}``::"
msgstr "例を出すと、次の例は全て ``{\"one\": 1, \"two\": 2, \"three\": 3}`` に等しい辞書を返します::"

#: ../../library/stdtypes.rst:2025
msgid ""
"Providing keyword arguments as in the first example only works for keys that"
" are valid Python identifiers.  Otherwise, any valid keys can be used."
msgstr "最初の例のようにキーワード引数を与える方法では、キーは有効な Python の識別子でなければなりません。それ以外の方法では、辞書のキーとして有効などんなキーでも使えます。"

#: ../../library/stdtypes.rst:2030
msgid "Support for building a dictionary from keyword arguments added."
msgstr ""

#: ../../library/stdtypes.rst:2034
msgid ""
"These are the operations that dictionaries support (and therefore, custom "
"mapping types should support too):"
msgstr "以下は辞書型がサポートする操作です (それゆえ、カスタムのマップ型もこれらの操作をサポートするべきです):"

#: ../../library/stdtypes.rst:2039
msgid "Return the number of items in the dictionary *d*."
msgstr "辞書 *d* の項目数を返します。"

#: ../../library/stdtypes.rst:2043
msgid ""
"Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is"
" not in the map."
msgstr "*d* のキー *key* の項目を返します。マップに *key* が存在しなければ、 :exc:`KeyError` を送出します。"

#: ../../library/stdtypes.rst:2048
msgid ""
"If a subclass of dict defines a method :meth:`__missing__` and *key* is not "
"present, the ``d[key]`` operation calls that method with the key *key* as "
"argument.  The ``d[key]`` operation then returns or raises whatever is "
"returned or raised by the ``__missing__(key)`` call. No other operations or "
"methods invoke :meth:`__missing__`. If :meth:`__missing__` is not defined, "
":exc:`KeyError` is raised. :meth:`__missing__` must be a method; it cannot "
"be an instance variable::"
msgstr "辞書のサブクラスが :meth:`__missing__` メソッドを定義しておらず、 *key* が存在しないなら、 ``d[key]`` 演算はこのメソッドをキー *key* を引数として呼び出します。結果として、 ``d[key]`` 演算は、キーが存在しなければ、 ``__missing__(key)`` の呼び出しによって返されまたは送出されたものを何でも、返しまたは送出します。他の演算やメソッドは :meth:`__missing__` を呼び出しません。 :meth:`__missing__` が定義されていなければ、 :exc:`KeyError` が送出されます。 :meth:`__missing__` はメソッドでなければならず、インスタンス変数であってはなりません::"

#: ../../library/stdtypes.rst:2066
msgid ""
"The example above shows part of the implementation of "
":class:`collections.Counter`.  A different ``__missing__`` method is used by"
" :class:`collections.defaultdict`."
msgstr ""

#: ../../library/stdtypes.rst:2070
msgid "Recognition of __missing__ methods of dict subclasses."
msgstr ""

#: ../../library/stdtypes.rst:2075
msgid "Set ``d[key]`` to *value*."
msgstr "``d[key]`` に *value* を設定します。"

#: ../../library/stdtypes.rst:2079
msgid ""
"Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the"
" map."
msgstr "*d* から ``d[key]`` を削除します。マップに *key* が存在しなければ、 :exc:`KeyError` を送出します。"

#: ../../library/stdtypes.rst:2084
msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr "*d* がキー *key* を持っていれば ``True`` を、そうでなければ、 ``False`` を返します。"

#: ../../library/stdtypes.rst:2090
msgid "Equivalent to ``not key in d``."
msgstr "``not key in d`` と等価です。"

#: ../../library/stdtypes.rst:2096
msgid ""
"Return an iterator over the keys of the dictionary.  This is a shortcut for "
":meth:`iterkeys`."
msgstr ""

#: ../../library/stdtypes.rst:2101
msgid "Remove all items from the dictionary."
msgstr "辞書の全ての項目を消去します。"

#: ../../library/stdtypes.rst:2105
msgid "Return a shallow copy of the dictionary."
msgstr "辞書の浅いコピーを返します。"

#: ../../library/stdtypes.rst:2109
msgid ""
"Create a new dictionary with keys from *seq* and values set to *value*."
msgstr "*seq* からキーを取り、値を *value* に設定した、新しい辞書を作成します。"

#: ../../library/stdtypes.rst:2111
msgid ""
":func:`fromkeys` is a class method that returns a new dictionary. *value* "
"defaults to ``None``."
msgstr ""

#: ../../library/stdtypes.rst:2118
msgid ""
"Return the value for *key* if *key* is in the dictionary, else *default*. If"
" *default* is not given, it defaults to ``None``, so that this method never "
"raises a :exc:`KeyError`."
msgstr "*key* が辞書にあれば *key* に対する値を、そうでなければ *default* を返します。 *default* が与えられなかった場合、デフォルトでは ``None`` となります。そのため、このメソッドは :exc:`KeyError` を送出することはありません。"

#: ../../library/stdtypes.rst:2124
msgid ""
"Test for the presence of *key* in the dictionary.  :meth:`has_key` is "
"deprecated in favor of ``key in d``."
msgstr ""

#: ../../library/stdtypes.rst:2129
msgid "Return a copy of the dictionary's list of ``(key, value)`` pairs."
msgstr ""

#: ../../library/stdtypes.rst:2133
msgid ""
"Keys and values are listed in an arbitrary order which is non-random, varies"
" across Python implementations, and depends on the dictionary's history of "
"insertions and deletions."
msgstr ""

#: ../../library/stdtypes.rst:2137
msgid ""
"If :meth:`items`, :meth:`keys`, :meth:`values`, :meth:`iteritems`, "
":meth:`iterkeys`, and :meth:`itervalues` are called with no intervening "
"modifications to the dictionary, the lists will directly correspond.  This "
"allows the creation of ``(value, key)`` pairs using :func:`zip`: ``pairs = "
"zip(d.values(), d.keys())``.  The same relationship holds for the "
":meth:`iterkeys` and :meth:`itervalues` methods: ``pairs = "
"zip(d.itervalues(), d.iterkeys())`` provides the same value for ``pairs``. "
"Another way to create the same list is ``pairs = [(v, k) for (k, v) in "
"d.iteritems()]``."
msgstr ""

#: ../../library/stdtypes.rst:2149
msgid ""
"Return an iterator over the dictionary's ``(key, value)`` pairs.  See the "
"note for :meth:`dict.items`."
msgstr ""

#: ../../library/stdtypes.rst:2152
msgid ""
"Using :meth:`iteritems` while adding or deleting entries in the dictionary "
"may raise a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:2159
msgid ""
"Return an iterator over the dictionary's keys.  See the note for "
":meth:`dict.items`."
msgstr ""

#: ../../library/stdtypes.rst:2162
msgid ""
"Using :meth:`iterkeys` while adding or deleting entries in the dictionary "
"may raise a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:2169
msgid ""
"Return an iterator over the dictionary's values.  See the note for "
":meth:`dict.items`."
msgstr ""

#: ../../library/stdtypes.rst:2172
msgid ""
"Using :meth:`itervalues` while adding or deleting entries in the dictionary "
"may raise a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:2180
msgid ""
"Return a copy of the dictionary's list of keys.  See the note for "
":meth:`dict.items`."
msgstr ""

#: ../../library/stdtypes.rst:2185
msgid ""
"If *key* is in the dictionary, remove it and return its value, else return "
"*default*.  If *default* is not given and *key* is not in the dictionary, a "
":exc:`KeyError` is raised."
msgstr "*key* が辞書に存在すればその値を辞書から消去して返し、そうでなければ *default* を返します。 *default* が与えらず、かつ *key* が辞書に存在しなければ :exc:`KeyError` を送出します。"

#: ../../library/stdtypes.rst:2193
msgid ""
"Remove and return an arbitrary ``(key, value)`` pair from the dictionary."
msgstr "任意の ``(key, value)`` 対を辞書から消去して返します。"

#: ../../library/stdtypes.rst:2195
msgid ""
":func:`popitem` is useful to destructively iterate over a dictionary, as "
"often used in set algorithms.  If the dictionary is empty, calling "
":func:`popitem` raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:2201
msgid ""
"If *key* is in the dictionary, return its value.  If not, insert *key* with "
"a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr "もし、 *key* が辞書に存在すれば、その値を返します。そうでなければ、値を *default* として *key* を挿入し、 *default* を返します。 *default* のデフォルトは ``None`` です。"

#: ../../library/stdtypes.rst:2207
msgid ""
"Update the dictionary with the key/value pairs from *other*, overwriting "
"existing keys.  Return ``None``."
msgstr "辞書の内容を *other* のキーと値で更新します。既存のキーは上書きされます。返り値は ``None`` です。"

#: ../../library/stdtypes.rst:2210
msgid ""
":func:`update` accepts either another dictionary object or an iterable of "
"key/value pairs (as tuples or other iterables of length two).  If keyword "
"arguments are specified, the dictionary is then updated with those key/value"
" pairs: ``d.update(red=1, blue=2)``."
msgstr ""

#: ../../library/stdtypes.rst:2215
msgid ""
"Allowed the argument to be an iterable of key/value pairs and allowed "
"keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:2221
msgid ""
"Return a copy of the dictionary's list of values.  See the note for "
":meth:`dict.items`."
msgstr ""

#: ../../library/stdtypes.rst:2226
msgid ""
"Return a new view of the dictionary's items (``(key, value)`` pairs).  See "
"below for documentation of view objects."
msgstr ""

#: ../../library/stdtypes.rst:2233
msgid ""
"Return a new view of the dictionary's keys.  See below for documentation of "
"view objects."
msgstr ""

#: ../../library/stdtypes.rst:2240
msgid ""
"Return a new view of the dictionary's values.  See below for documentation "
"of view objects."
msgstr ""

#: ../../library/stdtypes.rst:2245
msgid ""
"Dictionaries compare equal if and only if they have the same ``(key, "
"value)`` pairs."
msgstr ""

#: ../../library/stdtypes.rst:2252
msgid "Dictionary view objects"
msgstr "辞書ビューオブジェクト"

#: ../../library/stdtypes.rst:2254
msgid ""
"The objects returned by :meth:`dict.viewkeys`, :meth:`dict.viewvalues` and "
":meth:`dict.viewitems` are *view objects*.  They provide a dynamic view on "
"the dictionary's entries, which means that when the dictionary changes, the "
"view reflects these changes."
msgstr ""

#: ../../library/stdtypes.rst:2259
msgid ""
"Dictionary views can be iterated over to yield their respective data, and "
"support membership tests:"
msgstr "辞書ビューは、イテレートすることで対応するデータを yield できます。また、帰属判定をサポートします:"

#: ../../library/stdtypes.rst:2264
msgid "Return the number of entries in the dictionary."
msgstr "辞書の項目数を返します。"

#: ../../library/stdtypes.rst:2268
msgid ""
"Return an iterator over the keys, values or items (represented as tuples of "
"``(key, value)``) in the dictionary."
msgstr "辞書のキー、値、または (``(key, value)`` のタプルとして表される) 項目に渡るイテレータを返します。"

#: ../../library/stdtypes.rst:2271
msgid ""
"Keys and values are iterated over in an arbitrary order which is non-random,"
" varies across Python implementations, and depends on the dictionary's "
"history of insertions and deletions. If keys, values and items views are "
"iterated over with no intervening modifications to the dictionary, the order"
" of items will directly correspond.  This allows the creation of ``(value, "
"key)`` pairs using :func:`zip`: ``pairs = zip(d.values(), d.keys())``.  "
"Another way to create the same list is ``pairs = [(v, k) for (k, v) in "
"d.items()]``."
msgstr "キーと値のリストはある任意の順序でイテレートされますが、ランダムではなく、 Python の実装によって変わり、辞書への挿入や削除の履歴に依存します。キー、値、要素のビューを通して、辞書の変更を挟まずにイテレートされたら、その要素の順序は完全に一致します。これにより、 ``(value, key)`` の対を :func:`zip` で作成できます: ``pairs = zip(d.values(), d.keys())`` 。同じリストを作成する他の方法は、 ``pairs = [(v, k) for (k, v) in d.items()]`` です。"

#: ../../library/stdtypes.rst:2279
msgid ""
"Iterating views while adding or deleting entries in the dictionary may raise"
" a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr "辞書の項目の追加や削除中にビューをイテレートすると、 :exc:`RuntimeError` を送出したり、すべての項目に渡ってイテレートできなかったりします。"

#: ../../library/stdtypes.rst:2284
msgid ""
"Return ``True`` if *x* is in the underlying dictionary's keys, values or "
"items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr "*x* が下にある辞書のキー、値、または項目 (項目の場合、 *x* は ``(key, value)`` タプルであるべきです) にあるとき ``True`` を返します。"

#: ../../library/stdtypes.rst:2288
msgid ""
"Keys views are set-like since their entries are unique and hashable.  If all"
" values are hashable, so that (key, value) pairs are unique and hashable, "
"then the items view is also set-like.  (Values views are not treated as set-"
"like since the entries are generally not unique.)  Then these set operations"
" are available (\"other\" refers either to another view or a set):"
msgstr ""

#: ../../library/stdtypes.rst:2296
msgid ""
"Return the intersection of the dictview and the other object as a new set."
msgstr ""

#: ../../library/stdtypes.rst:2300
msgid "Return the union of the dictview and the other object as a new set."
msgstr ""

#: ../../library/stdtypes.rst:2304
msgid ""
"Return the difference between the dictview and the other object (all "
"elements in *dictview* that aren't in *other*) as a new set."
msgstr ""

#: ../../library/stdtypes.rst:2309
msgid ""
"Return the symmetric difference (all elements either in *dictview* or "
"*other*, but not in both) of the dictview and the other object as a new set."
msgstr ""

#: ../../library/stdtypes.rst:2313
msgid "An example of dictionary view usage::"
msgstr "辞書ビューの使用法の例::"

#: ../../library/stdtypes.rst:2346
msgid "File Objects"
msgstr "ファイルオブジェクト"

#: ../../library/stdtypes.rst:2354
msgid ""
"File objects are implemented using C's ``stdio`` package and can be created "
"with the built-in :func:`open` function.  File objects are also returned by "
"some other built-in functions and methods, such as :func:`os.popen` and "
":func:`os.fdopen` and the :meth:`makefile` method of socket objects. "
"Temporary files can be created using the :mod:`tempfile` module, and high-"
"level file operations such as copying, moving, and deleting files and "
"directories can be achieved with the :mod:`shutil` module."
msgstr ""

#: ../../library/stdtypes.rst:2363
msgid ""
"When a file operation fails for an I/O-related reason, the exception "
":exc:`IOError` is raised.  This includes situations where the operation is "
"not defined for some reason, like :meth:`seek` on a tty device or writing a "
"file opened for reading."
msgstr ""

#: ../../library/stdtypes.rst:2368
msgid "Files have the following methods:"
msgstr ""

#: ../../library/stdtypes.rst:2373
msgid ""
"Close the file.  A closed file cannot be read or written any more. Any "
"operation which requires that the file be open will raise a "
":exc:`ValueError` after the file has been closed.  Calling :meth:`close` "
"more than once is allowed."
msgstr ""

#: ../../library/stdtypes.rst:2377
msgid ""
"As of Python 2.5, you can avoid having to call this method explicitly if you"
" use the :keyword:`with` statement.  For example, the following code will "
"automatically close *f* when the :keyword:`with` block is exited::"
msgstr ""

#: ../../library/stdtypes.rst:2387
msgid ""
"In older versions of Python, you would have needed to do this to get the "
"same effect::"
msgstr ""

#: ../../library/stdtypes.rst:2399
msgid ""
"Not all \"file-like\" types in Python support use as a context manager for "
"the :keyword:`with` statement.  If your code is intended to work with any "
"file-like object, you can use the function :func:`contextlib.closing` "
"instead of using the object directly."
msgstr ""

#: ../../library/stdtypes.rst:2407
msgid ""
"Flush the internal buffer, like ``stdio``'s :c:func:`fflush`.  This may be a"
" no-op on some file-like objects."
msgstr ""

#: ../../library/stdtypes.rst:2412
msgid ""
":meth:`flush` does not necessarily write the file's data to disk.  Use "
":meth:`flush` followed by :func:`os.fsync` to ensure this behavior."
msgstr ""

#: ../../library/stdtypes.rst:2422
msgid ""
"Return the integer \"file descriptor\" that is used by the underlying "
"implementation to request I/O operations from the operating system.  This "
"can be useful for other, lower level interfaces that use file descriptors, "
"such as the :mod:`fcntl` module or :func:`os.read` and friends."
msgstr ""

#: ../../library/stdtypes.rst:2429
msgid ""
"File-like objects which do not have a real file descriptor should *not* "
"provide this method!"
msgstr ""

#: ../../library/stdtypes.rst:2435
msgid ""
"Return ``True`` if the file is connected to a tty(-like) device, else "
"``False``."
msgstr ""

#: ../../library/stdtypes.rst:2439
msgid ""
"If a file-like object is not associated with a real file, this method should"
" *not* be implemented."
msgstr ""

#: ../../library/stdtypes.rst:2445
msgid ""
"A file object is its own iterator, for example ``iter(f)`` returns *f* "
"(unless *f* is closed).  When a file is used as an iterator, typically in a "
":keyword:`for` loop (for example, ``for line in f: print line.strip()``), "
"the :meth:`~file.next` method is called repeatedly.  This method returns the"
" next input line, or raises :exc:`StopIteration` when EOF is hit when the "
"file is open for reading (behavior is undefined when the file is open for "
"writing).  In order to make a :keyword:`for` loop the most efficient way of "
"looping over the lines of a file (a very common operation), the "
":meth:`~file.next` method uses a hidden read-ahead buffer.  As a consequence"
" of using a read-ahead buffer, combining :meth:`~file.next` with other file "
"methods (like :meth:`~file.readline`) does not work right.  However, using "
":meth:`seek` to reposition the file to an absolute position will flush the "
"read-ahead buffer."
msgstr ""

#: ../../library/stdtypes.rst:2463
msgid ""
"Read at most *size* bytes from the file (less if the read hits EOF before "
"obtaining *size* bytes).  If the *size* argument is negative or omitted, "
"read all data until EOF is reached.  The bytes are returned as a string "
"object.  An empty string is returned when EOF is encountered immediately.  "
"(For certain files, like ttys, it makes sense to continue reading after an "
"EOF is hit.)  Note that this method may call the underlying C function "
":c:func:`fread` more than once in an effort to acquire as close to *size* "
"bytes as possible. Also note that when in non-blocking mode, less data than "
"was requested may be returned, even if no *size* parameter was given."
msgstr ""

#: ../../library/stdtypes.rst:2474
msgid ""
"This function is simply a wrapper for the underlying :c:func:`fread` C "
"function, and will behave the same in corner cases, such as whether the EOF "
"value is cached."
msgstr ""

#: ../../library/stdtypes.rst:2481
msgid ""
"Read one entire line from the file.  A trailing newline character is kept in"
" the string (but may be absent when a file ends with an incomplete line). "
"[6]_ If the *size* argument is present and non-negative, it is a maximum "
"byte count (including the trailing newline) and an incomplete line may be "
"returned. When *size* is not 0, an empty string is returned *only* when EOF "
"is encountered immediately."
msgstr ""

#: ../../library/stdtypes.rst:2490
msgid ""
"Unlike ``stdio``'s :c:func:`fgets`, the returned string contains null "
"characters (``'\\0'``) if they occurred in the input."
msgstr ""

#: ../../library/stdtypes.rst:2496
msgid ""
"Read until EOF using :meth:`~file.readline` and return a list containing the"
" lines thus read.  If the optional *sizehint* argument is present, instead "
"of reading up to EOF, whole lines totalling approximately *sizehint* bytes "
"(possibly after rounding up to an internal buffer size) are read.  Objects "
"implementing a file-like interface may choose to ignore *sizehint* if it "
"cannot be implemented, or cannot be implemented efficiently."
msgstr ""

#: ../../library/stdtypes.rst:2506
msgid "This method returns the same thing as ``iter(f)``."
msgstr ""

#: ../../library/stdtypes.rst:2510
msgid "Use ``for line in file`` instead."
msgstr ""

#: ../../library/stdtypes.rst:2516
msgid ""
"Set the file's current position, like ``stdio``'s :c:func:`fseek`. The "
"*whence* argument is optional and defaults to  ``os.SEEK_SET`` or ``0`` "
"(absolute file positioning); other values are ``os.SEEK_CUR`` or ``1`` (seek"
" relative to the current position) and ``os.SEEK_END`` or ``2``  (seek "
"relative to the file's end).  There is no return value."
msgstr ""

#: ../../library/stdtypes.rst:2522
msgid ""
"For example, ``f.seek(2, os.SEEK_CUR)`` advances the position by two and "
"``f.seek(-3, os.SEEK_END)`` sets the position to the third to last."
msgstr ""

#: ../../library/stdtypes.rst:2525
msgid ""
"Note that if the file is opened for appending (mode ``'a'`` or ``'a+'``), "
"any :meth:`seek` operations will be undone at the next write.  If the file "
"is only opened for writing in append mode (mode ``'a'``), this method is "
"essentially a no-op, but it remains useful for files opened in append mode "
"with reading enabled (mode ``'a+'``).  If the file is opened in text mode "
"(without ``'b'``), only offsets returned by :meth:`tell` are legal.  Use of "
"other offsets causes undefined behavior."
msgstr ""

#: ../../library/stdtypes.rst:2533
msgid "Note that not all file objects are seekable."
msgstr ""

#: ../../library/stdtypes.rst:2535
msgid "Passing float values as offset has been deprecated."
msgstr ""

#: ../../library/stdtypes.rst:2541
msgid "Return the file's current position, like ``stdio``'s :c:func:`ftell`."
msgstr ""

#: ../../library/stdtypes.rst:2545
msgid ""
"On Windows, :meth:`tell` can return illegal values (after an "
":c:func:`fgets`) when reading files with Unix-style line-endings. Use binary"
" mode (``'rb'``) to circumvent this problem."
msgstr ""

#: ../../library/stdtypes.rst:2552
msgid ""
"Truncate the file's size.  If the optional *size* argument is present, the "
"file is truncated to (at most) that size.  The size defaults to the current "
"position. The current file position is not changed.  Note that if a "
"specified size exceeds the file's current size, the result is platform-"
"dependent:  possibilities include that the file may remain unchanged, "
"increase to the specified size as if zero-filled, or increase to the "
"specified size with undefined new content. Availability:  Windows, many Unix"
" variants."
msgstr ""

#: ../../library/stdtypes.rst:2563
msgid ""
"Write a string to the file.  There is no return value.  Due to buffering, "
"the string may not actually show up in the file until the :meth:`flush` or "
":meth:`close` method is called."
msgstr ""

#: ../../library/stdtypes.rst:2570
msgid ""
"Write a sequence of strings to the file.  The sequence can be any iterable "
"object producing strings, typically a list of strings. There is no return "
"value. (The name is intended to match :meth:`readlines`; :meth:`writelines` "
"does not add line separators.)"
msgstr ""

#: ../../library/stdtypes.rst:2575
msgid ""
"Files support the iterator protocol.  Each iteration returns the same result"
" as :meth:`~file.readline`, and iteration ends when the "
":meth:`~file.readline` method returns an empty string."
msgstr ""

#: ../../library/stdtypes.rst:2579
msgid ""
"File objects also offer a number of other interesting attributes. These are "
"not required for file-like objects, but should be implemented if they make "
"sense for the particular object."
msgstr ""

#: ../../library/stdtypes.rst:2586
msgid ""
"bool indicating the current state of the file object.  This is a read-only "
"attribute; the :meth:`close` method changes the value. It may not be "
"available on all file-like objects."
msgstr ""

#: ../../library/stdtypes.rst:2593
msgid ""
"The encoding that this file uses. When Unicode strings are written to a "
"file, they will be converted to byte strings using this encoding. In "
"addition, when the file is connected to a terminal, the attribute gives the "
"encoding that the terminal is likely to use (that  information might be "
"incorrect if the user has misconfigured the  terminal). The attribute is "
"read-only and may not be present on all file-like objects. It may also be "
"``None``, in which case the file uses the system default encoding for "
"converting Unicode strings."
msgstr ""

#: ../../library/stdtypes.rst:2606
msgid "The Unicode error handler used along with the encoding."
msgstr ""

#: ../../library/stdtypes.rst:2613
msgid ""
"The I/O mode for the file.  If the file was created using the :func:`open` "
"built-in function, this will be the value of the *mode* parameter.  This is "
"a read-only attribute and may not be present on all file-like objects."
msgstr ""

#: ../../library/stdtypes.rst:2620
msgid ""
"If the file object was created using :func:`open`, the name of the file. "
"Otherwise, some string that indicates the source of the file object, of the "
"form ``<...>``.  This is a read-only attribute and may not be present on all"
" file-like objects."
msgstr ""

#: ../../library/stdtypes.rst:2631
msgid ""
"If Python was built with :term:`universal newlines` enabled (the default) "
"this read-only attribute exists, and for files opened in universal newline "
"read mode it keeps track of the types of newlines encountered while reading "
"the file. The values it can take are ``'\\r'``, ``'\\n'``, ``'\\r\\n'``, "
"``None`` (unknown, no newlines read yet) or a tuple containing all the "
"newline types seen, to indicate that multiple newline conventions were "
"encountered. For files not opened in universal newlines read mode the value "
"of this attribute will be ``None``."
msgstr ""

#: ../../library/stdtypes.rst:2643
msgid ""
"Boolean that indicates whether a space character needs to be printed before "
"another value when using the :keyword:`print` statement. Classes that are "
"trying to simulate a file object should also have a writable "
":attr:`softspace` attribute, which should be initialized to zero.  This will"
" be automatic for most classes implemented in Python (care may be needed for"
" objects that override attribute access); types implemented in C will have "
"to provide a writable :attr:`softspace` attribute."
msgstr ""

#: ../../library/stdtypes.rst:2653
msgid ""
"This attribute is not used to control the :keyword:`print` statement, but to"
" allow the implementation of :keyword:`print` to keep track of its internal "
"state."
msgstr ""

#: ../../library/stdtypes.rst:2661
msgid "memoryview type"
msgstr ""

#: ../../library/stdtypes.rst:2665
msgid ""
":class:`memoryview` objects allow Python code to access the internal data of"
" an object that supports the buffer protocol without copying.  Memory is "
"generally interpreted as simple bytes."
msgstr ""

#: ../../library/stdtypes.rst:2671
msgid ""
"Create a :class:`memoryview` that references *obj*.  *obj* must support the "
"buffer protocol.  Built-in objects that support the buffer protocol include "
":class:`str` and :class:`bytearray` (but not :class:`unicode`)."
msgstr ""

#: ../../library/stdtypes.rst:2675
msgid ""
"A :class:`memoryview` has the notion of an *element*, which is the atomic "
"memory unit handled by the originating object *obj*.  For many simple types "
"such as :class:`str` and :class:`bytearray`, an element is a single byte, "
"but other third-party types may expose larger elements."
msgstr ""

#: ../../library/stdtypes.rst:2680
msgid ""
"``len(view)`` returns the total number of elements in the memoryview, "
"*view*.  The :class:`~memoryview.itemsize` attribute will give you the "
"number of bytes in a single element."
msgstr ""

#: ../../library/stdtypes.rst:2684
msgid ""
"A :class:`memoryview` supports slicing to expose its data.  Taking a single "
"index will return a single element as a :class:`str` object.  Full slicing "
"will result in a subview::"
msgstr ""

#: ../../library/stdtypes.rst:2698
msgid ""
"If the object the memoryview is over supports changing its data, the "
"memoryview supports slice assignment::"
msgstr ""

#: ../../library/stdtypes.rst:2716
msgid "Notice how the size of the memoryview object cannot be changed."
msgstr ""

#: ../../library/stdtypes.rst:2718
msgid ":class:`memoryview` has two methods:"
msgstr ""

#: ../../library/stdtypes.rst:2722
msgid ""
"Return the data in the buffer as a bytestring (an object of class "
":class:`str`). ::"
msgstr ""

#: ../../library/stdtypes.rst:2731
msgid "Return the data in the buffer as a list of integers. ::"
msgstr ""

#: ../../library/stdtypes.rst:2736
msgid "There are also several readonly attributes available:"
msgstr "読み込み専用の属性もいくつか使えます:"

#: ../../library/stdtypes.rst:2740
msgid ""
"A string containing the format (in :mod:`struct` module style) for each "
"element in the view.  This defaults to ``'B'``, a simple bytestring."
msgstr ""

#: ../../library/stdtypes.rst:2745
msgid "The size in bytes of each element of the memoryview."
msgstr ""

#: ../../library/stdtypes.rst:2749
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the shape of the "
"memory as a N-dimensional array."
msgstr ""

#: ../../library/stdtypes.rst:2754
msgid ""
"An integer indicating how many dimensions of a multi-dimensional array the "
"memory represents."
msgstr "メモリが表す多次元配列が何次元かを示す整数です。"

#: ../../library/stdtypes.rst:2759
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the size in bytes to "
"access each element for each dimension of the array."
msgstr "配列のそれぞれの次元に対して、それぞれの要素にアクセスするのに必要なバイト数を表す、長さ :attr:`ndim` の整数のタプルです。"

#: ../../library/stdtypes.rst:2764
msgid "A bool indicating whether the memory is read only."
msgstr "メモリが読み込み専用かを表すブールです。"

#: ../../library/stdtypes.rst:2772
msgid "Context Manager Types"
msgstr "コンテキストマネージャ型"

#: ../../library/stdtypes.rst:2781
msgid ""
"Python's :keyword:`with` statement supports the concept of a runtime context"
" defined by a context manager.  This is implemented using two separate "
"methods that allow user-defined classes to define a runtime context that is "
"entered before the statement body is executed and exited when the statement "
"ends."
msgstr ""

#: ../../library/stdtypes.rst:2786
msgid ""
"The :dfn:`context management protocol` consists of a pair of methods that "
"need to be provided for a context manager object to define a runtime "
"context:"
msgstr ""

#: ../../library/stdtypes.rst:2792
msgid ""
"Enter the runtime context and return either this object or another object "
"related to the runtime context. The value returned by this method is bound "
"to the identifier in the :keyword:`as` clause of :keyword:`with` statements "
"using this context manager."
msgstr "実行時コンテキストに入り、このオブジェクトまたは他の実行時コンテキストに関連したオブジェクトを返します。このメソッドが返す値はこのコンテキストマネージャを使う :keyword:`with` 文の :keyword:`as` 節の識別子に束縛されます。"

#: ../../library/stdtypes.rst:2797
msgid ""
"An example of a context manager that returns itself is a file object. File "
"objects return themselves from __enter__() to allow :func:`open` to be used "
"as the context expression in a :keyword:`with` statement."
msgstr ""

#: ../../library/stdtypes.rst:2801
msgid ""
"An example of a context manager that returns a related object is the one "
"returned by :func:`decimal.localcontext`. These managers set the active "
"decimal context to a copy of the original decimal context and then return "
"the copy. This allows changes to be made to the current decimal context in "
"the body of the :keyword:`with` statement without affecting code outside the"
" :keyword:`with` statement."
msgstr "関連オブジェクトを返すコンテキストマネージャの例としては :func:`decimal.localcontext` が返すものがあります。このマネージャは、アクティブな小数コンテキストをオリジナルの小数コンテキストのコピーにセットして、そのコピーを返します。こうすることで、 :keyword:`with` 文の本体の内部で、外側のコードに影響を与えずに、 現在の小数コンテキストを変更できます。"

#: ../../library/stdtypes.rst:2811
msgid ""
"Exit the runtime context and return a Boolean flag indicating if any "
"exception that occurred should be suppressed. If an exception occurred while"
" executing the body of the :keyword:`with` statement, the arguments contain "
"the exception type, value and traceback information. Otherwise, all three "
"arguments are ``None``."
msgstr "実行時コンテキストから抜け、例外 (がもし起こっていたとしても) を抑制することを示すブール値フラグを返します。 :keyword:`with` 文の本体を実行中に例外が起こったならば、引数にはその例外の型と値とトレースバック情報を渡します。そうでなければ、引数は全て ``None`` です。"

#: ../../library/stdtypes.rst:2816
msgid ""
"Returning a true value from this method will cause the :keyword:`with` "
"statement to suppress the exception and continue execution with the "
"statement immediately following the :keyword:`with` statement. Otherwise the"
" exception continues propagating after this method has finished executing. "
"Exceptions that occur during execution of this method will replace any "
"exception that occurred in the body of the :keyword:`with` statement."
msgstr "このメソッドから真値が返されると :keyword:`with` 文は例外の発生を抑え、 :keyword:`with` 文の直後の文に実行を続けます。そうでなければ、このメソッドの実行を終えると例外の伝播が続きます。このメソッドの実行中に起きた例外は :keyword:`with` 文の本体の実行中に起こった例外を置き換えてしまいます。"

#: ../../library/stdtypes.rst:2823
msgid ""
"The exception passed in should never be reraised explicitly - instead, this "
"method should return a false value to indicate that the method completed "
"successfully and does not want to suppress the raised exception. This allows"
" context management code (such as ``contextlib.nested``) to easily detect "
"whether or not an :meth:`__exit__` method has actually failed."
msgstr "渡された例外を明示的に再送出すべきではありません。その代わりに、このメソッドが偽の値を返すことでメソッドの正常終了と送出された例外を抑制しないことを伝えるべきです。このようにすれば (``contextlib.nested`` のような) コンテキストマネージャは :meth:`__exit__` メソッド自体が失敗したのかどうかを簡単に見分けることができます。"

#: ../../library/stdtypes.rst:2829
msgid ""
"Python defines several context managers to support easy thread "
"synchronisation, prompt closure of files or other objects, and simpler "
"manipulation of the active decimal arithmetic context. The specific types "
"are not treated specially beyond their implementation of the context "
"management protocol. See the :mod:`contextlib` module for some examples."
msgstr "Python は幾つかのコンテキストマネージャを、易しいスレッド同期・ファイルなどのオブジェクトの即時クローズ・単純化されたアクティブな小数算術コンテキストのサポートのために用意しています。各型はコンテキスト管理プロトコルを実装しているという以上の特別の取り扱いを受けるわけではありません。例については :mod:`contextlib` モジュールを参照下さい。"

#: ../../library/stdtypes.rst:2835
msgid ""
"Python's :term:`generator`\\s and the ``contextlib.contextmanager`` "
":term:`decorator` provide a convenient way to implement these protocols.  If"
" a generator function is decorated with the ``contextlib.contextmanager`` "
"decorator, it will return a context manager implementing the necessary "
":meth:`__enter__` and :meth:`__exit__` methods, rather than the iterator "
"produced by an undecorated generator function."
msgstr ""

#: ../../library/stdtypes.rst:2842
msgid ""
"Note that there is no specific slot for any of these methods in the type "
"structure for Python objects in the Python/C API. Extension types wanting to"
" define these methods must provide them as a normal Python accessible "
"method. Compared to the overhead of setting up the runtime context, the "
"overhead of a single class dictionary lookup is negligible."
msgstr "これらのメソッドのために Python/C API の中の Python オブジェクトの型構造体に特別なスロットが作られたわけではないことに注意してください。これらのメソッドを定義したい拡張型はこれらを通常の Python からアクセスできるメソッドとして提供しなければなりません。実行時コンテキストを準備するオーバーヘッドに比べたら、一回のクラス辞書の探索のオーバーヘッドは無視できます。"

#: ../../library/stdtypes.rst:2852
msgid "Other Built-in Types"
msgstr "その他の組み込み型"

#: ../../library/stdtypes.rst:2854
msgid ""
"The interpreter supports several other kinds of objects. Most of these "
"support only one or two operations."
msgstr "インタプリタは、その他いくつかの種類のオブジェクトをサポートします。これらのほとんどは 1 または 2 つの演算だけをサポートします。"

#: ../../library/stdtypes.rst:2861
msgid "Modules"
msgstr "モジュール"

#: ../../library/stdtypes.rst:2863
msgid ""
"The only special operation on a module is attribute access: ``m.name``, "
"where *m* is a module and *name* accesses a name defined in *m*'s symbol "
"table. Module attributes can be assigned to.  (Note that the "
":keyword:`import` statement is not, strictly speaking, an operation on a "
"module object; ``import foo`` does not require a module object named *foo* "
"to exist, rather it requires an (external) *definition* for a module named "
"*foo* somewhere.)"
msgstr "モジュールに対する唯一の特殊な演算は属性アクセス: ``m.name`` です。ここで *m* はモジュールで、 *name* は *m* のシンボルテーブル上に定義された名前にアクセスします。モジュール属性に代入することもできます。 (なお、:keyword:`import` 文は、厳密にいえば、モジュールオブジェクトに対する演算ではありません; ``import foo`` は *foo* と名づけられたモジュールオブジェクトの存在を必要とはせず、*foo* と名づけられたモジュールの (外部の) *定義* を必要とします。)"

#: ../../library/stdtypes.rst:2870
msgid ""
"A special attribute of every module is :attr:`~object.__dict__`. This is the"
" dictionary containing the module's symbol table. Modifying this dictionary "
"will actually change the module's symbol table, but direct assignment to the"
" :attr:`__dict__` attribute is not possible (you can write ``m.__dict__['a']"
" = 1``, which defines ``m.a`` to be ``1``, but you can't write ``m.__dict__ "
"= {}``).  Modifying :attr:`__dict__` directly is not recommended."
msgstr "全てのモジュールにある特殊属性が :attr:`~object.__dict__` です。これはモジュールのシンボルテーブルを含む辞書です。この辞書を書き換えると実際にモジュールのシンボルテーブルを変更することができますが、:attr:`__dict__` 属性を直接代入することはできません (``m.__dict__['a'] = 1`` と書いて ``m.a`` を ``1`` に定義することはできますが、``m.__dict__ = {}`` と書くことはできません)。 :attr:`__dict__` を直接書き換えることは推奨されません。"

#: ../../library/stdtypes.rst:2877
msgid ""
"Modules built into the interpreter are written like this: ``<module 'sys' "
"(built-in)>``.  If loaded from a file, they are written as ``<module 'os' "
"from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr "インタプリタ内に組み込まれたモジュールは、 ``<module 'sys' (built-in)>`` のように書かれます。ファイルから読み出された場合、 ``<module 'os' from '/usr/local/lib/pythonX.Y/os.pyc'>`` と書かれます。"

#: ../../library/stdtypes.rst:2885
msgid "Classes and Class Instances"
msgstr "クラスおよびクラスインスタンス"

#: ../../library/stdtypes.rst:2887
msgid "See :ref:`objects` and :ref:`class` for these."
msgstr "これらについては :ref:`objects` および :ref:`class` を参照下さい。"

#: ../../library/stdtypes.rst:2893
msgid "Functions"
msgstr "関数"

#: ../../library/stdtypes.rst:2895
msgid ""
"Function objects are created by function definitions.  The only operation on"
" a function object is to call it: ``func(argument-list)``."
msgstr "関数オブジェクトは関数定義によって生成されます。関数オブジェクトに対する唯一の操作は、それを呼び出すことです: ``func(argument-list)`` 。"

#: ../../library/stdtypes.rst:2898
msgid ""
"There are really two flavors of function objects: built-in functions and "
"user-defined functions.  Both support the same operation (to call the "
"function), but the implementation is different, hence the different object "
"types."
msgstr "関数オブジェクトには実際には二種類あります: 組み込み関数とユーザ定義関数です。どちらも同じ操作 (関数の呼び出し) をサポートしますが、実装は異なるので、オブジェクトの型も異なります。"

#: ../../library/stdtypes.rst:2902
msgid "See :ref:`function` for more information."
msgstr "詳細は、 :ref:`function` を参照下さい。"

#: ../../library/stdtypes.rst:2908
msgid "Methods"
msgstr "メソッド"

#: ../../library/stdtypes.rst:2912
msgid ""
"Methods are functions that are called using the attribute notation. There "
"are two flavors: built-in methods (such as :meth:`append` on lists) and "
"class instance methods.  Built-in methods are described with the types that "
"support them."
msgstr "メソッドは属性表記を使って呼び出される関数です。メソッドには二種類あります: (リストの :meth:`append` のような) 組み込みメソッドと、クラスインスタンスのメソッドです。組み込みメソッドは、それをサポートする型と一緒に記述されています。"

#: ../../library/stdtypes.rst:2917
msgid ""
"The implementation adds two special read-only attributes to class instance "
"methods: ``m.im_self`` is the object on which the method operates, and "
"``m.im_func`` is the function implementing the method.  Calling ``m(arg-1, "
"arg-2, ..., arg-n)`` is completely equivalent to calling "
"``m.im_func(m.im_self, arg-1, arg-2, ..., arg-n)``."
msgstr ""

#: ../../library/stdtypes.rst:2923
msgid ""
"Class instance methods are either *bound* or *unbound*, referring to whether"
" the method was accessed through an instance or a class, respectively.  When"
" a method is unbound, its ``im_self`` attribute will be ``None`` and if "
"called, an explicit ``self`` object must be passed as the first argument.  "
"In this case, ``self`` must be an instance of the unbound method's class (or"
" a subclass of that class), otherwise a :exc:`TypeError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:2930
msgid ""
"Like function objects, methods objects support getting arbitrary attributes."
" However, since method attributes are actually stored on the underlying "
"function object (``meth.im_func``), setting method attributes on either "
"bound or unbound methods is disallowed.  Attempting to set an attribute on a"
" method results in an :exc:`AttributeError` being raised.  In order to set a"
" method attribute, you need to explicitly set it on the underlying function "
"object::"
msgstr ""

#: ../../library/stdtypes.rst:2951 ../../library/stdtypes.rst:2979
msgid "See :ref:`types` for more information."
msgstr "詳細は、 :ref:`types` を参照下さい。"

#: ../../library/stdtypes.rst:2957
msgid "Code Objects"
msgstr "コードオブジェクト"

#: ../../library/stdtypes.rst:2965
msgid ""
"Code objects are used by the implementation to represent \"pseudo-compiled\""
" executable Python code such as a function body. They differ from function "
"objects because they don't contain a reference to their global execution "
"environment.  Code objects are returned by the built-in :func:`compile` "
"function and can be extracted from function objects through their "
":attr:`func_code` attribute. See also the :mod:`code` module."
msgstr ""

#: ../../library/stdtypes.rst:2976
msgid ""
"A code object can be executed or evaluated by passing it (instead of a "
"source string) to the :keyword:`exec` statement or the built-in :func:`eval`"
" function."
msgstr ""

#: ../../library/stdtypes.rst:2985
msgid "Type Objects"
msgstr "型オブジェクト"

#: ../../library/stdtypes.rst:2991
msgid ""
"Type objects represent the various object types.  An object's type is "
"accessed by the built-in function :func:`type`.  There are no special "
"operations on types.  The standard module :mod:`types` defines names for all"
" standard built-in types."
msgstr "型オブジェクトは様々なオブジェクト型を表します。オブジェクトの型は組み込み関数 :func:`type` でアクセスされます。型オブジェクトには特有の操作はありません。標準モジュール :mod:`types` には全ての組み込み型名が定義されています。"

#: ../../library/stdtypes.rst:2996
msgid "Types are written like this: ``<type 'int'>``."
msgstr ""

#: ../../library/stdtypes.rst:3002
msgid "The Null Object"
msgstr "ヌルオブジェクト"

#: ../../library/stdtypes.rst:3004
msgid ""
"This object is returned by functions that don't explicitly return a value.  "
"It supports no special operations.  There is exactly one null object, named "
"``None`` (a built-in name)."
msgstr ""

#: ../../library/stdtypes.rst:3008
msgid "It is written as ``None``."
msgstr "``None`` と書き表されます。"

#: ../../library/stdtypes.rst:3014
msgid "The Ellipsis Object"
msgstr "Ellipsis オブジェクト"

#: ../../library/stdtypes.rst:3016
msgid ""
"This object is used by extended slice notation (see :ref:`slicings`).  It "
"supports no special operations.  There is exactly one ellipsis object, named"
" :const:`Ellipsis` (a built-in name)."
msgstr ""

#: ../../library/stdtypes.rst:3020
msgid ""
"It is written as ``Ellipsis``.  When in a subscript, it can also be written "
"as ``...``, for example ``seq[...]``."
msgstr ""

#: ../../library/stdtypes.rst:3025
msgid "The NotImplemented Object"
msgstr "NotImplemented オブジェクト"

#: ../../library/stdtypes.rst:3027
msgid ""
"This object is returned from comparisons and binary operations when they are"
" asked to operate on types they don't support. See :ref:`comparisons` for "
"more information."
msgstr ""

#: ../../library/stdtypes.rst:3031
msgid "It is written as ``NotImplemented``."
msgstr "``NotImplemented`` と書き表されます。"

#: ../../library/stdtypes.rst:3035
msgid "Boolean Values"
msgstr "ブール値"

#: ../../library/stdtypes.rst:3037
msgid ""
"Boolean values are the two constant objects ``False`` and ``True``.  They "
"are used to represent truth values (although other values can also be "
"considered false or true).  In numeric contexts (for example when used as "
"the argument to an arithmetic operator), they behave like the integers 0 and"
" 1, respectively. The built-in function :func:`bool` can be used to convert "
"any value to a Boolean, if the value can be interpreted as a truth value "
"(see section :ref:`truth` above)."
msgstr "ブール値は二つの定数オブジェクト ``False`` および ``True`` です。これらは真理値を表すのに使われます (ただし他の値も偽や真とみなされます)。 数値処理のコンテキスト (例えば算術演算子の引数として使われた場合) では、これらはそれぞれ 0 および 1 と同様に振舞います。任意の値に対して、真理値と解釈できる場合、組み込み関数 :func:`bool` は値をブール値に変換するのに使われます (上述の :ref:`truth` の節を参照してください)。"

#: ../../library/stdtypes.rst:3050
msgid "They are written as ``False`` and ``True``, respectively."
msgstr "それぞれ ``False`` および ``True`` と書き表されます。"

#: ../../library/stdtypes.rst:3056
msgid "Internal Objects"
msgstr "内部オブジェクト"

#: ../../library/stdtypes.rst:3058
msgid ""
"See :ref:`types` for this information.  It describes stack frame objects, "
"traceback objects, and slice objects."
msgstr "この情報は :ref:`types` を参照下さい。スタックフレームオブジェクト、トレースバックオブジェクト、スライスオブジェクトについて記述されています。"

#: ../../library/stdtypes.rst:3065
msgid "Special Attributes"
msgstr "特殊属性"

#: ../../library/stdtypes.rst:3067
msgid ""
"The implementation adds a few special read-only attributes to several object"
" types, where they are relevant.  Some of these are not reported by the "
":func:`dir` built-in function."
msgstr "実装は、いくつかのオブジェクト型に対して、適切な場合には特殊な読み出し専用の属性を追加します。そのうちいくつかは :func:`dir` 組込み関数で報告されません。"

#: ../../library/stdtypes.rst:3074
msgid ""
"A dictionary or other mapping object used to store an object's (writable) "
"attributes."
msgstr "オブジェクトの (書き込み可能な) 属性を保存するために使われる辞書またはその他のマッピングオブジェクトです。"

#: ../../library/stdtypes.rst:3080 ../../library/stdtypes.rst:3087
msgid ""
"Use the built-in function :func:`dir` to get a list of an object's "
"attributes. This attribute is no longer available."
msgstr ""

#: ../../library/stdtypes.rst:3094
msgid "The class to which a class instance belongs."
msgstr "クラスインスタンスが属しているクラスです。"

#: ../../library/stdtypes.rst:3099
msgid "The tuple of base classes of a class object."
msgstr "クラスオブジェクトの基底クラスのタプルです。"

#: ../../library/stdtypes.rst:3104
msgid "The name of the class or type."
msgstr "クラスまたは型の名前です。"

#: ../../library/stdtypes.rst:3107
msgid ""
"The following attributes are only supported by :term:`new-style class`\\ es."
msgstr ""

#: ../../library/stdtypes.rst:3111
msgid ""
"This attribute is a tuple of classes that are considered when looking for "
"base classes during method resolution."
msgstr "この属性はメソッドの解決時に基底クラスを探索するときに考慮されるクラスのタプルです。"

#: ../../library/stdtypes.rst:3117
msgid ""
"This method can be overridden by a metaclass to customize the method "
"resolution order for its instances.  It is called at class instantiation, "
"and its result is stored in :attr:`~class.__mro__`."
msgstr "このメソッドは、メタクラスによって、そのインスタンスのメソッド解決の順序をカスタマイズするために、上書きされるかも知れません。このメソッドはクラスのインスタンス化時に呼ばれ、その結果は :attr:`~class.__mro__` に格納されます。"

#: ../../library/stdtypes.rst:3124
msgid ""
"Each new-style class keeps a list of weak references to its immediate "
"subclasses.  This method returns a list of all those references still alive."
" Example::"
msgstr ""

#: ../../library/stdtypes.rst:3133
msgid "Footnotes"
msgstr "注記"

#: ../../library/stdtypes.rst:3134
msgid ""
"Additional information on these special methods may be found in the Python "
"Reference Manual (:ref:`customization`)."
msgstr "これらの特殊なメソッドのさらなる情報は、 Python リファレンスマニュアル (:ref:`customization`) を参照下さい。"

#: ../../library/stdtypes.rst:3137
msgid ""
"As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``,"
" and similarly for tuples."
msgstr "この結果として、リスト ``[1, 2]`` は ``[1.0, 2.0]`` と等しいと見なされます。タプルの場合も同様です。"

#: ../../library/stdtypes.rst:3140
msgid "They must have since the parser can't tell the type of the operands."
msgstr "パーザが演算対象の型を識別できるようにするために、このような優先順位でなければならないのです。"

#: ../../library/stdtypes.rst:3142
msgid ""
"Cased characters are those with general category property being one of "
"\"Lu\" (Letter, uppercase), \"Ll\" (Letter, lowercase), or \"Lt\" (Letter, "
"titlecase)."
msgstr "大小文字の区別のある文字とは、一般カテゴリプロパティが \"Lu\" (Letter, uppercase (大文字))、 \"Ll\" (Letter, lowercase (小文字))、 \"Lt\" (Letter、titlecase (先頭が大文字)) のいずれかであるものです。"

#: ../../library/stdtypes.rst:3145
msgid ""
"To format only a tuple you should therefore provide a singleton tuple whose "
"only element is the tuple to be formatted."
msgstr "従って、一個のタプルだけをフォーマット出力したい場合には出力したいタプルを唯一の要素とする単一のタプルを *values* に与えなくてはなりません。"

#: ../../library/stdtypes.rst:3148
msgid ""
"The advantage of leaving the newline on is that returning an empty string is"
" then an unambiguous EOF indication.  It is also possible (in cases where it"
" might matter, for example, if you want to make an exact copy of a file "
"while scanning its lines) to tell whether the last line of a file ended in a"
" newline or not (yes this happens!)."
msgstr ""
