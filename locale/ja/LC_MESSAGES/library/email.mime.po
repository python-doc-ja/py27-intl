# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:29+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`email.mime`: Creating email and MIME objects from scratch"
msgstr ":mod:`email.mime`: ゼロからのメールと MIME オブジェクトの作成"

#: ../../library/email.mime.rst:8
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message object."
"  However you can also build a complete message structure from scratch, or "
"even individual :class:`~email.message.Message` objects by hand.  In fact, "
"you can also take an existing structure and add new "
":class:`~email.message.Message` objects, move them around, etc.  This makes "
"a very convenient interface for slicing-and-dicing MIME messages."
msgstr "ふつう、メッセージオブジェクト構造はファイルまたは何がしかのテキストをパーザに通すことで得られます。パーザは与えられたテキストを解析し、基底となる root のメッセージオブジェクトを返します。しかし、完全なメッセージオブジェクト構造を何もないところから作成することもまた可能です。個別の :class:`~email.message.Message` を手で作成することさえできます。実際には、すでに存在するメッセージオブジェクト構造をとってきて、そこに新たな :class:`~email.message.Message` オブジェクトを追加したり、あるものを別のところへ移動させたりできます。これは MIME メッセージを切ったりおろしたりするために非常に便利なインターフェイスを提供します。"

#: ../../library/email.mime.rst:16
msgid ""
"You can create a new object structure by creating "
":class:`~email.message.Message` instances, adding attachments and all the "
"appropriate headers manually.  For MIME messages though, the :mod:`email` "
"package provides some convenient subclasses to make things easier."
msgstr "新しいメッセージオブジェクト構造は :class:`~email.message.Message` インスタンスを作成することにより作れます。ここに添付ファイルやその他適切なものをすべて手で加えてやればよいのです。MIME メッセージの場合、 :mod:`email` パッケージはこれらを簡単におこなえるようにするためにいくつかの便利なサブクラスを提供しています。"

#: ../../library/email.mime.rst:21
msgid "Here are the classes:"
msgstr "以下がそのサブクラスです:"

#: ../../library/email.mime.rst:27
msgid "Module: :mod:`email.mime.base`"
msgstr "Module: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:29
msgid ""
"This is the base class for all the MIME-specific subclasses of "
":class:`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is"
" provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr "これはすべての :class:`~email.message.Message` の MIME 用サブクラスの基底となるクラスです。とくに :class:`MIMEBase` のインスタンスを直接作成することは (可能ではありますが) ふつうはしないでしょう。 :class:`MIMEBase` は単により特化された MIME 用サブクラスのための便宜的な基底クラスとして提供されています。"

#: ../../library/email.mime.rst:35
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. "
":mimetype:`text` or :mimetype:`image`), and *_subtype* is the :mailheader"
":`Content-Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  "
"*_params* is a parameter key/value dictionary and is passed directly to "
":meth:`Message.add_header <email.message.Message.add_header>`."
msgstr ""

#: ../../library/email.mime.rst:41
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ":class:`MIMEBase` クラスはつねに (*_maintype* 、 *_subtype* 、および *_params* にもとづいた) :mailheader:`Content-Type` ヘッダと、 :mailheader:`MIME-Version` ヘッダ (必ず ``1.0`` に設定される) を追加します。"

#: ../../library/email.mime.rst:50
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Module: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:52
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the "
":meth:`~email.message.Message.attach` method, which only makes sense for "
":mimetype:`multipart` messages.  If :meth:`~email.message.Message.attach` is"
" called, a :exc:`~email.errors.MultipartConversionError` exception is "
"raised."
msgstr ""

#: ../../library/email.mime.rst:66
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Module: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:68
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of "
":mimetype:`multipart/_subtype` will be added to the message object.  A "
":mailheader:`MIME-Version` header will also be added."
msgstr ":class:`~email.mime.base.MIMEBase` のサブクラスで、これは :mimetype:`multipart` 形式の MIME メッセージのための中間的な基底クラスです。オプション引数 *_subtype* はデフォルトでは :mimetype:`mixed` になっていますが、そのメッセージの副形式 (subtype) を指定するのに使うことができます。メッセージオブジェクトには :mimetype:`multipart/_subtype` という値をもつ :mailheader:`Content-Type` ヘッダとともに、 :mailheader:`MIME-Version` ヘッダが追加されるでしょう。"

#: ../../library/email.mime.rst:75
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr "オプション引数 *boundary* は multipart の境界文字列です。これが ``None`` の場合 (デフォルト)、境界は必要に応じて計算されます（例えばメッセージがシリアライズされるときなど）。"

#: ../../library/email.mime.rst:79
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach "
"<email.message.Message.attach>` method."
msgstr ""

#: ../../library/email.mime.rst:84
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ":mailheader:`Content-Type` ヘッダに対する追加のパラメータはキーワード引数 *_params* を介して取得あるいは設定されます。これはキーワード辞書になっています。"

#: ../../library/email.mime.rst:95
msgid "Module: :mod:`email.mime.application`"
msgstr "Module: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:97
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEApplication` class is used to represent MIME message objects of "
"major type :mimetype:`application`.  *_data* is a string containing the raw "
"byte data.  Optional *_subtype* specifies the MIME subtype and defaults to "
":mimetype:`octet-stream`."
msgstr ":class:`~email.mime.nonmultipart.MIMENonMultipart` のサブクラスである :class:`MIMEApplication` クラスは MIME メッセージオブジェクトのメジャータイプ :mimetype:`application` を表します。 *_data* は生のバイト列が入った文字列です。オプション引数 *_subtype* は MIME のサブタイプを設定します。サブタイプのデフォルトは :mimetype:`octet-stream` です。"

#: ../../library/email.mime.rst:103
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:113 ../../library/email.mime.rst:143
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* は基底クラスのコンストラクタにそのまま渡されます。"

#: ../../library/email.mime.rst:122
msgid "Module: :mod:`email.mime.audio`"
msgstr "Module: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:124
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEAudio` class is used to create MIME message objects of major "
"type :mimetype:`audio`. *_audiodata* is a string containing the raw audio "
"data.  If this data can be decoded by the standard Python module "
":mod:`sndhdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"audio subtype via the *_subtype* parameter.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:133
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:150
msgid "Module: :mod:`email.mime.image`"
msgstr "Module: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:152
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEImage` class is used to create MIME message objects of major "
"type :mimetype:`image`. *_imagedata* is a string containing the raw image "
"data.  If this data can be decoded by the standard Python module "
":mod:`imghdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"image subtype via the *_subtype* parameter.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:161
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:171
msgid ""
"*_params* are passed straight through to the "
":class:`~email.mime.base.MIMEBase` constructor."
msgstr "*_params* は :class:`~email.mime.base.MIMEBase` コンストラクタに直接渡されます。"

#: ../../library/email.mime.rst:179
msgid "Module: :mod:`email.mime.message`"
msgstr "Module: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:181
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEMessage` class is used to create MIME objects of main type "
":mimetype:`message`. *_msg* is used as the payload, and must be an instance "
"of class :class:`~email.message.Message` (or a subclass thereof), otherwise "
"a :exc:`TypeError` is raised."
msgstr ":class:`MIMEMessage` クラスは :class:`~email.mime.nonmultipart.MIMENonMultipart` のサブクラスで、主形式 (maintype) が :mimetype:`message` の MIME オブジェクトを作成するのに使われます。ペイロードとして使われるメッセージは *_msg* になります。これは :class:`~email.message.Message` クラス (あるいはそのサブクラス) のインスタンスでなければいけません。そうでない場合、この関数は :exc:`TypeError` を発生します。"

#: ../../library/email.mime.rst:187
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to "
":mimetype:`rfc822`."
msgstr "オプション引数 *_subtype* はそのメッセージの副形式 (subtype) を設定します。デフォルトではこれは :mimetype:`rfc822` になっています。"

#: ../../library/email.mime.rst:195
msgid "Module: :mod:`email.mime.text`"
msgstr "Module: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:197
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEText` class is used to create MIME objects of major type "
":mimetype:`text`. *_text* is the string for the payload.  *_subtype* is the "
"minor type and defaults to :mimetype:`plain`.  *_charset* is the character "
"set of the text and is passed as a parameter to the "
":class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it defaults "
"to ``us-ascii``.  If *_text* is unicode, it is encoded using the "
"*output_charset* of *_charset*, otherwise it is used as-is."
msgstr ""

#: ../../library/email.mime.rst:206
msgid ""
"The previously deprecated *_encoding* argument has been removed.  Content "
"Transfer Encoding now happens implicitly based on the *_charset* argument."
msgstr ""

#: ../../library/email.mime.rst:211
msgid ""
"Unless the ``_charset`` parameter is explicitly set to ``None``, the "
"MIMEText object created will have both a :mailheader:`Content-Type` header "
"with a ``charset`` parameter, and a :mailheader:`Content-Transfer-Endcoding`"
" header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-"
"Transfer-Encoding`` header, after which a ``set_payload`` call will "
"automatically encode the new payload (and add a new :mailheader:`Content-"
"Transfer-Encoding` header)."
msgstr ""
