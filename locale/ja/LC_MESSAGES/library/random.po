# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:14+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ":mod:`random` --- 擬似乱数を生成する"

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**ソースコード:** :source:`Lib/random.py`"

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr "このモジュールでは様々な分布をもつ擬似乱数生成器を実装しています。"

#: ../../library/random.rst:14
msgid ""
"For integers, uniform selection from a range. For sequences, uniform "
"selection of a random element, a function to generate a random permutation "
"of a list in-place, and a function for random sampling without replacement."
msgstr ""

#: ../../library/random.rst:18
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian),"
" lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr "実数用としては、一様分布、正規分布 (ガウス分布)、対数正規分布、負の指数分布、ガンマおよびベータ分布を計算する関数があります。角度分布の生成用には、フォンミーゼス分布が利用できます。"

#: ../../library/random.rst:22
msgid ""
"Almost all module functions depend on the basic function :func:`random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0)."
"  Python uses the Mersenne Twister as the core generator.  It produces "
"53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr "ほとんど全てのモジュール関数は、基礎となる関数 :func:`random` に依存します。この関数はランダムな浮動小数点数を半開区間 [0.0, 1.0) から一様に生成します。Python は中心となる乱数生成器としてメルセンヌツイスタを使います。これは 53 ビット精度の浮動小数点を生成し、周期は 2\\*\\*19937-1 です、本体は C で実装されていて、高速でスレッドセーフです。メルセンヌツイスタは、現存する中で、最も大規模にテストされた乱数生成器のひとつです。しかし、完全に決定論的であるため、この乱数生成器は全ての目的に合致しているわけではなく、暗号化の目的には全く向いていません。"

#: ../../library/random.rst:31
msgid ""
"The functions supplied by this module are actually bound methods of a hidden"
" instance of the :class:`random.Random` class.  You can instantiate your own"
" instances of :class:`Random` to get generators that don't share state.  "
"This is especially useful for multi-threaded programs, creating a different "
"instance of :class:`Random` for each thread, and using the :meth:`jumpahead`"
" method to make it likely that the generated sequences seen by each thread "
"don't overlap."
msgstr ""

#: ../../library/random.rst:38
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the "
":meth:`random`, :meth:`seed`, :meth:`getstate`, :meth:`setstate` and "
":meth:`jumpahead` methods. Optionally, a new generator can supply a "
":meth:`getrandbits` method --- this allows :meth:`randrange` to produce "
"selections over an arbitrarily large range."
msgstr ""

#: ../../library/random.rst:44
msgid "the :meth:`getrandbits` method."
msgstr ""

#: ../../library/random.rst:47
msgid ""
"As an example of subclassing, the :mod:`random` module provides the "
":class:`WichmannHill` class that implements an alternative generator in pure"
" Python.  The class provides a backward compatible way to reproduce results "
"from earlier versions of Python, which used the Wichmann-Hill algorithm as "
"the core generator.  Note that this Wichmann-Hill generator can no longer be"
" recommended: its period is too short by contemporary standards, and the "
"sequence generated is known to fail some stringent randomness tests.  See "
"the references below for a recent variant that repairs these flaws."
msgstr ""

#: ../../library/random.rst:56
msgid "MersenneTwister replaced Wichmann-Hill as the default generator."
msgstr ""

#: ../../library/random.rst:59
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which"
" uses the system function :func:`os.urandom` to generate random numbers from"
" sources provided by the operating system."
msgstr ":mod:`random` モジュールは :class:`SystemRandom` クラスも提供していて、このクラスは OS が提供している乱数発生源を利用して乱数を生成するシステム関数 :func:`os.urandom` を使うものです。"

#: ../../library/random.rst:65
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  Use :func:`os.urandom` or :class:`SystemRandom` if you require a "
"cryptographically secure pseudo-random number generator."
msgstr "このモジュールの擬似乱数生成器はセキュリティ上の手段に使うべきではありません。暗号学的にセキュアな疑似乱数生成器が必要なら、 :func:`os.urandom` や :class:`SystemRandom` を使ってください。"

#: ../../library/random.rst:70
msgid "Bookkeeping functions:"
msgstr "保守(bookkeeping)関数:"

#: ../../library/random.rst:75
msgid ""
"Initialize the basic random number generator. Optional argument *x* can be "
"any :term:`hashable` object. If *x* is omitted or ``None``, current system "
"time is used; current system time is also used to initialize the generator "
"when the module is first imported.  If randomness sources are provided by "
"the operating system, they are used instead of the system time (see the "
":func:`os.urandom` function for details on availability)."
msgstr ""

#: ../../library/random.rst:82
msgid "formerly, operating system resources were not used."
msgstr ""

#: ../../library/random.rst:87
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr "乱数生成器の現在の内部状態を記憶したオブジェクトを返します。このオブジェクトを :func:`setstate` に渡して内部状態を復帰することができます。"

#: ../../library/random.rst:92
msgid ""
"State values produced in Python 2.6 cannot be loaded into earlier versions."
msgstr ""

#: ../../library/random.rst:98
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it"
" was at the time :func:`getstate` was called."
msgstr "*state* は予め :func:`getstate` を呼び出して得ておかなくてはなりません。 :func:`setstate` は :func:`getstate` が呼び出された時の乱数生成器の内部状態を復帰します。"

#: ../../library/random.rst:107
msgid ""
"Change the internal state to one different from and likely far away from the"
" current state.  *n* is a non-negative integer which is used to scramble the"
" current state vector.  This is most useful in multi-threaded programs, in "
"conjunction with multiple instances of the :class:`Random` class: "
":meth:`setstate` or :meth:`seed` can be used to force all instances into the"
" same internal state, and then :meth:`jumpahead` can be used to force the "
"instances' states far apart."
msgstr ""

#: ../../library/random.rst:117
msgid ""
"Instead of jumping to a specific state, *n* steps ahead, ``jumpahead(n)`` "
"jumps to another state likely to be separated by many steps."
msgstr ""

#: ../../library/random.rst:124
msgid ""
"Returns a python :class:`long` int with *k* random bits. This method is "
"supplied with the MersenneTwister generator and some other generators may "
"also provide it as an optional part of the API. When available, "
":meth:`getrandbits` enables :meth:`randrange` to handle arbitrarily large "
"ranges."
msgstr ""

#: ../../library/random.rst:131
msgid "Functions for integers:"
msgstr "整数用の関数:"

#: ../../library/random.rst:137
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr "``range(start, stop, step)`` からランダムに選ばれた要素を返します。この関数は ``choice(range(start, stop, step))`` と等価ですが、実際には range オブジェクトを生成しません。"

#: ../../library/random.rst:146
msgid "Return a random integer *N* such that ``a <= N <= b``."
msgstr ""

#: ../../library/random.rst:148
msgid "Functions for sequences:"
msgstr "シーケンス用の関数:"

#: ../../library/random.rst:153
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr "空でないシーケンス *seq* からランダムに要素を返します。 *seq* が空のときは、 :exc:`IndexError` が送出されます。"

#: ../../library/random.rst:159
msgid ""
"Shuffle the sequence *x* in place. The optional argument *random* is a "
"0-argument function returning a random float in [0.0, 1.0); by default, this"
" is the function :func:`random`."
msgstr "シーケンス *x* をインプレースに混ぜます。オプションの引数 *random* は、引数を持たず、 [0.0, 1.0) のランダムな浮動小数点数を返すような関数です; 標準では、これは関数 :func:`random` です。"

#: ../../library/random.rst:163
msgid ""
"Note that for even rather small ``len(x)``, the total number of permutations"
" of *x* is larger than the period of most random number generators; this "
"implies that most permutations of a long sequence can never be generated."
msgstr "やや小さい ``len(x)`` であっても、*x* の順列の総数はほとんどの乱数生成器の周期よりも大きくなるので注意してください; このことは長いシーケンスに対してはほとんどの順列は生成されないことを意味します。"

#: ../../library/random.rst:170
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence. Used for random sampling without replacement."
msgstr ""

#: ../../library/random.rst:175
msgid ""
"Returns a new list containing elements from the population while leaving the"
" original population unchanged.  The resulting list is in selection order so"
" that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr "母集団自体を変更せずに、母集団内の要素を含む新たなリストを返します。返されたリストは選択された順に並んでいるので、このリストの部分スライスもランダムなサンプルになります。これにより、くじの当選者 (サンプル) を1等賞と2等賞（の部分スライス）に分けることも可能です。"

#: ../../library/random.rst:181
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in"
" the sample."
msgstr "母集団の要素はハッシュ可能 (:term:`hashable`) でなくても、ユニークでなくても、かまいません。母集団が繰り返しを含む場合、出現するそれぞれがサンプルに選択されえます。"

#: ../../library/random.rst:184
msgid ""
"To choose a sample from a range of integers, use an :func:`xrange` object as"
" an argument.  This is especially fast and space efficient for sampling from"
" a large population:  ``sample(xrange(10000000), 60)``."
msgstr ""

#: ../../library/random.rst:188
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr "以下の関数は特定の実数値分布を生成します。関数の引数の名前は、一般的な数学の慣例で使われている分布の公式の対応する変数から取られています; これらの公式のほとんどはどんな統計学のテキストにも載っています。"

#: ../../library/random.rst:196
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr "範囲 [0.0, 1.0) の次のランダムな浮動小数点数を返します。"

#: ../../library/random.rst:201
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr "``a <= b`` であれば ``a <= N <= b``、``b < a`` であれば ``b <= N <= a`` であるようなランダムな浮動小数点数 *N* を返します。"

#: ../../library/random.rst:204
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr "端点の値 ``b`` が範囲に含まれるかどうかは、等式 ``a + (b-a) * random()`` における浮動小数点の丸めに依存します。"

#: ../../library/random.rst:210
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and"
" with the specified *mode* between those bounds.  The *low* and *high* "
"bounds default to zero and one.  The *mode* argument defaults to the "
"midpoint between the bounds, giving a symmetric distribution."
msgstr "``low <= N <= high`` でありこれら境界値の間に指定された最頻値 *mode* を持つようなランダムな浮動小数点数 *N* を返します。境界 *low* と *high* のデフォルトは 0 と 1 です。最頻値 *mode* 引数のデフォルトは両境界値の中点になり、対称な分布を与えます。"

#: ../../library/random.rst:220
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr "ベータ分布です。引数の満たすべき条件は ``alpha > 0`` および ``beta > 0`` です。範囲 0 から 1 の値を返します。"

#: ../../library/random.rst:226
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a"
" reserved word in Python.)  Returned values range from 0 to positive "
"infinity if *lambd* is positive, and from negative infinity to 0 if *lambd* "
"is negative."
msgstr "指数分布です。*lambd* は平均にしたい値の逆数です。(この引数は \"lambda\" と呼ぶべきなのですが、Python の予約語なので使えません。) 返される値の範囲は *lambd* が正なら 0 から正の無限大、*lambd* が負なら負の無限大から 0 です。"

#: ../../library/random.rst:235
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr "ガンマ分布です。(ガンマ関数 *ではありません* ！)  引数の満たすべき条件は ``alpha > 0`` および ``beta > 0`` です。"

#: ../../library/random.rst:238
msgid "The probability distribution function is::"
msgstr "確率分布関数は::"

#: ../../library/random.rst:247
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr "ガウス分布です。 *mu* は平均であり、 *sigma* は標準偏差です。この関数は後で定義する関数 :func:`normalvariate` より少しだけ高速です。"

#: ../../library/random.rst:254
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr "対数正規分布です。この分布を自然対数を用いた分布にした場合、平均 *mu* で標準偏差 *sigma* の正規分布になります。*mu* は任意の値を取ることができ、*sigma* はゼロより大きくなければなりません。"

#: ../../library/random.rst:262
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr "正規分布です。*mu* は平均で、*sigma* は標準偏差です。"

#: ../../library/random.rst:267
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr "*mu* は平均の角度で、0 から 2\\*\\ *pi* までのラジアンで表されます。*kappa* は濃度パラメタで、ゼロ以上でなければなりません。*kappa* がゼロに等しい場合、この分布は範囲 0 から 2\\*\\ *pi* の一様でランダムな角度の分布に退化します。"

#: ../../library/random.rst:275
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "パレート分布です。*alpha* は形状パラメタです。"

#: ../../library/random.rst:280
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr "ワイブル分布です。*alpha* は尺度パラメタで、*beta* は形状パラメタです。"

#: ../../library/random.rst:284
msgid "Alternative Generators:"
msgstr ""

#: ../../library/random.rst:288
msgid ""
"Class that implements the Wichmann-Hill algorithm as the core generator. Has"
" all of the same methods as :class:`Random` plus the :meth:`whseed` method "
"described below.  Because this class is implemented in pure Python, it is "
"not threadsafe and may require locks between calls.  The period of the "
"generator is 6,953,607,871,644 which is small enough to require care that "
"two independent random sequences do not overlap."
msgstr ""

#: ../../library/random.rst:298
msgid ""
"This is obsolete, supplied for bit-level compatibility with versions of "
"Python prior to 2.1. See :func:`seed` for details.  :func:`whseed` does not "
"guarantee that distinct integer arguments yield distinct internal states, "
"and can yield no more than about 2\\*\\*24 distinct internal states in all."
msgstr ""

#: ../../library/random.rst:306
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state and sequences are not reproducible."
" Accordingly, the :meth:`seed` and :meth:`jumpahead` methods have no effect "
"and are ignored. The :meth:`getstate` and :meth:`setstate` methods raise "
":exc:`NotImplementedError` if called."
msgstr ""

#: ../../library/random.rst:315
msgid "Examples of basic usage::"
msgstr ""

#: ../../library/random.rst:340
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."
msgstr "M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator\", ACM Transactions on Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."

#: ../../library/random.rst:344
msgid ""
"Wichmann, B. A. & Hill, I. D., \"Algorithm AS 183: An efficient and portable"
" pseudo-random number generator\", Applied Statistics 31 (1982) 188-190."
msgstr ""

#: ../../library/random.rst:347
msgid ""
"`Complementary-Multiply-with-Carry recipe "
"<http://code.activestate.com/recipes/576707/>`_ for a compatible alternative"
" random number generator with a long period and comparatively simple update "
"operations."
msgstr "`Complementary-Multiply-with-Carry recipe <http://code.activestate.com/recipes/576707/>`_  長い周期と比較的シンプルな更新操作を備えた互換性のある別の乱数生成器。"
