# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-11-28 19:24+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/struct.rst:3
msgid ":mod:`struct` --- Interpret strings as packed binary data"
msgstr ""

#: ../../library/struct.rst:12
msgid ""
"This module performs conversions between Python values and C structs "
"represented as Python strings.  This can be used in handling binary data "
"stored in files or from network connections, among other sources.  It uses "
":ref:`struct-format-strings` as compact descriptions of the layout of the C "
"structs and the intended conversion to/from Python values."
msgstr ""

#: ../../library/struct.rst:20
msgid ""
"By default, the result of packing a given C struct includes pad bytes in "
"order to maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  This behavior is chosen so "
"that the bytes of a packed struct correspond exactly to the layout in memory"
" of the corresponding C struct.  To handle platform-independent data formats"
" or omit implicit pad bytes, use ``standard`` size and alignment instead of "
"``native`` size and alignment: see :ref:`struct-alignment` for details."
msgstr "デフォルトでは、与えられた C の構造体をパックする際に、関連する C データ型を適切にアラインメント(alignment)するために数バイトのパディングを行うことがあります。この挙動が選択されたのは、パックされた構造体のバイト表現を対応する C 構造体のメモリレイアウトに正確に対応させるためです。プラットフォーム独立のデータフォーマットを扱ったり、隠れたパディングを排除したりするには、サイズ及びアラインメントとして ``native`` の代わりに ``standard`` を使うようにします: 詳しくは :ref:`struct-alignment` を参照して下さい。"

#: ../../library/struct.rst:29
msgid "Functions and Exceptions"
msgstr "関数と例外"

#: ../../library/struct.rst:31
msgid "The module defines the following exception and functions:"
msgstr "このモジュールは以下の例外と関数を定義しています:"

#: ../../library/struct.rst:36
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr "様々な状況で送出された例外です; 引数は何が問題かを記述する文字列です。"

#: ../../library/struct.rst:42
msgid ""
"Return a string containing the values ``v1, v2, ...`` packed according to "
"the given format.  The arguments must match the values required by the "
"format exactly."
msgstr ""

#: ../../library/struct.rst:49
msgid ""
"Pack the values ``v1, v2, ...`` according to the given format, write the "
"packed bytes into the writable *buffer* starting at *offset*. Note that the "
"offset is a required argument."
msgstr ""

#: ../../library/struct.rst:58
msgid ""
"Unpack the string (presumably packed by ``pack(fmt, ...)``) according to the"
" given format.  The result is a tuple even if it contains exactly one item. "
"The string must contain exactly the amount of data required by the format "
"(``len(string)`` must equal ``calcsize(fmt)``)."
msgstr ""

#: ../../library/struct.rst:66
msgid ""
"Unpack the *buffer* according to the given format. The result is a tuple "
"even if it contains exactly one item. The *buffer* must contain at least the"
" amount of data required by the format (``len(buffer[offset:])`` must be at "
"least ``calcsize(fmt)``)."
msgstr ""

#: ../../library/struct.rst:76
msgid ""
"Return the size of the struct (and hence of the string) corresponding to the"
" given format."
msgstr ""

#: ../../library/struct.rst:82
msgid "Format Strings"
msgstr "フォーマット文字列"

#: ../../library/struct.rst:84
msgid ""
"Format strings are the mechanism used to specify the expected layout when "
"packing and unpacking data.  They are built up from :ref:`format-"
"characters`, which specify the type of data being packed/unpacked.  In "
"addition, there are special characters for controlling the :ref:`struct-"
"alignment`."
msgstr "フォーマット文字列はデータをパックしたりアンパックしたりするときの期待されるレイアウトを指定するためのメカニズムです。文字列はパック/アンパックされるデータの型を指定する :ref:`format-characters` から組み立てられます。さらに、 :ref:`struct-alignment` を制御するための特殊文字もあります。"

#: ../../library/struct.rst:93
msgid "Byte Order, Size, and Alignment"
msgstr "バイトオーダ、サイズ、アラインメント"

#: ../../library/struct.rst:95
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to"
" the rules used by the C compiler)."
msgstr "デフォルトでは、C での型はマシンのネイティブ (native) の形式およびバイトオーダ (byte order) で表され、適切にアラインメント (alignment) するために、必要に応じて数バイトのパディングを行ってスキップします (これは C コンパイラが用いるルールに従います)。"

#: ../../library/struct.rst:99
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to"
" the following table:"
msgstr "これに代わって、フォーマット文字列の最初の文字を使って、バイトオーダやサイズ、アラインメントを指定することができます。指定できる文字を以下のテーブルに示します:"

#: ../../library/struct.rst:104
msgid "Character"
msgstr "文字"

#: ../../library/struct.rst:104
msgid "Byte order"
msgstr "バイトオーダ"

#: ../../library/struct.rst:104
msgid "Size"
msgstr "サイズ"

#: ../../library/struct.rst:104
msgid "Alignment"
msgstr "アラインメント"

#: ../../library/struct.rst:106
msgid "``@``"
msgstr "``@``"

#: ../../library/struct.rst:106 ../../library/struct.rst:106
#: ../../library/struct.rst:106 ../../library/struct.rst:108
msgid "native"
msgstr "native"

#: ../../library/struct.rst:108
msgid "``=``"
msgstr "``=``"

#: ../../library/struct.rst:108 ../../library/struct.rst:110
#: ../../library/struct.rst:112 ../../library/struct.rst:114
msgid "standard"
msgstr "standard"

#: ../../library/struct.rst:108 ../../library/struct.rst:110
#: ../../library/struct.rst:112 ../../library/struct.rst:114
msgid "none"
msgstr "none"

#: ../../library/struct.rst:110
msgid "``<``"
msgstr "``<``"

#: ../../library/struct.rst:110
msgid "little-endian"
msgstr "リトルエンディアン"

#: ../../library/struct.rst:112
msgid "``>``"
msgstr "``>``"

#: ../../library/struct.rst:112
msgid "big-endian"
msgstr "ビッグエンディアン"

#: ../../library/struct.rst:114
msgid "``!``"
msgstr "``!``"

#: ../../library/struct.rst:114
msgid "network (= big-endian)"
msgstr "network (= big-endian)"

#: ../../library/struct.rst:117
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr "フォーマット文字列の最初の文字が上のいずれかでない場合、``'@'`` であるとみなされます。"

#: ../../library/struct.rst:119
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86 and AMD64 (x86-64) are little-endian; "
"Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature "
"switchable endianness (bi-endian). Use ``sys.byteorder`` to check the "
"endianness of your system."
msgstr "ネイティブのバイトオーダはビッグエンディアンかリトルエンディアンで、ホスト計算機に依存します。例えば、Intel x86 および AMD64 (x86-64) はリトルエンディアンです。Motorola 68000 および PowerPC G5 はビッグエンディアンです。ARM および Intel Itanium はエンディアンを切り替えられる機能を備えています (バイエンディアン)。使っているシステムでのエンディアンは ``sys.byteorder`` を使って調べて下さい。"

#: ../../library/struct.rst:125
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr "ネイティブのサイズおよびアラインメントは C コンパイラの ``sizeof`` 式で決定されます。ネイティブのサイズおよびアラインメントはネイティブのバイトオーダと同時に使われます。"

#: ../../library/struct.rst:128
msgid ""
"Standard size depends only on the format character;  see the table in the "
":ref:`format-characters` section."
msgstr "標準のサイズはフォーマット文字だけで決まります。 :ref:`format-characters` の表を参照して下さい。"

#: ../../library/struct.rst:131
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order,"
" but the size and alignment of the latter is standardized."
msgstr "``'@'`` と ``'='`` の違いに注意してください: 両方ともネイティブのバイトオーダですが、後者のバイトサイズとアラインメントは標準のものに合わせてあります。"

#: ../../library/struct.rst:134
msgid ""
"The form ``'!'`` is available for those poor souls who claim they can't "
"remember whether network byte order is big-endian or little-endian."
msgstr "``'!'`` 表記法はネットワークバイトオーダがビッグエンディアンかリトルエンディアンか忘れちゃったという熱意に乏しい人向けに用意されています。"

#: ../../library/struct.rst:137
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use"
" the appropriate choice of ``'<'`` or ``'>'``."
msgstr "バイトオーダに関して、「(強制的にバイトスワップを行う)ネイティブの逆」を指定する方法はありません。``'<'`` または ``'>'`` のうちふさわしい方を選んでください。"

#: ../../library/struct.rst:140 ../../library/struct.rst:206
msgid "Notes:"
msgstr "注釈:"

#: ../../library/struct.rst:142
msgid ""
"Padding is only automatically added between successive structure members. No"
" padding is added at the beginning or the end of the encoded struct."
msgstr "パディングは構造体のメンバの並びの中にだけ自動で追加されます。最初や最後にパディングが追加されることはありません。"

#: ../../library/struct.rst:145
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<',"
" '>', '=', and '!'."
msgstr "ネイティブでないサイズおよびアラインメントが使われる場合にはパディングは行われません (たとえば '<', '>', '=', '!' を使った場合です)。"

#: ../../library/struct.rst:148
msgid ""
"To align the end of a structure to the alignment requirement of a particular"
" type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr "特定の型によるアラインメント要求に従うように構造体の末端をそろえるには、繰り返し回数をゼロにした特定の型でフォーマットを終端します。 :ref:`struct-examples` を参照して下さい。"

#: ../../library/struct.rst:156
msgid "Format Characters"
msgstr "フォーマット文字"

#: ../../library/struct.rst:158
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is"
" platform-dependent."
msgstr "フォーマット文字 (format character) は以下の意味を持っています; C と Python の間の変換では、値は正確に以下に指定された型でなくてはなりません: 「標準のサイズ」列は standard サイズ使用時にパックされた値が何バイトかを示します。つまり、フォーマット文字列が ``'<'``, ``'>'``, ``'!'``, ``'='`` のいずれかで始まっている場合のものです。native サイズ使用時にはパックされた値の大きさはプラットフォーム依存です。"

#: ../../library/struct.rst:166
msgid "Format"
msgstr "フォーマット"

#: ../../library/struct.rst:166
msgid "C Type"
msgstr "C の型"

#: ../../library/struct.rst:166
msgid "Python type"
msgstr "Python の型"

#: ../../library/struct.rst:166
msgid "Standard size"
msgstr "標準のサイズ"

#: ../../library/struct.rst:166
msgid "Notes"
msgstr "注釈"

#: ../../library/struct.rst:168
msgid "``x``"
msgstr "``x``"

#: ../../library/struct.rst:168
msgid "pad byte"
msgstr "パディングバイト"

#: ../../library/struct.rst:168
msgid "no value"
msgstr "値なし"

#: ../../library/struct.rst:170
msgid "``c``"
msgstr "``c``"

#: ../../library/struct.rst:170
msgid ":c:type:`char`"
msgstr ":c:type:`char`"

#: ../../library/struct.rst:170
msgid "string of length 1"
msgstr ""

#: ../../library/struct.rst:170 ../../library/struct.rst:172
#: ../../library/struct.rst:174 ../../library/struct.rst:176
msgid "1"
msgstr "1"

#: ../../library/struct.rst:172
msgid "``b``"
msgstr "``b``"

#: ../../library/struct.rst:172
msgid ":c:type:`signed char`"
msgstr ":c:type:`signed char`"

#: ../../library/struct.rst:172 ../../library/struct.rst:174
#: ../../library/struct.rst:178 ../../library/struct.rst:180
#: ../../library/struct.rst:182 ../../library/struct.rst:184
#: ../../library/struct.rst:186 ../../library/struct.rst:188
#: ../../library/struct.rst:190 ../../library/struct.rst:192
#: ../../library/struct.rst:203
msgid "integer"
msgstr "integer"

#: ../../library/struct.rst:172 ../../library/struct.rst:174
#: ../../library/struct.rst:178 ../../library/struct.rst:180
#: ../../library/struct.rst:182 ../../library/struct.rst:184
#: ../../library/struct.rst:186 ../../library/struct.rst:188
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/struct.rst:174
msgid "``B``"
msgstr "``B``"

#: ../../library/struct.rst:174
msgid ":c:type:`unsigned char`"
msgstr ":c:type:`unsigned char`"

#: ../../library/struct.rst:176
msgid "``?``"
msgstr "``?``"

#: ../../library/struct.rst:176
msgid ":c:type:`_Bool`"
msgstr ":c:type:`_Bool`"

#: ../../library/struct.rst:176
msgid "bool"
msgstr "真偽値型(bool)"

#: ../../library/struct.rst:176
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/struct.rst:178
msgid "``h``"
msgstr "``h``"

#: ../../library/struct.rst:178
msgid ":c:type:`short`"
msgstr ":c:type:`short`"

#: ../../library/struct.rst:178 ../../library/struct.rst:180
msgid "2"
msgstr "2"

#: ../../library/struct.rst:180
msgid "``H``"
msgstr "``H``"

#: ../../library/struct.rst:180
msgid ":c:type:`unsigned short`"
msgstr ":c:type:`unsigned short`"

#: ../../library/struct.rst:182
msgid "``i``"
msgstr "``i``"

#: ../../library/struct.rst:182
msgid ":c:type:`int`"
msgstr ":c:type:`int`"

#: ../../library/struct.rst:182 ../../library/struct.rst:184
#: ../../library/struct.rst:186 ../../library/struct.rst:188
#: ../../library/struct.rst:195
msgid "4"
msgstr "4"

#: ../../library/struct.rst:184
msgid "``I``"
msgstr "``I``"

#: ../../library/struct.rst:184
msgid ":c:type:`unsigned int`"
msgstr ":c:type:`unsigned int`"

#: ../../library/struct.rst:186
msgid "``l``"
msgstr "``l``"

#: ../../library/struct.rst:186
msgid ":c:type:`long`"
msgstr ":c:type:`long`"

#: ../../library/struct.rst:188
msgid "``L``"
msgstr "``L``"

#: ../../library/struct.rst:188
msgid ":c:type:`unsigned long`"
msgstr ":c:type:`unsigned long`"

#: ../../library/struct.rst:190
msgid "``q``"
msgstr "``q``"

#: ../../library/struct.rst:190
msgid ":c:type:`long long`"
msgstr ":c:type:`long long`"

#: ../../library/struct.rst:190 ../../library/struct.rst:192
#: ../../library/struct.rst:197
msgid "8"
msgstr "8"

#: ../../library/struct.rst:190 ../../library/struct.rst:192
msgid "\\(2), \\(3)"
msgstr "\\(2), \\(3)"

#: ../../library/struct.rst:192
msgid "``Q``"
msgstr "``Q``"

#: ../../library/struct.rst:192
msgid ":c:type:`unsigned long long`"
msgstr ":c:type:`unsigned long long`"

#: ../../library/struct.rst:195
msgid "``f``"
msgstr "``f``"

#: ../../library/struct.rst:195
msgid ":c:type:`float`"
msgstr ":c:type:`float`"

#: ../../library/struct.rst:195 ../../library/struct.rst:197
msgid "float"
msgstr "float"

#: ../../library/struct.rst:195 ../../library/struct.rst:197
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/struct.rst:197
msgid "``d``"
msgstr "``d``"

#: ../../library/struct.rst:197
msgid ":c:type:`double`"
msgstr ":c:type:`double`"

#: ../../library/struct.rst:199
msgid "``s``"
msgstr "``s``"

#: ../../library/struct.rst:199 ../../library/struct.rst:201
msgid ":c:type:`char[]`"
msgstr ":c:type:`char[]`"

#: ../../library/struct.rst:199 ../../library/struct.rst:201
msgid "string"
msgstr "string"

#: ../../library/struct.rst:201
msgid "``p``"
msgstr "``p``"

#: ../../library/struct.rst:203
msgid "``P``"
msgstr "``P``"

#: ../../library/struct.rst:203
msgid ":c:type:`void \\*`"
msgstr ":c:type:`void \\*`"

#: ../../library/struct.rst:203
msgid "\\(5), \\(3)"
msgstr ""

#: ../../library/struct.rst:209
msgid ""
"The ``'?'`` conversion code corresponds to the :c:type:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a "
":c:type:`char`. In standard mode, it is always represented by one byte."
msgstr "``'?'`` 変換コードは C99 で定義された :c:type:`_Bool` 型に対応します。その型が利用できない場合は、 :c:type:`char` で代用されます。標準モードでは常に1バイトで表現されます。"

#: ../../library/struct.rst:216
msgid ""
"The ``'q'`` and ``'Q'`` conversion codes are available in native mode only "
"if the platform C compiler supports C :c:type:`long long`, or, on Windows, "
":c:type:`__int64`.  They are always available in standard modes."
msgstr "変換コード ``'q'`` および ``'Q'`` は、ネイティブモードではプラットフォームの C コンパイラが C の :c:type:`long long` 型をサポートする場合、または Windows では :c:type:`__int64` をサポートする場合にのみ利用できます。標準モードでは常に利用できます。"

#: ../../library/struct.rst:223
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`__index__` method then that method is"
" called to convert the argument to an integer before packing.  If no "
":meth:`__index__` method exists, or the call to :meth:`__index__` raises "
":exc:`TypeError`, then the :meth:`__int__` method is tried.  However, the "
"use of :meth:`__int__` is deprecated, and will raise "
":exc:`DeprecationWarning`."
msgstr ""

#: ../../library/struct.rst:230
msgid "Use of the :meth:`__index__` method for non-integers is new in 2.7."
msgstr ""

#: ../../library/struct.rst:233
msgid ""
"Prior to version 2.7, not all integer conversion codes would use the "
":meth:`__int__` method to convert, and :exc:`DeprecationWarning` was raised "
"only for float arguments."
msgstr ""

#: ../../library/struct.rst:239
msgid ""
"For the ``'f'`` and ``'d'`` conversion codes, the packed representation uses"
" the IEEE 754 binary32 (for ``'f'``) or binary64 (for ``'d'``) format, "
"regardless of the floating-point format used by the platform."
msgstr "``'f'`` および ``'d'`` 変換コードについて、パックされた表現は IEEE 754 binary32 (``'f'`` の場合) または binary64 (``'d'`` の場合) フォーマットが、プラットフォームにおける浮動小数点数のフォーマットに関係なく使われます。"

#: ../../library/struct.rst:244
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte"
" order character ``'='`` chooses to use little- or big-endian ordering based"
" on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr "``'P'`` フォーマット文字はネイティブバイトオーダでのみ利用可能です (デフォルトのネットワークバイトオーダに設定するか、``'@'`` バイトオーダ指定文字を指定しなければなりません)。``'='`` を指定した場合、ホスト計算機のバイトオーダに基づいてリトルエンディアンとビッグエンディアンのどちらを使うかを決めます。struct モジュールはこの設定をネイティブのオーダ設定として解釈しないので、``'P'`` を使うことはできません。"

#: ../../library/struct.rst:251
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr "フォーマット文字の前に整数をつけ、繰り返し回数 (count) を指定することができます。例えば、フォーマット文字列 ``'4h'`` は ``'hhhh'`` と全く同じ意味です。"

#: ../../library/struct.rst:254
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr "フォーマット文字間の空白文字は無視されます; count とフォーマット文字の間にはスペースを入れてはいけません。"

#: ../../library/struct.rst:257
msgid ""
"For the ``'s'`` format character, the count is interpreted as the size of "
"the string, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string, while ``'10c'`` means 10 "
"characters. If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit."
" For unpacking, the resulting string always has exactly the specified number"
" of bytes.  As a special case, ``'0s'`` means a single, empty string (while "
"``'0c'`` means 0 characters)."
msgstr ""

#: ../../library/struct.rst:266
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller. The bytes of the string follow.  If the string passed in to "
":func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all"
" are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes count bytes, but that the string returned can never contain more "
"than 255 characters."
msgstr ""

#: ../../library/struct.rst:276
msgid ""
"For the ``'P'`` format character, the return value is a Python integer or "
"long integer, depending on the size needed to hold a pointer when it has "
"been cast to an integer type.  A *NULL* pointer will always be returned as "
"the Python integer ``0``. When packing pointer-sized values, Python integer "
"or long integer objects may be used.  For example, the Alpha and Merced "
"processors use 64-bit pointer values, meaning a Python long integer will be "
"used to hold the pointer; other platforms use 32-bit pointers and will use a"
" Python integer."
msgstr ""

#: ../../library/struct.rst:284
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr "``'?'`` フォーマット文字では、返り値は :const:`True` または :const:`False` です。パックするときには、引数オブジェクトの論理値としての値が使われます。 0 または 1 のネイティブや標準の真偽値表現でパックされ、アンパックされるときはゼロでない値は ``True`` になります。"

#: ../../library/struct.rst:294
msgid "Examples"
msgstr "例"

#: ../../library/struct.rst:297
msgid ""
"All examples assume a native byte order, size, and alignment with a big-"
"endian machine."
msgstr "全ての例は、ビッグエンディアンのマシンで、ネイティブのバイトオーダ、サイズおよびアラインメントを仮定します。"

#: ../../library/struct.rst:300
msgid "A basic example of packing/unpacking three integers::"
msgstr "基本的な例として、三つの整数をパック/アンパックします::"

#: ../../library/struct.rst:310
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr "アンパックした結果のフィールドは、変数に割り当てるか named tuple でラップすることによって名前を付けることができます::"

#: ../../library/struct.rst:321
msgid ""
"The ordering of format characters may have an impact on size since the "
"padding needed to satisfy alignment requirements is different::"
msgstr "アラインメントの要求を満たすために必要なパディングが異なるという理由により、フォーマット文字の順番がサイズの違いを生み出すことがあります::"

#: ../../library/struct.rst:333
msgid ""
"The following format ``'llh0l'`` specifies two pad bytes at the end, "
"assuming longs are aligned on 4-byte boundaries::"
msgstr "以下のフォーマット ``'llh0l'`` は、long 型が 4 バイトを境界としてそろえられていると仮定して、末端に 2 バイトをパディングします::"

#: ../../library/struct.rst:339
msgid ""
"This only works when native size and alignment are in effect; standard size "
"and alignment does not enforce any alignment."
msgstr "この例はネイティブのサイズとアラインメントが使われているときだけ思った通りに動きます。標準のサイズとアラインメントはアラインメントの設定ではいかなるアラインメントも行いません。"

#: ../../library/struct.rst:346
msgid "Module :mod:`array`"
msgstr ":mod:`array` モジュール"

#: ../../library/struct.rst:346
msgid "Packed binary storage of homogeneous data."
msgstr "一様なデータ型からなるバイナリ記録データのパック。"

#: ../../library/struct.rst:348
msgid "Module :mod:`xdrlib`"
msgstr ":mod:`xdrlib` モジュール"

#: ../../library/struct.rst:349
msgid "Packing and unpacking of XDR data."
msgstr "XDR データのパックおよびアンパック。"

#: ../../library/struct.rst:355
msgid "Classes"
msgstr "クラス"

#: ../../library/struct.rst:357
msgid "The :mod:`struct` module also defines the following type:"
msgstr ":mod:`struct` モジュールは次の型を定義します:"

#: ../../library/struct.rst:362
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a Struct object once and calling its "
"methods is more efficient than calling the :mod:`struct` functions with the "
"same format since the format string only needs to be compiled once."
msgstr "フォーマット文字列 *format* に従ってバイナリデータを読み書きする、新しい Struct オブジェクトを返します。 Struct オブジェクトを一度作ってからそのメソッドを使うと、フォーマット文字列のコンパイルが一度で済むので、 :mod:`struct` モジュールの関数を同じフォーマットで何度も呼び出すよりも効率的です。"

#: ../../library/struct.rst:369
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr "コンパイルされた Struct オブジェクトは以下のメソッドと属性をサポートします:"

#: ../../library/struct.rst:374
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`self.size`.)"
msgstr ":func:`pack` 関数と同じ、コンパイルされたフォーマットを利用するメソッドです。 (``len(result)`` は :attr:`self.size` と等しいでしょう)"

#: ../../library/struct.rst:380
msgid ""
"Identical to the :func:`pack_into` function, using the compiled format."
msgstr ":func:`pack_into` 関数と同じ、コンパイルされたフォーマットを利用するメソッドです。"

#: ../../library/struct.rst:385
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. "
"(``len(string)`` must equal :attr:`self.size`)."
msgstr ""

#: ../../library/struct.rst:391
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"(``len(buffer[offset:])`` must be at least :attr:`self.size`)."
msgstr ":func:`unpack_from` 関数と同じ、コンパイルされたフォーマットを利用するメソッドです。 (``len(buffer[offset:])`` は :attr:`self.size` 以上でなければなりません)。"

#: ../../library/struct.rst:397
msgid "The format string used to construct this Struct object."
msgstr "この Struct オブジェクトを作成する時に利用されたフォーマット文字列です。"

#: ../../library/struct.rst:401
msgid ""
"The calculated size of the struct (and hence of the string) corresponding to"
" :attr:`format`."
msgstr ""
