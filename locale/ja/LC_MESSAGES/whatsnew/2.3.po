# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Hiroaki Itoh <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-29 03:44+0900\n"
"PO-Revision-Date: 2015-12-22 15:15+0000\n"
"Last-Translator: Hiroaki Itoh <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-27/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr "What's New in Python 2.3"

#: ../../whatsnew/2.3.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr "この文書は Python 2.3 の新機能について解説します。Python 2.3 は 2003 年 7 月 29 日にリリースされました。"

#: ../../whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr "Python 2.3 の主要なテーマは、2.2 で追加されたいくつかの機能を磨くこと、言語中核に小さいながらも有用な種々の拡張をすること、そして標準ライブラリの拡充です。ひとつ前のバージョンで導入された新しいオブジェクトモデルは、18 ヶ月に渡るバグフィックスと新スタイルクラスの性能改善をもたらした最適化の努力の恩恵を受けました。 :func:`sum`, :func:`enumerate` のような、新たなビルトイン関数が少し追加されました。 :keyword:`in` 演算子がサブストリングの検索に使えるようになりました (例えば ``\"ab\" in \"abc\"`` は :const:`True` を返します)。"

#: ../../whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and "
"date/time data types, the ability to import modules from ZIP-format "
"archives, metadata support for the long-awaited Python catalog, an updated "
"version of IDLE, and modules for logging messages, wrapping text, parsing "
"CSV files, processing command-line options, using BerkeleyDB databases...  "
"the list of new and enhanced modules is lengthy."
msgstr "たくさんのライブラリ新機能…、Boolean、 set、 heap、 日付/時刻データ型、ZIP 形式アーカイブからのモジュールインポート、待ち望まれていた Python カタログのためのメタデータサポート、更新されたバージョンの IDLE、ロギングメッセージのためのモジュール、テキストの折り返し、CSV ファイルの解析、コマンドラインオプションの処理、BerkeleyDB データベースの使用…、新機能、強化機能のリストは長大になります。"

#: ../../whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you"
" should refer to the documentation for Python 2.3, such as the Python "
"Library Reference and the Python Reference Manual.  If you want to "
"understand the complete implementation and design rationale, refer to the "
"PEP for a particular new feature."
msgstr "このドキュメントは個々の新機能の完全な詳細を提供するのではなくて、簡易な概要を提供することを目的にしています。完全な詳細が知りたければ、 Python ライブラリリファレンス、Python リファレンスマニュアルのような Python 2.4 のドキュメントを参照してください。設計と実装の根拠を理解したい場合は、新機能に関する PEP を参照してください。"

#: ../../whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: 標準の集合データ型"

#: ../../whatsnew/2.3.rst:43
msgid ""
"The new :mod:`sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added"
" and removed.  The :class:`ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr "(---訳注: イキナリですが、あなたが今これを「Python の歴史を知る」もしくは「初登場時の熱量高い紹介」を読みたくて読んでいるのでない限りは、もしくは本当に今 2.3 を使う必要があれば別ですが、このモジュールは 2.4 で既にビルトインで置き換えられ、2.6 では非推奨となり、3.0 では削除されています。ので、集合型について知りたければここよりも 2.4 のビルトインの方から読んだ方が良いです。---) --- 新しいモジュール :mod:`sets` には、集合データ型の実装が含まれています。 :class:`Set` クラスは :term:`mutable` の集合のためのクラスで、メンバの追加と削除が出来ます。 :class:`ImmutableSet` は変更できない集合のためのクラスなので、辞書のキーとして利用出来ます。集合型は辞書の上に構築されているので、集合内の要素はハッシュ可能でなければなりません。"

#: ../../whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr "単純な使用例です::"

#: ../../whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:`union` "
"and :meth:`intersection` methods; an alternative notation uses the bitwise "
"operators ``&`` and ``|``. Mutable sets also have in-place versions of these"
" methods, :meth:`union_update` and :meth:`intersection_update`. ::"
msgstr "和集合 (union) と共通集合 (intersection) は :meth:`union` と :meth:`intersection` メソッドで計算出来ます; 別の記法として、ビット演算子 ``&`` と ``|`` も使えます。変更可能な集合ではこれらのインプレイス版 :meth:`union_update` と :meth:`intersection_update` も使えます::"

#: ../../whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in- place version with the ungainly name "
":meth:`symmetric_difference_update`. ::"
msgstr "2 つの集合の対称差 (symmetric difference) を取ることも出来ます。これは、union から intersection を除いた全要素を取ります。別の言い方をすれば、対称差とは、正確に一つの集合だけに含まれる全要素、ということです。ほかと同じくビット演算子の記法 (``^``) が使え、インプレイス版は見苦しい名前の :meth:`symmetric_difference_update` です::"

#: ../../whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`issubset` and :meth:`issuperset` methods for checking "
"whether one set is a subset or superset of another::"
msgstr ":meth:`issubset` と :meth:`issuperset` メソッドも使えます。これはある集合が部分集合、上位集合であるかとうかをチェックします::"

#: ../../whatsnew/2.3.rst:117
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - 集合オブジェクト型をビルトインに追加する"

#: ../../whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli,"
" and GvR."
msgstr "PEP 著 Greg V. Wilson. 実装: Greg V. Wilson, Alex Martelli, GvR. (---訳注: PEPそのものは 2.4 のビルトイン型 set, frozenset の追加と同じものですが、2.3 ではモジュールとして追加され、2.4 でビルトイン版が追加され、2.6 でモジュール版が非推奨となった、という流れです。---)"

#: ../../whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr "PEP 255: 単純なジェネレータ"

#: ../../whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr "Python 2.2 では、ジェネレータが ``from __future__ import generators`` ディレクティブで有効に出来るオプションの機能として追加されました。2.3 ではジェネレータは特別に有効化する必要なく、もういつでもそこにあります。このセクションの残りの部分は \"What's New in Python 2.2\" のジェネレータの記述からの丸々コピーですので、2.2 のときに読んだなら読み飛ばしてもらって結構です。"

#: ../../whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local"
" variables. But, what if the local variables weren't thrown away on exiting "
"a function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr "Python や C の標準的な関数コールについては、よくご存じに違いありません。関数を呼ぶと、ローカル変数を作るプライベートな名前空間ができますね。その関数が ``return`` 文まで来ると、ローカル変数が破壊されてから、返り値が呼び出し元に返ります。次に同じ関数をもう一度呼ぶと、新しいプライベート名前空間に新規のローカル変数が作られるのです。しかし、関数を出るときにローカル変数を捨てなければどうなるでしょうか。その出ていったところから関数を続行できたとしたら、どうでしょう。これこそジェネレータが提供する機能です; すなわち、ジェネレータは続行できる関数と考えることができます。"

#: ../../whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr "ジェネレータ関数の最も単純な例です::"

#: ../../whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr "新しいキーワード :keyword:`yield` がジェネレータのために導入されました。 :keyword:`yield` ステートメントを含むどんな関数もジェネレータ関数です; Python バイトコードコンパイラはこれを検知し、関数が特別に扱われるように翻訳します。 (---訳注: Python 2.5 の PEP 342 も参照して下さい。この 2.2 で導入時点の ``yield`` はステートメントではなく式に変更されています。---)"

#: ../../whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value"
" of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`yield` and a :keyword:`return` statement is that on "
"reaching a :keyword:`yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's "
"``.next()`` method, the function will resume executing immediately after the"
" :keyword:`yield` statement.  (For complicated reasons, the :keyword:`yield`"
" statement isn't allowed inside the :keyword:`try` block of a "
":keyword:`try`...\\ :keyword:`finally` statement; read :pep:`255` for a full"
" explanation of the interaction between :keyword:`yield` and exceptions.)"
msgstr "ジェネレータ関数を呼び出すと、単一の値の代わりにイテレータプロトコルに対応したオブジェクトを返します。上の例で ``yield`` を実行したとき、ジェネレータは ``return`` 文のようにして ``i`` の値を生成します。 ``yield`` と ``return`` 文の大きな違いは、 ``yield`` に到達した段階でジェネレータの実行状態が一時停止になって、ローカル変数が保存される点です。次回そのジェネレータの ``.next()`` メソッドを呼ぶと、 :keyword:`yield` の直後から関数が実行を再開します。(複雑な理由により、 :keyword:`yield` は :keyword:`try`...\\ :keyword:`finally` の :keyword:`try` ブロック内に含めることは許されていません; :pep:`255` に :keyword:`yield` と例外の相互作用についての詳細説明がありますので参照して下さい。) --- (---訳注: Python 2.5 の PEP 342 で :keyword:`try`...\\ :keyword:`finally` 内に置けないという制約はなくなりました。また、 :keyword:`try`...\\ :keyword:`finally` の :keyword:`try` 、とここであえて特定しているのは、同じく 2.5 の PEP 341 によって try/except/finally の一体化されるまでは、 ``finally`` の ``try`` と ``except`` の ``try`` が別物だったからです。---)"

#: ../../whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr "上記 ``generate_ints()`` ジェネレータはこんな具合に使います::"

#: ../../whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr "同じく ``for i in generate_ints(5)`` や ``a,b,c = generate_ints(3)`` といった書き方もできます。"

#: ../../whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. :keyword:`return`"
" with a value, such as ``return 5``, is a syntax error inside a generator "
"function.  The end of the generator's results can also be indicated by "
"raising :exc:`StopIteration` manually, or by just letting the flow of "
"execution fall off the bottom of the function."
msgstr "ジェネレータ関数内で ``return`` 文は、引数を付けずに、処理の終わりを知らせるためにだけ使うことができます; ``return`` を実行したあとは、もうそのジェネレータが値を返すことはできません。ジェネレータ関数の中では、 ``return 5`` などと値を付けた ``return`` は構文エラーです。ジェネレータの出力が終わったことを示すには、ほかにも、手動で :exc:`StopIteration`  を投げてもいいですし、関数の最後まで実行するだけでも同じことになります。(---訳注: Python 2.7 まではジェネレータ内での戻り値のある ``return 5`` は構文エラーになりますが、少なくとも Python 3.4 で構文エラーとはなりません。単に無視されます。リファレンスに言及されていない振舞いなので、何かの事故かもしれません。いずれにせよジェネレータ内では Python 3 でも ``return`` で値は戻せません。---)"

#: ../../whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. "
":file:`Lib/test/test_generators.py` contains a number of more interesting "
"examples.  The simplest one implements an in-order traversal of a tree using"
" generators recursively. ::"
msgstr "自分でクラスを書いて、ジェネレータで言うところのローカル変数をインスタンス変数として全部保管しておけば、同じ効果を得ることは可能です。たとえば整数のリストを返すのは、 ``self.count`` を 0 にして、 ``next()`` メソッドが ``self.count`` をインクリメントして返すようにすればできます。しかしながら、ある程度複雑なジェネレータになってくると、同じことをするクラスを書くのは格段にややこしいことになります。 :file:`Lib/test/test_generators.py` にはもっと面白い例がたくさん含まれています。一番単純な一つは、ジェネレータを再帰的に使ってツリーを順繰りに横断する実装をするこれです (---訳注: ジェネレータは現在の最新 3.5 までの間に 2 度大きな機能強化が行われているのですが、一つが 2.5 での PEP 342 でこれは yield 「に」値を戻せるようにするものです。もう一つが 3.3 での PEP 380 で、これはサブジェネレータへの委譲 ``yield from <subgen>`` の追加でした。ですのでこの 3.3 からの ``yield from`` を使うと下記例はもっとスッキリ書けます。---)::"

#: ../../whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that"
" no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr "ほかにも:file:`Lib/test/test_generators.py` には、N-Queens 問題 (N×N コマのチェス盤に、互いに攻撃できないような配置で N 個のクイーンを置く) やナイト・ツアー (N×N 盤の全コマをナイトが一度ずつ通るような経路を探す) の解を出す例が入っています。"

#: ../../whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (http://www.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at http://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea "
"of what this looks like::"
msgstr "ジェネレータの発想はほかのプログラミング言語、特に Icon (http://www.cs.arizona.edu/icon/) から着想しています。Icon ではジェネレータが言語の中枢になっています。Icon では、あらゆる式と関数がジェネレータのように振舞います。 http://www.cs.arizona.edu/icon/docs/ipd266.htm の \"Icon プログラミング言語の概要\" の一つの例が、これがどのようなものであるのかを教えてくれます::"

#: ../../whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`find` function returns the indexes at which the substring"
" \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first"
" assigned a value of 3, but 3 is less than 5, so the comparison fails, and "
"Icon retries it with the second value of 23.  23 is greater than 5, so the "
"comparison now succeeds, and the code prints the value 23 to the screen."
msgstr "Icon では :func:`find` 関数は部分文字列 \"or\" が見つかる位置 3, 23, 33 を返します。 :keyword:`if` 文内では ``i`` には最初 3 が代入されますが、これは 3 より小さいので比較は失敗し、Icon は次の値 23 を取り出します。 23 は 5 より大きいので比較は成功し、コードは 23 をスクリーンに表示します。"

#: ../../whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr "Python では Icon がそうするほどにはジェネレータを中心的概念に置きません。ジェネレータは Python 言語中核の新たな一面ではありますが、それらを学ぶのも使うのも誰しも行うべきだというものでもなく、そしてこれで解決できない何か問題があれば、忘れてしまっても良いものです。Icon と比較した特筆すべき Python インターフェイスの機能はジェネレータの状態が具象オブジェクト (イテレータ) で表現されることであり、それは他の関数に渡せますし、データ構造に記憶しておくことも出来ます。(---訳注: ジェネレータについてかなり控えめなのは、この時点で著者は将来の拡張を既に見据えていたから? かもしれませんね。PEP 342 と PEP 380 により今やジェネレータはこの頃より遥かに高機能になっており、今ではきっと「こんなものなくても困らない」なんて Python 使いはいないでしょう。---)"

#: ../../whatsnew/2.3.rst:248
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - 単純なジェネレータ"

#: ../../whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr "Neil Schemenauer, Tim Peters, Magnus Lie Hetland により著されました。実装のほとんどは Neil Schemenauer と Tim Peters により行われ、 Python Labs クルーにより他の修正が行われました。"

#: ../../whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: ソースコードのエンコーディング"

#: ../../whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr "Python ソースファイルで、異なる文字セットエンコーディングを宣言出来るようになりました。エンコーディングはソースコードの 1 行目か 2 行目に特殊形式のコメントを含めることで宣言出来ます。 UTF-8 ファイルであればこのように宣言出来ます::"

#: ../../whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with "
"8-bit characters and have no encoding declaration will result in a "
":exc:`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be"
" a syntax error."
msgstr "このエンコーディング宣言がなければ、デフォルトの 7 ビット ASCII エンコーディングが使われます(訳注: Python 3 からはデフォルトは utf-8 (PEP 3120))。8 ビット文字を含んでいるのにエンコーディング宣言がないモジュールの実行やインポートを行うと、 Python 2.3 では :exc:`DeprecationWarning` を引き起こします; 2.4 ではこれは構文エラーになる予定です(訳注: 実際には 2.4 ではこれは実現せず、2.5 から)。"

#: ../../whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be"
" converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr "エンコーディング宣言は Unicode 文字列リテラルにのみ影響します。それらは指定したエンコーディングで Unicode 文字列に変換されます。Python 識別子は今でも ASCII 文字列に制限されていることに注意してください。ですから普通の英数字範囲外の文字を変数名に使うことは出来ません。"

#: ../../whatsnew/2.3.rst:282
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ":pep:`263` - Python ソースコードのエンコーディングを定義する"

#: ../../whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr "Marc-André Lemburg、 Martin von Löwis 著; Suzuki Hisao、 Martin von Löwis 実装."

#: ../../whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: Zip アーカイブからモジュールをインポートする"

#: ../../whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP- format archive.  You don't need to import the module explicitly; it "
"will be automatically imported if a ZIP archive's filename is added to "
"``sys.path``. For example::"
msgstr "新たなモジュール :mod:`zipimport` が、ZIP フォーマットの書庫からモジュールのインポートをサポートします。 :mod:`zipimport` を明示的にインポートする必要はありません; ``sys.path`` に ZIP 形式書庫が追加されるとそれは自動的にインポートされます。例えば::"

#: ../../whatsnew/2.3.rst:312
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, "
":file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive"
" by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr "``sys.path`` には今や ZIP 書庫のファイル名も入れることが出来ます。ZIP アーカイブ内にはどんなファイルを置いてもかまいませんが、import できるのは :file:`\\*.py`, :file:`\\*.pyc`, :file:`\\*.pyo` だけです。書庫に :file:`\\*.py` だけが含まれる場合には、Python は書庫を修正して対応する :file:`\\*.pyc` を作るなどということはしないので、 :file:`\\*.pyc` ファイルを含まない ZIP 書庫からのインポートはやや遅いかもしれません。"

#: ../../whatsnew/2.3.rst:319
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only"
" import from the :file:`lib/` subdirectory within the archive."
msgstr "書庫内のパスをサブディレクトリ以下のみインポートするように指定出来ます; 例えば、パス :file:`/tmp/example.zip/lib/` はその書庫内の :file:`lib/` サブディレクトリだけからインポートします。"

#: ../../whatsnew/2.3.rst:329
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Zip アーカイブからモジュールをインポートする"

#: ../../whatsnew/2.3.rst:327
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in "
":pep:`302`. See section :ref:`section-pep302` for a description of the new "
"import hooks."
msgstr "このモジュールの実装も行った、James C. Ahlstrom による PEP です。 Python 2.3 は  :pep:`273` の仕様に従っていますが、 Just van Rossum の書いた、 :pep:`302` に記述されている import フックによる実装を使っています。その新しい import フックについては  :ref:`section-pep302`  をみてください。"

#: ../../whatsnew/2.3.rst:336
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: Windows NT での Unicode ファイル名サポート"

#: ../../whatsnew/2.3.rst:338
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr "Windows NT, 2000, XP では、ファイルシステムはファイル名として Unicode 文字列を使います。伝統的に Python はファイル名をバイト文字列として表現してきましたが、それはアクセス出来ないファイル名を表してしまう場合があって、不十分でした。"

#: ../../whatsnew/2.3.rst:342
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of"
" the file system) for all functions that expect file names, most notably the"
" :func:`open` built-in function. If a Unicode string is passed to "
":func:`os.listdir`, Python now returns a list of Unicode strings.  A new "
"function, :func:`os.getcwdu`, returns the current directory as a Unicode "
"string."
msgstr "Python はいまや (ファイルシステムの制約の範囲内での) 任意の Unicode 文字列をファイル名が期待される全ての関数で許容します。 :func:`os.listdir` に Unicode 文字列が渡されれば、Python は今では Unicode 文字列のリストを返します。新しい関数 :func:`os.getcwdu` は Unicode 文字列でカレントディレクトリを返します(訳注: ちなみに Python 3 での Unicode 周りの大改造に伴いこの関数はなくなり、代わりに「あえてバイト列のほうを返す」 ``os.getcwdb`` が追加されています(``os.getcwdu`` がもはや Unicode を返すので)。)。"

#: ../../whatsnew/2.3.rst:348
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr "ファイル名のバイト文字列はいまでも動きます。Windows 版 Python は透過的にそれらを Unicode に ``mbcs`` エンコーディングを使って変換します。"

#: ../../whatsnew/2.3.rst:351
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a "
":exc:`UnicodeError` to be raised. Applications can test whether arbitrary "
"Unicode strings are supported as file names by checking "
":attr:`os.path.supports_unicode_filenames`, a Boolean value."
msgstr "ほかのシステムでもファイル名の Unicode は許容されますが、システムに渡す前にバイト文字列に変換され、 :exc:`UnicodeError` 例外を引き起こすかもしれません。アプリケーションは任意の Unicode 文字列がファイル名に許されるかどうかを、ブーリアン値 :attr:`os.path.supports_unicode_filenames` をチェックすることでテスト出来ます。"

#: ../../whatsnew/2.3.rst:357
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr "MacOS では、 :func:`os.listdir` は Unicode ファイル名を返すようになっているでしょう。"

#: ../../whatsnew/2.3.rst:363
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - Windows NT での Unicode ファイル名サポート"

#: ../../whatsnew/2.3.rst:363
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr "Neil Hodgson 著; 実装 Neil Hodgson, Martin von Löwis, Mark Hammond。"

#: ../../whatsnew/2.3.rst:373
msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: Universal Newline サポート"

#: ../../whatsnew/2.3.rst:375
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of "
"cross- platform work  is that these three platforms all use different "
"characters to mark the ends of lines in text files.  Unix uses the linefeed "
"(ASCII character 10), MacOS uses the carriage return (ASCII character 13), "
"and Windows uses a two-character sequence of a carriage return plus a "
"newline."
msgstr "今日では 3 つの主要なオペレーティングシステムが使われています。 Microsoft Windows, Apple の Macintosh OS, さまざまな Unix 派生系です。テキストファイルの行終端マークに使う文字がこれら 3 つ全てでそれぞれ違っていることが、クロスプラットフォームのための仕事における小さな苛立ちです。  Unix が使うのはラインフィード (ASCII 文字 10), MacOS が使うのはキャリッジリターン (ASCII 文字 13),  Windows に至ってはキャリッジリターンとラインフィード 2 文字のシーケンスを使います。"

#: ../../whatsnew/2.3.rst:382
msgid ""
"Python's file objects can now support end of line conventions other than the"
" one followed by the platform on which Python is running. Opening a file "
"with the mode ``'U'`` or ``'rU'`` will open a file for reading in "
":term:`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`read` and :meth:`readline`."
msgstr "Python のファイルオブジェクトが、動作しているプラットフォームに従わない行終端変換をサポートするようになりました。ファイルのオープンにモード ``'U'`` や ``'rU'`` を使うと、 :term:`universal newlines` モードを使った読み込みとしてファイルを開きます。これで :meth:`read`, :meth:`readline` などのファイルメソッドが、 3 つどの行終端でも ``'\\n'`` に翻訳して返すようになります。"

#: ../../whatsnew/2.3.rst:389
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`execfile` function.  This means that Python"
" modules can be shared between all three operating systems without needing "
"to convert the line-endings."
msgstr "universal newline サポートはモジュールのインポートと :func:`execfile` 関数でのファイル実行にも使われます。これで 3 つ全てのオペレーティングシステム間で行終端変換の必要なく Python モジュールを共有出来ます。"

#: ../../whatsnew/2.3.rst:394
msgid ""
"This feature can be disabled when compiling Python by specifying the :option"
":`--without-universal-newlines` switch when running Python's "
":program:`configure` script."
msgstr "この機能は Python をソースからビルドする際に :program:`configure` スクリプトに :option:`--without-universal-newlines` スイッチ を付けることで無効に出来ます。"

#: ../../whatsnew/2.3.rst:401
msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` : Universal Newline サポート"

#: ../../whatsnew/2.3.rst:402
msgid "Written and implemented by Jack Jansen."
msgstr "Jack Jansen 著、実装"

#: ../../whatsnew/2.3.rst:410
msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

#: ../../whatsnew/2.3.rst:412
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns a iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr "新たな組み込み関数 :func:`enumerate` はある種のループ処理を少し簡潔にするものです。 *thing* がイテレータかシーケンスだとして、 ``enumerate(thing)`` は ``(0, thing[0])``, ``(1, thing[1])``, ``(2, thing[2])``, … を生成するイテレータを返します。"

#: ../../whatsnew/2.3.rst:417
msgid "A common idiom to change every element of a list looks like this::"
msgstr "リストの全てを変更するためのよくあるイディオムはこのようなものでしょう::"

#: ../../whatsnew/2.3.rst:424
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "これは :func:`enumerate` を使ってこのように書き換えることが出来ます::"

#: ../../whatsnew/2.3.rst:433
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - 組み込み関数 enumerate()"

#: ../../whatsnew/2.3.rst:434
msgid "Written and implemented by Raymond D. Hettinger."
msgstr "Raymond D. Hettinger 著、実装."

#: ../../whatsnew/2.3.rst:440
msgid "PEP 282: The logging Package"
msgstr "PEP 282: ロギングパッケージ"

#: ../../whatsnew/2.3.rst:442
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log"
" records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""

#: ../../whatsnew/2.3.rst:451
msgid ""
"The :class:`Logger` class is the primary class. Most application code will "
"deal with one or more :class:`Logger` objects, each one used by a particular"
" subsystem of the application. Each :class:`Logger` is identified by a name,"
" and names are organized into a hierarchy using ``.``  as the component "
"separator. For example, you might have :class:`Logger` instances named "
"``server``, ``server.auth`` and ``server.network``.  The latter two "
"instances are below ``server`` in the hierarchy.  This means that if you "
"turn up the verbosity for ``server`` or direct ``server`` messages to a "
"different handler, the changes will also apply to records logged to "
"``server.auth`` and ``server.network``. There's also a root :class:`Logger` "
"that's the parent of all other loggers."
msgstr ""

#: ../../whatsnew/2.3.rst:462
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""

#: ../../whatsnew/2.3.rst:473 ../../whatsnew/2.3.rst:498
msgid "This produces the following output::"
msgstr "上記のコードは以下のような出力になります::"

#: ../../whatsnew/2.3.rst:479
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the "
":meth:`setLevel` method on the root logger."
msgstr ""

#: ../../whatsnew/2.3.rst:484
msgid ""
"Notice the :func:`warning` call's use of string formatting operators; all of"
" the functions for logging messages take the arguments ``(msg, arg1, arg2, "
"...)`` and log the string resulting from ``msg % (arg1, arg2, ...)``."
msgstr ""

#: ../../whatsnew/2.3.rst:488
msgid ""
"There's also an :func:`exception` function that records the most recent "
"traceback.  Any of the other functions will also record the traceback if you"
" specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:506
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The :func:`getLogger(name)` function is used to get a particular "
"log, creating it if it doesn't exist yet. :func:`getLogger(None)` returns "
"the root logger. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:517
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a "
":class:`Logger` can prevent this by setting its :attr:`propagate` attribute "
"to :const:`False`."
msgstr ""

#: ../../whatsnew/2.3.rst:521
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`Logger` instance is told to log a message, it "
"creates a :class:`LogRecord` instance that is sent to any number of "
"different :class:`Handler` instances.  Loggers and handlers can also have an"
" attached list of filters, and each filter can cause the :class:`LogRecord` "
"to be ignored or can modify the record before passing it along.  When "
"they're finally output, :class:`LogRecord` instances are converted to text "
"by a :class:`Formatter` class.  All of these classes can be replaced by your"
" own specially-written classes."
msgstr ""

#: ../../whatsnew/2.3.rst:531
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""

#: ../../whatsnew/2.3.rst:539
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - ログシステム"

#: ../../whatsnew/2.3.rst:540
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr ""

#: ../../whatsnew/2.3.rst:548
msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: Boolean 型"

#: ../../whatsnew/2.3.rst:550
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to the"
" :mod:`__builtin__` module, :const:`True` and :const:`False`.  "
"(:const:`True` and :const:`False` constants were added to the built-ins in "
"Python 2.2.1, but the 2.2.1 versions are simply set to integer values of 1 "
"and 0 and aren't a different type.)"
msgstr "真偽値型 (Boolean) が Python 2.3 に追加されました。関連して 2 つの定数 :const:`True` と :const:`False` が :mod:`__builtin__` モジュールに追加されています。(定数 :const:`True` と :const:`False` は Python 2.2.1 にはビルトインに追加されてはいたのですが、 2.2.1 版のものは単純に整数の 1 と 0 をセットしただけのもので、独立した真偽値型ではありませんでした。)"

#: ../../whatsnew/2.3.rst:556
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or "
":const:`False`. ::"
msgstr "この新しい型の型オブジェクトの名前は :class:`bool` です; これのコンストラクタは任意の Python 値を取り、 :const:`True` または :const:`False` に変換します::"

#: ../../whatsnew/2.3.rst:568
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr "標準ライブラリモジュールとビルトイン関数のほとんどが、そうすべきときには Boolean を返すように変更されました::"

#: ../../whatsnew/2.3.rst:579
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr "Python の Boolean はコードを明快にすることを主たる目標として追加されました。例えばあなたがコードを読んでいて ``return 1`` に出くわした場合、あなたは考えるはずです。この ``1`` は、真偽としての真値なのであろうか、それともインデクスだろうか、はたまた何かほかの数量に掛ける係数だろうか、と。 ``return True`` であればその意味するところはかなり明らかです。"

#: ../../whatsnew/2.3.rst:585
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an "
":keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is"
" a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr "Python の Boolean は、厳格な型チェックを目的として追加された *のではありません* 。Pascal のようなとても厳格な言語では、Boolean の数学演算も阻むでしょうし、 :keyword:`if` ステートメントの式が必ず Boolean の結果に評価されなければならないことを要求するでしょう。 Python はこの厳しさを今持ちませんし、 :pep:`285` が名言するように、未来永劫持つことはありません。このことは、 :keyword:`if` ステートメントにこれからも任意の式を書けることを意味しますし、リストやらタプルやら何かほかのデタラメなオブジェクトに評価されるものでも良いことを意味します。Boolean 型は :class:`int` クラスのサブクラスであって、Boolean の算術演算はこれからも動作します::"

#: ../../whatsnew/2.3.rst:603
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ":const:`True` と :const:`False` はぶっちゃけて言えば…: これらは整数値 1 と 0 の別名だけれども唯一異なるのは :func:`str` と :func:`repr` が ``'1'`` と ``'0'`` ではなく ``'True'`` と ``'False'`` を返すことだけである。"

#: ../../whatsnew/2.3.rst:611
msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - 真偽値型の追加"

#: ../../whatsnew/2.3.rst:612
msgid "Written and implemented by GvR."
msgstr "Guido van Rossum 著、実装"

#: ../../whatsnew/2.3.rst:618
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: コーデックエラーを処理するコールバック"

#: ../../whatsnew/2.3.rst:620
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore\" "
"(skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr "Unicode 文字列をバイト文字列にエンコードする際には、エンコード出来ない文字に出会うことがあります。いまのところ Python は、そのエラー処理として \"strict\" (:exc:`UnicodeError` を発生させる)、  \"ignore\" (その文字をスキップする)、 \"replace\" (出力文字列ではクエッションマークに置換する)、のいずれか一つを指定出来て、 \"strict\" がデフォルトの振る舞いになっています。その種のエラーのために、ほかの代わりとなる処理が望ましいかもしれません。例えば XML や HTML の実体参照に置き換えるなどの。"

#: ../../whatsnew/2.3.rst:628
msgid ""
"Python now has a flexible framework to add different processing strategies."
"  New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a"
" replacement string."
msgstr "Python は今や、異なる処理戦略を追加する柔軟なフレームワークを手にしました。新しいエラーハンドラを :func:`codecs.register_error` で追加出来、コーデックは :func:`codecs.lookup_error` を使ってそのエラーハンドラにアクセス出来ます。等価な C API も C で書かれたコーデックのために追加されています。エラーハンドラは、変換すべき文字列、そのエラーが検出されたその文字列内での位置、ターゲットエンコーディングのような必要な状態情報を受け取ります。ハンドラは例外を投げるか、置換文字列を返せます。"

#: ../../whatsnew/2.3.rst:636
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr "このフレームワークを使って 2 つのエラーハンドラが実装されました: \"backslashreplace\" はエンコード出来ない文字をバックスラッシュで引用し、 \"xmlcharrefreplace\" は XML 文字参照を発行します。"

#: ../../whatsnew/2.3.rst:643
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - コーデックエラーを処理するコールバック"

#: ../../whatsnew/2.3.rst:644
msgid "Written and implemented by Walter Dörwald."
msgstr "Walter Dörwald 著、実装"

#: ../../whatsnew/2.3.rst:652
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr ""

#: ../../whatsnew/2.3.rst:654
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""

#: ../../whatsnew/2.3.rst:656
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.python.org/pypi."
msgstr ""

#: ../../whatsnew/2.3.rst:662
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help"
" classify the software."
msgstr ""

#: ../../whatsnew/2.3.rst:667
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""

#: ../../whatsnew/2.3.rst:686
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""

#: ../../whatsnew/2.3.rst:692
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ""

#: ../../whatsnew/2.3.rst:693
msgid "Written and implemented by Richard Jones."
msgstr "Richard Jones 著、実装"

#: ../../whatsnew/2.3.rst:701
msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: 新たなインポートフック"

#: ../../whatsnew/2.3.rst:703
msgid ""
"While it's been possible to write custom import hooks ever since the "
":mod:`ihooks` module was introduced in Python 1.3, no one has ever been "
"really happy with it because writing new import hooks is difficult and "
"messy.  There have been various proposed alternatives such as the "
":mod:`imputil` and :mod:`iu` modules, but none of them has ever gained much "
"acceptance, and none of them were easily usable from C code."
msgstr "カスタムなインポートフックを書くことは、Python 1.3 で :mod:`ihooks` モジュールが導入されたその日からずっと可能でした。それでも本当のところそれで幸せになった人は誰一人いません。それで新しいインポートフックを書くのが難しくてとっ散らかっていたからです。 :mod:`imputil` と :mod:`iu` モジュール のような代わりとなる色々な提案がありましたが、そのいずれも多くの賛同を得ることが出来たものはありませんし、そのいずれもが簡単に C コードから使うことが出来ませんでした。"

#: ../../whatsnew/2.3.rst:710
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ":pep:`302` はその先駆者、特に Gordon McMillan の :mod:`iu` モジュールからアイディアを借りています。3 つの新たなアイテムが :mod:`sys` モジュールに追加されています:"

#: ../../whatsnew/2.3.rst:714
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an "
":exc:`ImportError` exception if it can't handle this path."
msgstr "``sys.path_hooks`` は呼び出し可能オブジェクトのリストです。ほとんどの場合クラスになるでしょう。それぞれの呼び出し可能オブジェクトは、パスを含む文字列を受け取って、このパスからインポートを処理するインポーターオブジェクトを返すか、このパスを処理出来なければ :exc:`ImportError` を送出します。"

#: ../../whatsnew/2.3.rst:719
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so "
"``sys.path_hooks`` will only need to be traversed once for each path."
msgstr "``sys.path_importer_cache`` はそれぞれのパスごとのインポーターオブジェクトをキャッシュしますので、 ``sys.path_hooks`` は個々のパスを一回だけ横断すれば良いことになります。"

#: ../../whatsnew/2.3.rst:722
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code"
" can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr "``sys.meta_path`` は ``sys.path`` がチェックされる前に横断させるインポーターオブジェクトのリストです(訳注: ここだけ読むとわかりにくいですがライブラリリファレンスを読めばわかります)。このリストは初期状態で空ですが、ユーザコードがオブジェクトをそれに追加出来ます。追加のビルトインと凍結モジュールを、このリストにオブジェクトを追加することによってインポートさせることが出来ます。"

#: ../../whatsnew/2.3.rst:727
msgid ""
"Importer objects must have a single method, :meth:`find_module(fullname, "
"path=None)`.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`find_module` must return a loader object that"
" has a single method, :meth:`load_module(fullname)`, that creates and "
"returns the corresponding module object."
msgstr "インポーターオブジェクトは一つのメソッド ``find_module(fullname, path=None)`` を持たなければなりません。 *fullname* はモジュールかパッケージの名前です。例えば ``string`` や ``distutils.core`` です。 :meth:`find_module` メソッドは一つのメソッド ``load_module(fullname)`` を持つローダーオブジェクトを返さなければなりません。 ``load_module(fullname)`` では対応するモジュールオブジェクトを生成して返します。"

#: ../../whatsnew/2.3.rst:733
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr "Python の新しいインポートのロジックは、なので、擬似コードで示すとだいたいこんな感じです (少し単純化しています; 完全な詳細は :pep:`302` 参照)::"

#: ../../whatsnew/2.3.rst:758
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - 新たなインポートフック"

#: ../../whatsnew/2.3.rst:759
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr "Just van Rossum、Paul Moore 著、実装 Just van Rossum。"

#: ../../whatsnew/2.3.rst:767
msgid "PEP 305: Comma-separated Files"
msgstr ""

#: ../../whatsnew/2.3.rst:769
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""

#: ../../whatsnew/2.3.rst:772
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""

#: ../../whatsnew/2.3.rst:776
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in"
" string data that can contain commas, and things get more complicated::"
msgstr ""

#: ../../whatsnew/2.3.rst:781
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""

#: ../../whatsnew/2.3.rst:791
msgid ""
"The :func:`reader` function takes a number of different options. The field "
"separator isn't limited to the comma and can be changed to any character, "
"and so can the quoting and line-ending characters."
msgstr ""

#: ../../whatsnew/2.3.rst:795
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate "
":class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""

#: ../../whatsnew/2.3.rst:804
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - CSV File API"

#: ../../whatsnew/2.3.rst:804
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""

#: ../../whatsnew/2.3.rst:813
msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307: Pickle の機能拡張"

#: ../../whatsnew/2.3.rst:815
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string"
" three times longer than that for a classic class."
msgstr ""

#: ../../whatsnew/2.3.rst:821
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this"
" flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""

#: ../../whatsnew/2.3.rst:828
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:834
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: "
":meth:`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  "
"Consult :pep:`307` for the full semantics  of these methods."
msgstr ""

#: ../../whatsnew/2.3.rst:839
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also"
" a range of codes for private use.  Currently no codes have been specified."
msgstr ""

#: ../../whatsnew/2.3.rst:847
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - pickle プロトコルの拡張"

#: ../../whatsnew/2.3.rst:848
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "著、実装: Guido van Rossum と Tim Peters "

#: ../../whatsnew/2.3.rst:856
msgid "Extended Slices"
msgstr "拡張スライス"

#: ../../whatsnew/2.3.rst:858
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError`"
" if you tried it. Michael Hudson contributed a patch to fix this "
"shortcoming."
msgstr "Python 1.4 以来ずっと、スライシングの構文は省略可能な 3 つ目の引数 \"step\" またの名を \"stride\" 、をサポートしていたのです。例えばこれらは全て合法な Python 構文です: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]`` 。これはこの 3 つ目の引数を大々的に使う Numerical Python 開発者によって要望されたことで Python に追加されたものですが、Python ビルトインのリスト、タプル、文字列といったシーケンス型がこの機能をサポートすることはなく、これを試みると :exc:`TypeError` を起こしていました。Michael Hudson がこの不徹底を修正するパッチを寄稿しました。"

#: ../../whatsnew/2.3.rst:866
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr "例えば、今やリストの偶数番目要素を簡単に取り出せます::"

#: ../../whatsnew/2.3.rst:873
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr "負の値では、同じリストの逆順コピーを作るように動作します::"

#: ../../whatsnew/2.3.rst:878
msgid "This also works for tuples, arrays, and strings::"
msgstr "これはタプル、配列、文字列に対しても使えます::"

#: ../../whatsnew/2.3.rst:886
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr "リストや配列のような :term:`mutable` なシーケンスに対して、拡張スライスを代入や削除に使えますが、拡張スライスと普通のスライスではいくつかの違いがあります。普通のスライスで代入を行えば、シーケンスの長さを変更出来ます (---訳注: 念のため。Python 3 の range は list を直接返す関数ではなくジェネレータなので、以下例は ``a = list(range(3))`` などとしないと動作しません。続く例でも同じです。---)::"

#: ../../whatsnew/2.3.rst:898
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr "拡張スライスにはこの柔軟性はありません。拡張スライスを代入に使う際は、ステートメントの右辺のリストは、置換されるスライスとしての要素数と同数でなければなりません::"

#: ../../whatsnew/2.3.rst:915
msgid "Deletion is more straightforward::"
msgstr "削除はもっと素直です::"

#: ../../whatsnew/2.3.rst:926
msgid ""
"One can also now pass slice objects to the :meth:`__getitem__` methods of "
"the built-in sequences::"
msgstr "ビルトインのシーケンスの :meth:`__getitem__` メソッドに slice オブジェクトを渡すことも出来るようになりました::"

#: ../../whatsnew/2.3.rst:932
msgid "Or use slice objects directly in subscripts::"
msgstr "あるいは直接 slice オブジェクトを添え字に使えます::"

#: ../../whatsnew/2.3.rst:937
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method :meth:`indices(length)` which, given the length of"
" a sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`indices` handles omitted and out-of-bounds"
" indices in a manner consistent with regular slices (and this innocuous "
"phrase hides a welter of confusing details!).  The method is intended to be "
"used like this::"
msgstr "拡張スライスをサポートするシーケンスの実装を単純化するために、 slice オブジェクトに :meth:`indices(length)` メソッドが追加されています。これはシーケンスの長さを受け取って、タプル ``(start, stop, step)`` を返すことで直接 :func:`range` に渡せるようにしています。 :meth:`indices` は範囲外のインデクスを、標準のスライスと一貫した方法で処理します (そしてこの当たり障りのない言い回しは、ややこしい詳細の荒波を隠しているのですよ…!) このメソッドはこうやって使うのを意図したものです::"

#: ../../whatsnew/2.3.rst:955
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr "ところでこの例からは、ビルトインの :class:`slice` オブジェクトが今では slice 型という型オブジェクトで、もう関数ではないことがわかるでしょう。これは、Python 2.2 で :class:`int`, :class:`str` などに対して行われた同じ目的の修正と一貫しています。"

#: ../../whatsnew/2.3.rst:964
msgid "Other Language Changes"
msgstr "その他の言語の変更"

#: ../../whatsnew/2.3.rst:966
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr "以下が、Python 2.3 言語コアに加えられた全ての変更点です。"

#: ../../whatsnew/2.3.rst:968
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ":keyword:`yield` がこのドキュメントの :ref:`section-generators` で述べた通り、キーワードになっています。"

#: ../../whatsnew/2.3.rst:971
msgid ""
"A new built-in function :func:`enumerate` was added, as described in section"
" :ref:`section-enumerate` of this document."
msgstr "新たなビルトイン関数 :func:`enumerate` が追加されました。このドキュメントの :ref:`section-enumerate` で述べた通りです。"

#: ../../whatsnew/2.3.rst:974
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool`"
" of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:978
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""

#: ../../whatsnew/2.3.rst:984
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""

#: ../../whatsnew/2.3.rst:987
msgid ""
"A new built-in function, :func:`sum(iterable, start=0)`,  adds up the "
"numeric items in the iterable object and returns their sum.  :func:`sum` "
"only accepts numbers, meaning that you can't use it to concatenate a bunch "
"of strings. (Contributed by Alex Martelli.)"
msgstr ""

#: ../../whatsnew/2.3.rst:992
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list"
" when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""

#: ../../whatsnew/2.3.rst:997
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit"
" the search to  only part of the list."
msgstr ""

#: ../../whatsnew/2.3.rst:1001
msgid ""
"Dictionaries have a new method, :meth:`pop(key[, *default*])`, that returns "
"the value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default*"
" is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1023
msgid ""
"There's also a new class method,  :meth:`dict.fromkeys(iterable, value)`, "
"that creates a dictionary with keys taken from the supplied iterator "
"*iterable* and all values set to *value*, defaulting to ``None``."
msgstr ""

#: ../../whatsnew/2.3.rst:1027
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "(Patches contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1029
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify"
" creating small dictionaries::"
msgstr ""

#: ../../whatsnew/2.3.rst:1035
msgid "(Contributed by Just van Rossum.)"
msgstr "(Contributed by Just van Rossum.)"

#: ../../whatsnew/2.3.rst:1037
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""

#: ../../whatsnew/2.3.rst:1042
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the "
":mod:`new` module can be deprecated in a future Python version, because you "
"can now use the type objects available in the :mod:`types` module.) For "
"example, you can create a new module object with the following code:"
msgstr ""

#: ../../whatsnew/2.3.rst:1057
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply "
":option:`-Walways::PendingDeprecationWarning::` on the command line or use "
":func:`warnings.filterwarnings`."
msgstr ""

#: ../../whatsnew/2.3.rst:1063
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger "
":exc:`PendingDeprecationWarning`."
msgstr ""

#: ../../whatsnew/2.3.rst:1067
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""

#: ../../whatsnew/2.3.rst:1070
msgid ""
"The :meth:`xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. "
":meth:`xreadlines` was originally introduced as a faster way to loop over "
"all the lines in a file, but now you can simply write ``for line in "
"file_obj``. File objects also have a new read-only :attr:`encoding` "
"attribute that gives the encoding used by the file; Unicode strings written "
"to the file will be automatically  converted to bytes using the given "
"encoding."
msgstr ""

#: ../../whatsnew/2.3.rst:1078
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" <http://www.webcom.com/haahr/dylan"
"/linearization-oopsla96.html>`_. To understand the motivation for this "
"change,  read Michele Simionato's article `\"Python 2.3 Method Resolution "
"Order\" <https://www.python.org/2.3/mro.html>`_, or read the thread on "
"python-dev starting with the message at https://mail.python.org/pipermail"
"/python-dev/2002-October/029035.html. Samuele Pedroni first pointed out the "
"problem and also implemented the fix by coding the C3 algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1091
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using :func:`sys.setcheckinterval(N)`. The limit can be retrieved "
"with the new :func:`sys.getcheckinterval` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1099
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`__class__`, you'd get this output::"
msgstr ""

#: ../../whatsnew/2.3.rst:1108
msgid "In 2.3, you get this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1113
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`__name__` and "
":attr:`__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`__bases__` along the lines of"
" those relating to assigning to an instance's :attr:`__class__` attribute."
msgstr ""

#: ../../whatsnew/2.3.rst:1123
msgid "String Changes"
msgstr ""

#: ../../whatsnew/2.3.rst:1125
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1138
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that"
" information, use the :meth:`find` string method."
msgstr ""

#: ../../whatsnew/2.3.rst:1141
msgid ""
"The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now "
"have an optional argument for specifying the characters to strip.  The "
"default is still to remove all whitespace characters::"
msgstr ""

#: ../../whatsnew/2.3.rst:1155
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1157
msgid ""
"The :meth:`startswith` and :meth:`endswith` string methods now accept "
"negative numbers for the *start* and *end* parameters."
msgstr ""

#: ../../whatsnew/2.3.rst:1160
msgid ""
"Another new string method is :meth:`zfill`, originally a function in the "
":mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on the"
" left until it's the specified width. Note that the ``%`` operator is still "
"more flexible and powerful than :meth:`zfill`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1172
msgid "(Contributed by Walter Dörwald.)"
msgstr "(Contributed by Walter Dörwald.)"

#: ../../whatsnew/2.3.rst:1174
msgid ""
"A new type object, :class:`basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`basestring` instances."
msgstr ""

#: ../../whatsnew/2.3.rst:1179
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in"
" the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1187
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/2.3.rst:1189
msgid ""
"The creation of new-style class instances has been made much faster; they're"
" now faster than classic classes!"
msgstr ""

#: ../../whatsnew/2.3.rst:1192
msgid ""
"The :meth:`sort` method of list objects has been extensively rewritten by "
"Tim Peters, and the implementation is significantly faster."
msgstr ""

#: ../../whatsnew/2.3.rst:1195
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the O(n\\*n) required for the grade-school multiplication algorithm.  "
"(Original patch by Christopher A. Craig, and significantly reworked by Tim "
"Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1200
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref"
":`section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1204
msgid ""
":func:`xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1208
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1212
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone"
" benchmark around 25% faster than Python 2.2."
msgstr ""

#: ../../whatsnew/2.3.rst:1219
msgid "New, Improved, and Deprecated Modules"
msgstr "新たなモジュール、改良されたモジュール、非推奨のモジュール"

#: ../../whatsnew/2.3.rst:1221
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""

#: ../../whatsnew/2.3.rst:1226
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1231
msgid ""
"The :mod:`bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<http://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""

#: ../../whatsnew/2.3.rst:1235
msgid ""
"The old version of the module has been renamed to  :mod:`bsddb185` and is no"
" longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any"
" incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and "
":file:`pickle2db.py` which you will find in the distribution's "
":file:`Tools/scripts` directory.  If you've already been using the PyBSDDB "
"package and importing it as :mod:`bsddb3`, you will have to change your "
"``import`` statements to import it as :mod:`bsddb`."
msgstr ""

#: ../../whatsnew/2.3.rst:1247
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding "
":mod:`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1251
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""

#: ../../whatsnew/2.3.rst:1254
msgid ""
"The Distutils :class:`Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the "
":class:`Extension` object like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1265
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1268
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, "
":envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""

#: ../../whatsnew/2.3.rst:1273
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`DocTestSuite(` function creates a "
":class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

#: ../../whatsnew/2.3.rst:1278
msgid ""
"The new :func:`gc.get_referents(object)` function returns a list of all the "
"objects referenced by *object*."
msgstr ""

#: ../../whatsnew/2.3.rst:1281
msgid ""
"The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that "
"supports the same arguments as the existing :func:`getopt` function but uses"
" GNU-style scanning mode. The existing :func:`getopt` stops processing "
"options as soon as a non-option argument is encountered, but in GNU-style "
"mode processing continues, meaning that options and arguments can be mixed."
"  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1292
msgid "(Contributed by Peter Åstrand.)"
msgstr "(Contributed by Peter Åstrand.)"

#: ../../whatsnew/2.3.rst:1294
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""

#: ../../whatsnew/2.3.rst:1302
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr ":mod:`gzip` モジュールが 2 GiB を超えるファイルを扱えるようになっています。"

#: ../../whatsnew/2.3.rst:1304
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove"
" the smallest item, and inserting a new item while maintaining the heap "
"property is O(lg n).  (See http://www.nist.gov/dads/HTML/priorityque.html "
"for more information about the priority queue data structure.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1312
msgid ""
"The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` "
"functions for adding and removing items while maintaining the heap property "
"on top of some other mutable Python sequence type.  Here's an example that "
"uses a Python list::"
msgstr ""

#: ../../whatsnew/2.3.rst:1330
msgid "(Contributed by Kevin O'Connor.)"
msgstr "(Contributed by Kevin O'Connor.)"

#: ../../whatsnew/2.3.rst:1332
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (http://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library"
" as the :mod:`idlelib` package."
msgstr ""

#: ../../whatsnew/2.3.rst:1338
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ":mod:`imaplib` モジュールが  IMAP over SSL をサポートするようになりました. (Contributed by Piers Lauder and Tino Lange.)"

#: ../../whatsnew/2.3.rst:1341
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1350
msgid ""
"Two new functions in the :mod:`math` module, :func:`degrees(rads)` and "
":func:`radians(degs)`, convert between radians and degrees.  Other functions"
" in the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` "
"have always required input values measured in radians.  Also, an optional "
"*base* argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1357
msgid ""
"Several new POSIX functions (:func:`getpgid`, :func:`killpg`, "
":func:`lchown`, :func:`loadavg`, :func:`major`, :func:`makedev`, "
":func:`minor`, and :func:`mknod`) were added to the :mod:`posix` module that"
" underlies the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert "
"Jansen, and Denis S. Otkidach.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1363
msgid ""
"In the :mod:`os` module, the :func:`\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""

#: ../../whatsnew/2.3.rst:1367
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of the"
" :class:`stat_result` time stamps will be represented as integers. When "
"using named fields (a feature first introduced in Python 2.2), time stamps "
"are still represented as integers, unless :func:`os.stat_float_times` is "
"invoked to enable float return values::"
msgstr ""

#: ../../whatsnew/2.3.rst:1380
msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""

#: ../../whatsnew/2.3.rst:1382
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""

#: ../../whatsnew/2.3.rst:1387
msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more"
" details."
msgstr ""

#: ../../whatsnew/2.3.rst:1392
msgid ""
"The old and never-documented :mod:`linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`ossaudiodev` has been added.  The "
"module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1398
msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André "
"Lemburg.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1403
msgid ""
"The parser objects provided by the :mod:`pyexpat` module can now optionally "
"buffer character data, resulting in fewer calls to your character data "
"handler and therefore faster performance.  Setting the parser object's "
":attr:`buffer_text` attribute to :const:`True` will enable buffering."
msgstr ""

#: ../../whatsnew/2.3.rst:1408
msgid ""
"The :func:`sample(population, k)` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`xrange` object containing the"
" elements of a population, and :func:`sample` chooses *k* elements from the "
"population without replacing chosen elements.  *k* can be any value up to "
"``len(population)``. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1430
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1434
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr "(All changes contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1436
msgid ""
"The :mod:`readline` module also gained a number of new functions: "
":func:`get_history_item`, :func:`get_current_history_length`, and "
":func:`redisplay`."
msgstr ""

#: ../../whatsnew/2.3.rst:1440
msgid ""
"The :mod:`rexec` and :mod:`Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`rexec`, and no one has interest in fixing them"
" or time to do so.  If you have applications using :mod:`rexec`, rewrite "
"them to use something else."
msgstr ""

#: ../../whatsnew/2.3.rst:1446
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`rexec` module in those versions.  "
"To repeat: if you're using :mod:`rexec`, stop using it immediately.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1450
msgid ""
"The :mod:`rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""

#: ../../whatsnew/2.3.rst:1454
msgid ""
"The :mod:`shutil` module gained a :func:`move(src, dest)` function that "
"recursively moves a file or directory to a new location."
msgstr ""

#: ../../whatsnew/2.3.rst:1457
msgid ""
"Support for more advanced POSIX signal handling was added to the "
":mod:`signal` but then removed again as it proved impossible to make it work"
" reliably across platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1461
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
":meth:`settimeout(t)` method on a socket object to set a timeout of *t* "
"seconds. Subsequent socket operations that take longer than *t* seconds to "
"complete will abort and raise a :exc:`socket.timeout` exception."
msgstr ""

#: ../../whatsnew/2.3.rst:1466
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through"
" a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process"
" in action.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1472
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr "Windows での :mod:`socket` モジュールの Secure  Sockets Layer (SSL) サポートが始まりました。"

#: ../../whatsnew/2.3.rst:1475
msgid ""
"The value of the C :const:`PYTHON_API_VERSION` macro is now exposed at the "
"Python level as ``sys.api_version``.  The current exception can be cleared "
"by calling the new :func:`sys.exc_clear` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1479
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to "
":program:`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1482
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The :func:`wrap(text, width)` function takes"
" a string and returns a list containing the text split into lines of no more"
" than the chosen width.  The :func:`fill(text, width)` function returns a "
"single string, reformatted to fit into lines no longer than the chosen "
"width. (As you can guess, :func:`fill` is built on top of :func:`wrap`.  For"
" example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1504
msgid ""
"The module also contains a :class:`TextWrapper` class that actually "
"implements the text wrapping strategy.   Both the :class:`TextWrapper` class"
" and the :func:`wrap` and :func:`fill` functions support a number of "
"additional keyword arguments for fine-tuning the formatting; consult the "
"module's documentation for details. (Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1510
msgid ""
"The :mod:`thread` and :mod:`threading` modules now have companion modules, "
":mod:`dummy_thread` and :mod:`dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""

#: ../../whatsnew/2.3.rst:1522
msgid ""
"In this example, :mod:`_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual "
":mod:`threading` module. Code can call functions and use classes in "
":mod:`_threading` whether or not threads are supported, avoiding an "
":keyword:`if` statement and making the code slightly clearer.  This module "
"will not magically make multithreaded code run without threads; code that "
"waits for another thread to return or to do something will simply hang "
"forever."
msgstr ""

#: ../../whatsnew/2.3.rst:1530
msgid ""
"The :mod:`time` module's :func:`strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1536
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`Timer` class can be imported and used "
"directly.  Here's a short example that figures out whether it's faster to "
"convert an 8-bit string to Unicode by appending an empty Unicode string to "
"it or by using the :func:`unicode` function::"
msgstr ""

#: ../../whatsnew/2.3.rst:1556
msgid ""
"The :mod:`Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""

#: ../../whatsnew/2.3.rst:1559
msgid ""
"The :mod:`Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread"
" in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling"
" a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`Tkinter` will now "
"raise an exception on such an access so that you can at least find out about"
" the problem.  See https://mail.python.org/pipermail/python-"
"dev/2002-December/031107.html for a more detailed explanation of this "
"change.  (Implemented by Martin von Löwis.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1570
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings."
" Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists. This "
"behavior can be controlled through the :meth:`wantobjects` method of "
":class:`tkapp` objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1576
msgid ""
"When using :mod:`_tkinter` through the :mod:`Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""

#: ../../whatsnew/2.3.rst:1581
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`wantobjects` variable in the :mod:`Tkinter` module to "
"false before creating the first :class:`tkapp` object. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1588
msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""

#: ../../whatsnew/2.3.rst:1590
msgid ""
"The :mod:`UserDict` module has a new :class:`DictMixin` class which defines "
"all dictionary methods for classes that already have a minimum mapping "
"interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""

#: ../../whatsnew/2.3.rst:1596
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`__getitem__`, :meth:`__setitem__`, "
":meth:`__delitem__`, and :meth:`keys`. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1637
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1639
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output"
" in a particular encoding by providing an optional encoding argument to the "
":meth:`toxml` and :meth:`toprettyxml` methods of DOM nodes."
msgstr ""

#: ../../whatsnew/2.3.rst:1643
msgid ""
"The :mod:`xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`Marshaller` instance."
msgstr ""

#: ../../whatsnew/2.3.rst:1649
msgid ""
"The new :mod:`DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the Web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1655
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492)"
" has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1662
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""

#: ../../whatsnew/2.3.rst:1670
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""

#: ../../whatsnew/2.3.rst:1677
msgid "Date/Time Type"
msgstr "日付時刻型"

#: ../../whatsnew/2.3.rst:1679
msgid ""
"Date and time types suitable for expressing timestamps were added as the "
":mod:`datetime` module.  The types don't support different calendars or many"
" fancy features, and just stick to the basics of representing time."
msgstr ""

#: ../../whatsnew/2.3.rst:1683
msgid ""
"The three primary types are: :class:`date`, representing a day, month, and "
"year; :class:`time`, consisting of hour, minute, and second; and "
":class:`datetime`, which contains all the attributes of both :class:`date` "
"and :class:`time`. There's also a :class:`timedelta` class representing "
"differences between two points in time, and time zone logic is implemented "
"by classes inheriting from the abstract :class:`tzinfo` class."
msgstr ""

#: ../../whatsnew/2.3.rst:1690
msgid ""
"You can create instances of :class:`date` and :class:`time` by either "
"supplying keyword arguments to the appropriate constructor, e.g. "
"``datetime.date(year=1972, month=10, day=15)``, or by using one of a number "
"of class methods.  For example, the :meth:`date.today` class method returns "
"the current local date."
msgstr ""

#: ../../whatsnew/2.3.rst:1696
msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""

#: ../../whatsnew/2.3.rst:1708
msgid ""
"The :meth:`replace` method allows modifying one or more fields  of a "
":class:`date` or :class:`datetime` instance, returning a new instance::"
msgstr ""

#: ../../whatsnew/2.3.rst:1718
msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`isoformat`).  :class:`date` and :class:`datetime`"
" instances can be subtracted from each other, and added to "
":class:`timedelta` instances.  The largest missing feature is that there's "
"no standard library support for parsing strings and getting back a "
":class:`date` or :class:`datetime`."
msgstr ""

#: ../../whatsnew/2.3.rst:1725
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1732
msgid "The optparse Module"
msgstr "optparse モジュール"

#: ../../whatsnew/2.3.rst:1734
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments."
"  The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`--help`, and can perform "
"different actions for different options."
msgstr ""

#: ../../whatsnew/2.3.rst:1740
msgid ""
"You start by creating an instance of :class:`OptionParser` and telling it "
"what your program's options are. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1754
msgid ""
"Parsing a command line is then done by calling the :meth:`parse_args` "
"method. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1760
msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""

#: ../../whatsnew/2.3.rst:1763
msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an integer. "
"::"
msgstr ""

#: ../../whatsnew/2.3.rst:1774
msgid "The help message is automatically generated for you::"
msgstr ""

#: ../../whatsnew/2.3.rst:1787
msgid "See the module's documentation for more details."
msgstr ""

#: ../../whatsnew/2.3.rst:1790
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr ""

#: ../../whatsnew/2.3.rst:1799
msgid "Pymalloc: A Specialized Object Allocator"
msgstr ""

#: ../../whatsnew/2.3.rst:1801
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was"
" a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc`"
" function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""

#: ../../whatsnew/2.3.rst:1807
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`--with-pymalloc` option to the :program:`configure` script.  In"
" 2.3, pymalloc has had further enhancements and is now enabled by default; "
"you'll have to supply :option:`--without-pymalloc` to disable it."
msgstr ""

#: ../../whatsnew/2.3.rst:1813
msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core"
" dumps at runtime."
msgstr ""

#: ../../whatsnew/2.3.rst:1818
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously"
" just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there"
" are more third-party modules that will have the same problem."
msgstr ""

#: ../../whatsnew/2.3.rst:1830
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1836
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and "
":c:func:`PyMem_Free`."
msgstr ""

#: ../../whatsnew/2.3.rst:1839
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and "
":c:func:`PyObject_Free`."
msgstr ""

#: ../../whatsnew/2.3.rst:1843
msgid ""
"To allocate and free Python objects, use the \"object\" family "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar`, and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../whatsnew/2.3.rst:1846
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running "
":program:`configure` with :option:`--with-pydebug`."
msgstr ""

#: ../../whatsnew/2.3.rst:1852
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source"
" distribution and bundle it with the source of your extension."
msgstr ""

#: ../../whatsnew/2.3.rst:1863
msgid "https://svn.python.org/view/python/trunk/Objects/obmalloc.c"
msgstr "https://svn.python.org/view/python/trunk/Objects/obmalloc.c"

#: ../../whatsnew/2.3.rst:1862
msgid ""
"For the full details of the pymalloc implementation, see the comments at the"
" top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""

#: ../../whatsnew/2.3.rst:1870
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/2.3.rst:1872
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python のビルド過程と C API の変更は以下の通りです:"

#: ../../whatsnew/2.3.rst:1874
msgid ""
"The cycle detection implementation used by the garbage collection has proven"
" to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`--with-cycle-gc` switch to "
":program:`configure` has been removed."
msgstr ""

#: ../../whatsnew/2.3.rst:1879
msgid ""
"Python can now optionally be built as a shared library "
"(:file:`libpython2.3.so`) by supplying :option:`--enable-shared` when "
"running Python's :program:`configure` script.  (Contributed by Ondrej "
"Palkovsky.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1883
msgid ""
"The :c:macro:`DL_EXPORT` and :c:macro:`DL_IMPORT` macros are now deprecated."
" Initialization functions for Python extension modules should now be "
"declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python "
"core will generally use the :c:macro:`PyAPI_FUNC` and :c:macro:`PyAPI_DATA` "
"macros."
msgstr ""

#: ../../whatsnew/2.3.rst:1888
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`--without-doc-strings` to the "
":program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins."
"  (Contributed by Gustavo Niemeyer.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1894
msgid ""
"The :c:func:`PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :const:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than using"
" :const:`METH_NOARGS`."
msgstr ""

#: ../../whatsnew/2.3.rst:1901
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:type:`unsigned char`, ``H`` for "
":c:type:`unsigned short int`,  ``I`` for :c:type:`unsigned int`,  and ``K`` "
"for :c:type:`unsigned long long`."
msgstr ""

#: ../../whatsnew/2.3.rst:1906
msgid ""
"A new function, :c:func:`PyObject_DelItemString(mapping, char \\*key)` was "
"added as shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""

#: ../../whatsnew/2.3.rst:1909
msgid ""
"File objects now manage their internal string buffer differently, increasing"
" it exponentially when needed.  This results in the benchmark tests in "
":file:`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to "
"1.7 seconds, according to one measurement)."
msgstr ""

#: ../../whatsnew/2.3.rst:1914
msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :const:`METH_CLASS` or :const:`METH_STATIC` flags in a"
" method's :c:type:`PyMethodDef` structure."
msgstr ""

#: ../../whatsnew/2.3.rst:1918
msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""

#: ../../whatsnew/2.3.rst:1921
msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`__module__` and "
":attr:`__name__` attributes.  In summary, you will want to ensure the type's"
" dictionary contains a ``'__module__'`` key; making the module name the part"
" of the type name leading up to the final period will no longer have the "
"desired effect.  For more detail, read the API reference documentation or "
"the  source."
msgstr ""

#: ../../whatsnew/2.3.rst:1932
msgid "Port-Specific Changes"
msgstr "ポート特有の変更"

#: ../../whatsnew/2.3.rst:1934
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the"
" POSIX-like capability exposed by the EMX runtime, and mostly succeeds; "
":func:`fork` and :func:`fcntl` are restricted by the limitations of the "
"underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual"
" Age compiler, also gained support for case-sensitive import semantics as "
"part of the integration of the EMX port into CVS.  (Contributed by Andrew "
"MacIntyre.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1943
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1948
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1951
msgid ""
"Other new platforms now supported by Python include AtheOS "
"(http://www.atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""

#: ../../whatsnew/2.3.rst:1960
msgid "Other Changes and Fixes"
msgstr "その他の変更と修正"

#: ../../whatsnew/2.3.rst:1962
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr "いつものように、たくさんのほかの改善とバグフィックスがソースツリー全体に渡って散らばっています。CVS 変更ログを検索すると、Python 2.2 から 2.3 にかけて適用されたパッチは 523、バグ修正は 514 ありました。いずれも少なく見積もって、です。"

#: ../../whatsnew/2.3.rst:1967
msgid "Some of the more notable changes are:"
msgstr "ほかの、さらに特筆すべき変更のいくつかを挙げます:"

#: ../../whatsnew/2.3.rst:1969
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it"
" can be set by the Python program as part of its execution."
msgstr ""

#: ../../whatsnew/2.3.rst:1975
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""

#: ../../whatsnew/2.3.rst:1981
msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""

#: ../../whatsnew/2.3.rst:1984
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this"
" opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""

#: ../../whatsnew/2.3.rst:1992
msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""

#: ../../whatsnew/2.3.rst:1995
msgid ""
"C extensions that access the :attr:`f_lineno` field of frame objects should "
"instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will have the"
" added effect of making the code work as desired under \"python -O\" in "
"earlier versions of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:2000
msgid ""
"A nifty new feature is that trace functions can now assign to the "
":attr:`f_lineno` attribute of frame objects, changing the line that will be "
"executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger"
" taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""

#: ../../whatsnew/2.3.rst:2009
msgid "Porting to Python 2.3"
msgstr "Python 2.3 への移植"

#: ../../whatsnew/2.3.rst:2011
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr "このセクションでは前述の変更により必要となるかもしれないコードの変更を列挙します:"

#: ../../whatsnew/2.3.rst:2014
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in"
" your code, a different name must be chosen."
msgstr ""

#: ../../whatsnew/2.3.rst:2017
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""

#: ../../whatsnew/2.3.rst:2020
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""

#: ../../whatsnew/2.3.rst:2024
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the"
" top of the file.  See section :ref:`section-encodings` for more "
"information."
msgstr ""

#: ../../whatsnew/2.3.rst:2028
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings."
" Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""

#: ../../whatsnew/2.3.rst:2033
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a "
":exc:`FutureWarning`. Currently they're stored as 32-bit numbers and result "
"in a negative value, but in Python 2.4 they'll become positive long "
"integers."
msgstr ""

#: ../../whatsnew/2.3.rst:2037
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""

#: ../../whatsnew/2.3.rst:2044
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr ""

#: ../../whatsnew/2.3.rst:2046
msgid ""
"The Distutils :func:`setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the new"
" :func:`get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""

#: ../../whatsnew/2.3.rst:2059
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""

#: ../../whatsnew/2.3.rst:2062
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""

#: ../../whatsnew/2.3.rst:2071
msgid "Acknowledgements"
msgstr "謝辞"

#: ../../whatsnew/2.3.rst:2073
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article:"
" Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von"
" Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr "著者は提案の申し出や修正、様々なこの記事の草稿の助けをしてくれた以下の人々に感謝します:  Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, Scott David Daniels, Fred L. Drake, Jr., David Fraser, Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
