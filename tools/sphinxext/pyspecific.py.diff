@@ -25,24 +25,25 @@
     self.body.append(self.starttag(node, 'p', CLASS=node['type']))
     text = versionlabels[node['type']] % node['version']
     if len(node):
         text += ': '
     else:
         text += '.'
     self.body.append('<span class="versionmodified">%s</span>' % text)
 
 from sphinx.writers.html import HTMLTranslator
 from sphinx.locale import versionlabels
 HTMLTranslator.visit_versionmodified = new_visit_versionmodified
 
+
 # Support for marking up and linking to bugs.python.org issues
 
 def issue_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):
     issue = utils.unescape(text)
     text = 'issue ' + issue
     refnode = nodes.reference(text, text, refuri=ISSUE_URI % issue)
     return [refnode], []
 
 
 # Support for marking up implementation details
 
 from sphinx.util.compat import Directive
@@ -90,67 +91,58 @@
     'string-conversions', 'string-methods', 'strings', 'subscriptions', 'truth',
     'try', 'types', 'typesfunctions', 'typesmapping', 'typesmethods',
     'typesmodules', 'typesseq', 'typesseq-mutable', 'unary', 'while', 'with',
     'yield'
 ]
 
 from os import path
 from time import asctime
 from pprint import pformat
 from docutils.io import StringOutput
 from docutils.utils import new_document
 
-try:
-    from sphinx.builders import Builder
-except ImportError:
-    # using Sphinx < 0.6, which has a different package layout
-    from sphinx.builder import Builder
-    # monkey-patch toctree directive to accept (and ignore) the :numbered: flag
-    from sphinx.directives.other import toctree_directive
-    toctree_directive.options['numbered'] = toctree_directive.options['glob']
-
-try:
-    from sphinx.writers.text import TextWriter
-except ImportError:
-    from sphinx.textwriter import TextWriter
+from sphinx.builders import Builder
+from sphinx.writers.text import TextWriter
 
 
 class PydocTopicsBuilder(Builder):
     name = 'pydoc-topics'
 
     def init(self):
         self.topics = {}
 
     def get_outdated_docs(self):
         return 'all pydoc topics'
 
     def get_target_uri(self, docname, typ=None):
         return ''  # no URIs
 
     def write(self, *ignored):
         writer = TextWriter(self)
-        for label in self.status_iterator(pydoc_topic_labels, 'building topics... '):
+        for label in self.status_iterator(pydoc_topic_labels,
+                                          'building topics... ',
+                                          length=len(pydoc_topic_labels)):
             if label not in self.env.labels:
                 self.warn('label %r not in documentation' % label)
                 continue
             docname, labelid, sectname = self.env.labels[label]
             doctree = self.env.get_and_resolve_doctree(docname, self)
             document = new_document('<section node>')
             document.append(doctree.ids[labelid])
             destination = StringOutput(encoding='utf-8')
             writer.write(document, destination)
             self.topics[label] = writer.output
 
     def finish(self):
-        f = open(path.join(self.outdir, 'pydoc_topics.py'), 'w')
+        f = open(path.join(self.outdir, 'topics.py'), 'w')
         try:
             f.write('# Autogenerated by Sphinx on %s\n' % asctime())
             f.write('topics = ' + pformat(self.topics) + '\n')
         finally:
             f.close()
 
 
 # Support for checking for suspicious markup
 
 import suspicious
 
 
