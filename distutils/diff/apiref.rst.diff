--- r262/distutils/apiref.rst	2009-04-06 06:26:31.956399000 +0900
+++ r266/distutils/apiref.rst	2010-08-02 07:19:17.150851000 +0900
@@ -12,25 +12,25 @@
    :synopsis: The core Distutils functionality
 
 
 The :mod:`distutils.core` module is the only module that needs to be installed
 to use the Distutils. It provides the :func:`setup` (which is called from the
 setup script). Indirectly provides the  :class:`distutils.dist.Distribution` and
 :class:`distutils.cmd.Command` class.
 
 
 .. function:: setup(arguments)
 
    The basic do-everything function that does most everything you could ever ask
-   for from a Distutils method. See XXXXX
+   for from a Distutils method.
 
    The setup function takes a large number of arguments. These are laid out in the
    following table.
 
    +--------------------+--------------------------------+-------------------------------------------------------------+
    | argument name      | value                          | type                                                        |
    +====================+================================+=============================================================+
    | *name*             | The name of the package        | a string                                                    |
    +--------------------+--------------------------------+-------------------------------------------------------------+
    | *version*          | The version number of the      | See :mod:`distutils.version`                                |
    |                    | package                        |                                                             |
    +--------------------+--------------------------------+-------------------------------------------------------------+
@@ -877,42 +877,38 @@
 
 .. function:: make_archive(base_name, format[, root_dir=None, base_dir=None, verbose=0, dry_run=0])
 
    Create an archive file (eg. ``zip`` or ``tar``).  *base_name*  is the name of
    the file to create, minus any format-specific extension;  *format* is the
    archive format: one of ``zip``, ``tar``,  ``ztar``, or ``gztar``. *root_dir* is
    a directory that will be the root directory of the archive; ie. we typically
    ``chdir`` into *root_dir* before  creating the archive.  *base_dir* is the
    directory where we start  archiving from; ie. *base_dir* will be the common
    prefix of all files and directories in the archive.  *root_dir* and *base_dir*
    both default to the current directory.  Returns the name of the archive file.
 
-   .. warning::
-
-      This should be changed to support bz2 files
+   .. XXX This should be changed to support bz2 files.
 
 
 .. function:: make_tarball(base_name, base_dir[, compress='gzip', verbose=0, dry_run=0])
 
    'Create an (optional compressed) archive as a tar file from all files in and
    under *base_dir*. *compress* must be ``'gzip'`` (the default),  ``'compress'``,
    ``'bzip2'``, or ``None``.  Both :program:`tar` and the compression utility named
    by *compress* must be on the  default program search path, so this is probably
    Unix-specific.  The  output tar file will be named :file:`base_dir.tar`,
    possibly plus the appropriate compression extension (:file:`.gz`, :file:`.bz2`
    or :file:`.Z`).  Return the output filename.
 
-   .. warning::
-
-      This should be replaced with calls to the :mod:`tarfile` module.
+   .. XXX This should be replaced with calls to the :mod:`tarfile` module.
 
 
 .. function:: make_zipfile(base_name, base_dir[, verbose=0, dry_run=0])
 
    Create a zip file from all files in and under *base_dir*.  The output zip file
    will be named *base_dir* + :file:`.zip`.  Uses either the  :mod:`zipfile` Python
    module (if available) or the InfoZIP :file:`zip`  utility (if installed and
    found on the default search path).  If neither  tool is available, raises
    :exc:`DistutilsExecError`.   Returns the name of the output zip file.
 
 
 :mod:`distutils.dep_util` --- Dependency checking
@@ -1007,25 +1003,25 @@
    directories.  If *preserve_symlinks* is true, symlinks will be copied as
    symlinks (on platforms that support them!); otherwise (the default), the
    destination of the symlink will be copied.  *update* and *verbose* are the same
    as for :func:`copy_file`.
 
 
 .. function:: remove_tree(directory[, verbose=0, dry_run=0])
 
    Recursively remove *directory* and all files and directories underneath it. Any
    errors are ignored (apart from being reported to ``sys.stdout`` if *verbose* is
    true).
 
-**\*\*** Some of this could be replaced with the shutil module? **\*\***
+.. XXX Some of this could be replaced with the shutil module?
 
 
 :mod:`distutils.file_util` --- Single file operations
 =====================================================
 
 .. module:: distutils.file_util
    :synopsis: Utility functions for operating on single files
 
 
 This module contains some utility functions for operating on individual files.
 
 
@@ -1107,34 +1103,39 @@
    * ``irix64-6.2``
 
    For non-POSIX platforms, currently just returns ``sys.platform``.
 
    For Mac OS X systems the OS version reflects the minimal version on which
    binaries will run (that is, the value of ``MACOSX_DEPLOYMENT_TARGET``
    during the build of Python), not the OS version of the current system.
 
    For universal binary builds on Mac OS X the architecture value reflects
    the univeral binary status instead of the architecture of the current
    processor. For 32-bit universal binaries the architecture is ``fat``,
    for 64-bit universal binaries the architecture is ``fat64``, and
-   for 4-way universal binaries the architecture is ``universal``.
+   for 4-way universal binaries the architecture is ``universal``. Starting
+   from Python 2.7 and Python 3.2 the architecture ``fat3`` is used for
+   a 3-way universal build (ppc, i386, x86_64) and ``intel`` is used for
+   a univeral build with the i386 and x86_64 architectures
 
    Examples of returned values on Mac OS X:
 
    * ``macosx-10.3-ppc``
 
    * ``macosx-10.3-fat``
 
    * ``macosx-10.5-universal``
 
+   * ``macosx-10.6-intel``
+
    .. % XXX isn't this also provided by some other non-distutils module?
 
 
 .. function:: convert_path(pathname)
 
    Return 'pathname' as a name that will work on the native filesystem, i.e. split
    it on '/' and put it back together again using the current directory separator.
    Needed because filenames in the setup script are always supplied in Unix style,
    and have to be converted to the local convention before we can actually use them
    in the filesystem.  Raises :exc:`ValueError` on non-Unix-ish systems if
    *pathname* either  starts or ends with a slash.
 
@@ -1318,47 +1319,44 @@
 
 * short and long options are tied together
 
 * options have help strings, so :func:`fancy_getopt` could potentially  create a
   complete usage summary
 
 * options set attributes of a passed-in object
 
 * boolean options can have "negative aliases" --- eg. if :option:`--quiet` is
   the "negative alias" of :option:`--verbose`, then :option:`--quiet` on the
   command line sets *verbose* to false.
 
-**\*\*** Should be replaced with :mod:`optik` (which is also now known as
-:mod:`optparse` in Python 2.3 and later). **\*\***
+.. XXX Should be replaced with :mod:`optparse`.
 
 
 .. function:: fancy_getopt(options, negative_opt, object, args)
 
    Wrapper function. *options* is a list of ``(long_option, short_option,
    help_string)`` 3-tuples as described in the constructor for
    :class:`FancyGetopt`. *negative_opt* should be a dictionary mapping option names
    to option names, both the key and value should be in the *options* list.
    *object* is an object which will be used to store values (see the :meth:`getopt`
    method of the :class:`FancyGetopt` class). *args* is the argument list. Will use
    ``sys.argv[1:]`` if you  pass ``None`` as *args*.
 
 
 .. function:: wrap_text(text, width)
 
    Wraps *text* to less than *width* wide.
 
-   .. warning::
-
-      Should be replaced with :mod:`textwrap` (which is available  in Python 2.3 and
-      later).
+   .. XXX Should be replaced with :mod:`textwrap` (which is available in Python
+      2.3 and later).
 
 
 .. class:: FancyGetopt([option_table=None])
 
    The option_table is a list of 3-tuples: ``(long_option, short_option,
    help_string)``
 
    If an option takes an argument, its *long_option* should have ``'='`` appended;
    *short_option* should just be a single character, no ``':'`` in any case.
    *short_option* should be ``None`` if a *long_option*  doesn't have a
    corresponding *short_option*. All option tuples must have long options.
 
@@ -1389,46 +1387,41 @@
 .. method:: FancyGetopt.generate_help([header=None])
 
    Generate help text (a list of strings, one per suggested line of output) from
    the option table for this :class:`FancyGetopt` object.
 
    If supplied, prints the supplied *header* at the top of the help.
 
 
 :mod:`distutils.filelist` --- The FileList class
 ================================================
 
 .. module:: distutils.filelist
-   :synopsis: The FileList class, used for poking about the file system and building lists of
-              files.
+   :synopsis: The FileList class, used for poking about the file system and
+              building lists of files.
 
 
 This module provides the :class:`FileList` class, used for poking about the
 filesystem and building lists of files.
 
 
 :mod:`distutils.log` --- Simple PEP 282-style logging
 =====================================================
 
 .. module:: distutils.log
    :synopsis: A simple logging mechanism, 282-style
 
 
-.. warning::
-
-   Should be replaced with standard :mod:`logging` module.
+.. XXX Should be replaced with standard :mod:`logging` module.
 
-.. % \subsubsection{\module{} --- }
-.. % \declaremodule{standard}{distutils.magic}
-.. % \modulesynopsis{ }
 
 
 :mod:`distutils.spawn` --- Spawn a sub-process
 ==============================================
 
 .. module:: distutils.spawn
    :synopsis: Provides the spawn() function
 
 
 This module provides the :func:`spawn` function, a front-end to  various
 platform-specific functions for launching another program in a  sub-process.
 Also provides :func:`find_executable` to search the path for a given executable
@@ -1620,34 +1613,34 @@
    |                  | backslash, then N+1 physical   |         |
    |                  | lines will be joined to form   |         |
    |                  | one logical line.              |         |
    +------------------+--------------------------------+---------+
    | *collapse_join*  | strip leading whitespace from  | false   |
    |                  | lines that are joined to their |         |
    |                  | predecessor; only matters if   |         |
    |                  | ``(join_lines and not          |         |
    |                  | lstrip_ws)``                   |         |
    +------------------+--------------------------------+---------+
 
    Note that since *rstrip_ws* can strip the trailing newline, the semantics of
-   :meth:`readline` must differ from those of the builtin file object's
+   :meth:`readline` must differ from those of the built-in file object's
    :meth:`readline` method!  In particular, :meth:`readline`  returns ``None`` for
    end-of-file: an empty string might just be a  blank line (or an all-whitespace
    line), if *rstrip_ws* is true  but *skip_blanks* is not.
 
 
    .. method:: TextFile.open(filename)
 
-      Open a new file *filename*. This overrides any *file* or  *filename* constructor
-      arguments.
+      Open a new file *filename*.  This overrides any *file* or *filename*
+      constructor arguments.
 
 
    .. method:: TextFile.close()
 
       Close the current file and forget everything we know about it (including the
       filename and the current line number).
 
 
    .. method:: TextFile.warn(msg[,line=None])
 
       Print (to stderr) a warning message tied to the current logical line in the
       current file.  If the current logical line in the file spans multiple physical
@@ -1959,27 +1952,27 @@
 is a sample template in that directory called  :file:`command_template`. Copy
 this file to a new module with the same name as the new command you're
 implementing. This module should implement a class with the same name as the
 module (and the command). So, for instance, to create the command
 ``peel_banana`` (so that users can run ``setup.py peel_banana``), you'd copy
 :file:`command_template`  to :file:`distutils/command/peel_banana.py`, then edit
 it so that it's implementing the class :class:`peel_banana`, a subclass of
 :class:`distutils.cmd.Command`.
 
 Subclasses of :class:`Command` must define the following methods.
 
 
-.. method:: Command.initialize_options()(S)
+.. method:: Command.initialize_options()
 
-   et default values for all the options that this command supports.  Note that
+   Set default values for all the options that this command supports.  Note that
    these defaults may be overridden by other commands, by the setup script, by
    config files, or by the command-line.  Thus, this is not the place to code
    dependencies between options; generally, :meth:`initialize_options`
    implementations are just a bunch of ``self.foo = None`` assignments.
 
 
 .. method:: Command.finalize_options()
 
    Set final values for all the options that this command supports. This is
    always called as late as possible, ie.  after any option assignments from the
    command-line or from other commands have been done.  Thus, this is the place
    to to code option dependencies: if *foo* depends on *bar*, then it is safe to
