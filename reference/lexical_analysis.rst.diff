@@ -417,24 +417,25 @@
 String literals
 ---------------
 
 .. index:: single: string literal
 
 String literals are described by the following lexical definitions:
 
 .. index:: single: ASCII@ASCII
 
 .. productionlist::
    stringliteral: [`stringprefix`](`shortstring` | `longstring`)
    stringprefix: "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR"
+               : | "b" | "B" | "br" | "Br" | "bR" | "BR"
    shortstring: "'" `shortstringitem`* "'" | '"' `shortstringitem`* '"'
    longstring: "'''" `longstringitem`* "'''"
              : | '"""' `longstringitem`* '"""'
    shortstringitem: `shortstringchar` | `escapeseq`
    longstringitem: `longstringchar` | `escapeseq`
    shortstringchar: <any source character except "\" or newline or the quote>
    longstringchar: <any source character except "\">
    escapeseq: "\" <any ASCII character>
 
 One syntactic restriction not indicated by these productions is that whitespace
 is not allowed between the :token:`stringprefix` and the rest of the string
 literal. The source character set is defined by the encoding declaration; it is
@@ -449,26 +450,28 @@
 
 In plain English: String literals can be enclosed in matching single quotes
 (``'``) or double quotes (``"``).  They can also be enclosed in matching groups
 of three single or double quotes (these are generally referred to as
 *triple-quoted strings*).  The backslash (``\``) character is used to escape
 characters that otherwise have a special meaning, such as newline, backslash
 itself, or the quote character.  String literals may optionally be prefixed with
 a letter ``'r'`` or ``'R'``; such strings are called :dfn:`raw strings` and use
 different rules for interpreting backslash escape sequences.  A prefix of
 ``'u'`` or ``'U'`` makes the string a Unicode string.  Unicode strings use the
 Unicode character set as defined by the Unicode Consortium and ISO 10646.  Some
 additional escape sequences, described below, are available in Unicode strings.
-The two prefix characters may be combined; in this case, ``'u'`` must appear
-before ``'r'``.
+A prefix of ``'b'`` or ``'B'`` is ignored in Python 2; it indicates that the
+literal should become a bytes literal in Python 3 (e.g. when code is
+automatically converted with 2to3).  A ``'u'`` or ``'b'`` prefix may be followed
+by an ``'r'`` prefix.
 
 In triple-quoted strings, unescaped newlines and quotes are allowed (and are
 retained), except that three unescaped quotes in a row terminate the string.  (A
 "quote" is the character used to open the string, i.e. either ``'`` or ``"``.)
 
 .. index::
    single: physical line
    single: escape sequence
    single: Standard C
    single: C
 
 Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in strings are
