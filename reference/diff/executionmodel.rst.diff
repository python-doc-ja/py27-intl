--- r262/reference/executionmodel.rst	2009-04-06 06:48:06.719229000 +0900
+++ r266/reference/executionmodel.rst	2010-03-22 04:29:04.684594000 +0900
@@ -103,44 +103,44 @@
 function definition or at the module level (the top-level code block).
 
 If a name binding operation occurs anywhere within a code block, all uses of the
 name within the block are treated as references to the current block.  This can
 lead to errors when a name is used within a block before it is bound. This rule
 is subtle.  Python lacks declarations and allows name binding operations to
 occur anywhere within a code block.  The local variables of a code block can be
 determined by scanning the entire text of the block for name binding operations.
 
 If the global statement occurs within a block, all uses of the name specified in
 the statement refer to the binding of that name in the top-level namespace.
 Names are resolved in the top-level namespace by searching the global namespace,
-i.e. the namespace of the module containing the code block, and the builtin
+i.e. the namespace of the module containing the code block, and the builtins
 namespace, the namespace of the module :mod:`__builtin__`.  The global namespace
-is searched first.  If the name is not found there, the builtin namespace is
+is searched first.  If the name is not found there, the builtins namespace is
 searched.  The global statement must precede all uses of the name.
 
 .. index:: pair: restricted; execution
 
-The built-in namespace associated with the execution of a code block is actually
+The builtins namespace associated with the execution of a code block is actually
 found by looking up the name ``__builtins__`` in its global namespace; this
 should be a dictionary or a module (in the latter case the module's dictionary
 is used).  By default, when in the :mod:`__main__` module, ``__builtins__`` is
 the built-in module :mod:`__builtin__` (note: no 's'); when in any other module,
 ``__builtins__`` is an alias for the dictionary of the :mod:`__builtin__` module
 itself.  ``__builtins__`` can be set to a user-created dictionary to create a
 weak form of restricted execution.
 
-.. note::
+.. impl-detail::
 
    Users should not touch ``__builtins__``; it is strictly an implementation
-   detail.  Users wanting to override values in the built-in namespace should
+   detail.  Users wanting to override values in the builtins namespace should
    :keyword:`import` the :mod:`__builtin__` (no 's') module and modify its
    attributes appropriately.
 
 .. index:: module: __main__
 
 The namespace for a module is automatically created the first time a module is
 imported.  The main module for a script is always called :mod:`__main__`.
 
 The global statement has the same scope as a name binding operation in the same
 block.  If the nearest enclosing scope for a free variable contains a global
 statement, the free variable is treated as a global.
 
@@ -222,25 +222,25 @@
 the program, or returns to its interactive main loop.  In either case, it prints
 a stack backtrace, except when the exception is  :exc:`SystemExit`.
 
 Exceptions are identified by class instances.  The :keyword:`except` clause is
 selected depending on the class of the instance: it must reference the class of
 the instance or a base class thereof.  The instance can be received by the
 handler and can carry additional information about the exceptional condition.
 
 Exceptions can also be identified by strings, in which case the
 :keyword:`except` clause is selected by object identity.  An arbitrary value can
 be raised along with the identifying string which can be passed to the handler.
 
-.. warning::
+.. note::
 
    Messages to exceptions are not part of the Python API.  Their contents may
    change from one version of Python to the next without warning and should not be
    relied on by code which will run under multiple versions of the interpreter.
 
 See also the description of the :keyword:`try` statement in section :ref:`try`
 and :keyword:`raise` statement in section :ref:`raise`.
 
 .. rubric:: Footnotes
 
 .. [#] This limitation occurs because the code that is executed by these operations is
    not available at the time the module is compiled.
