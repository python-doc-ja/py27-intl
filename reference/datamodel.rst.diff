@@ -57,24 +57,26 @@
 collection or omit it altogether --- it is a matter of implementation quality
 how garbage collection is implemented, as long as no objects are collected that
 are still reachable.
 
 .. impl-detail::
 
    CPython currently uses a reference-counting scheme with (optional) delayed
    detection of cyclically linked garbage, which collects most objects as soon
    as they become unreachable, but is not guaranteed to collect garbage
    containing circular references.  See the documentation of the :mod:`gc`
    module for information on controlling the collection of cyclic garbage.
    Other implementations act differently and CPython may change.
+   Do not depend on immediate finalization of objects when they become
+   unreachable (ex: always close files).
 
 Note that the use of the implementation's tracing or debugging facilities may
 keep objects alive that would normally be collectable. Also note that catching
 an exception with a ':keyword:`try`...\ :keyword:`except`' statement may keep
 objects alive.
 
 Some objects contain references to "external" resources such as open files or
 windows.  It is understood that these resources are freed when the object is
 garbage-collected, but since garbage collection is not guaranteed to happen,
 such objects also provide an explicit way to release the external resource,
 usually a :meth:`close` method. Programs are strongly recommended to explicitly
 close such objects.  The ':keyword:`try`...\ :keyword:`finally`' statement
@@ -680,25 +682,25 @@
       the module the function was defined in or ``None`` if unavailable.
 
    Built-in methods
       .. index::
          object: built-in method
          object: method
          pair: built-in; method
 
       This is really a different disguise of a built-in function, this time containing
       an object passed to the C function as an implicit extra argument.  An example of
       a built-in method is ``alist.append()``, assuming *alist* is a list object. In
       this case, the special read-only attribute :attr:`__self__` is set to the object
-      denoted by *list*.
+      denoted by *alist*.
 
    Class Types
       Class types, or "new-style classes," are callable.  These objects normally act
       as factories for new instances of themselves, but variations are possible for
       class types that override :meth:`__new__`.  The arguments of the call are passed
       to :meth:`__new__` and, in the typical case, to :meth:`__init__` to initialize
       the new instance.
 
    Classic Classes
       .. index::
          single: __init__() (object method)
          object: class
@@ -730,24 +732,31 @@
    equivalent to ``m.__dict__["x"]``. A module object does not contain the code
    object used to initialize the module (since it isn't needed once the
    initialization is done).
 
    Attribute assignment updates the module's namespace dictionary, e.g., ``m.x =
    1`` is equivalent to ``m.__dict__["x"] = 1``.
 
    .. index:: single: __dict__ (module attribute)
 
    Special read-only attribute: :attr:`__dict__` is the module's namespace as a
    dictionary object.
 
+   .. impl-detail::
+
+      Because of the way CPython clears module dictionaries, the module
+      dictionary will be cleared when the module falls out of scope even if the
+      dictionary still has live references.  To avoid this, copy the dictionary
+      or keep the module around while using its dictionary directly.
+
    .. index::
       single: __name__ (module attribute)
       single: __doc__ (module attribute)
       single: __file__ (module attribute)
       pair: module; namespace
 
    Predefined (writable) attributes: :attr:`__name__` is the module's name;
    :attr:`__doc__` is the module's documentation string, or ``None`` if
    unavailable; :attr:`__file__` is the pathname of the file from which the module
    was loaded, if it was loaded from a file. The :attr:`__file__` attribute is not
    present for C modules that are statically linked into the interpreter; for
    extension modules loaded dynamically from a shared library, it is the pathname
@@ -899,57 +908,57 @@
          single: bytecode
          object: code
 
       Code objects represent *byte-compiled* executable Python code, or :term:`bytecode`.
       The difference between a code object and a function object is that the function
       object contains an explicit reference to the function's globals (the module in
       which it was defined), while a code object contains no context; also the default
       argument values are stored in the function object, not in the code object
       (because they represent values calculated at run-time).  Unlike function
       objects, code objects are immutable and contain no references (directly or
       indirectly) to mutable objects.
 
+      .. index::
+         single: co_argcount (code object attribute)
+         single: co_code (code object attribute)
+         single: co_consts (code object attribute)
+         single: co_filename (code object attribute)
+         single: co_firstlineno (code object attribute)
+         single: co_flags (code object attribute)
+         single: co_lnotab (code object attribute)
+         single: co_name (code object attribute)
+         single: co_names (code object attribute)
+         single: co_nlocals (code object attribute)
+         single: co_stacksize (code object attribute)
+         single: co_varnames (code object attribute)
+         single: co_cellvars (code object attribute)
+         single: co_freevars (code object attribute)
+
       Special read-only attributes: :attr:`co_name` gives the function name;
       :attr:`co_argcount` is the number of positional arguments (including arguments
       with default values); :attr:`co_nlocals` is the number of local variables used
       by the function (including arguments); :attr:`co_varnames` is a tuple containing
       the names of the local variables (starting with the argument names);
       :attr:`co_cellvars` is a tuple containing the names of local variables that are
       referenced by nested functions; :attr:`co_freevars` is a tuple containing the
       names of free variables; :attr:`co_code` is a string representing the sequence
       of bytecode instructions; :attr:`co_consts` is a tuple containing the literals
       used by the bytecode; :attr:`co_names` is a tuple containing the names used by
       the bytecode; :attr:`co_filename` is the filename from which the code was
       compiled; :attr:`co_firstlineno` is the first line number of the function;
       :attr:`co_lnotab` is a string encoding the mapping from bytecode offsets to
       line numbers (for details see the source code of the interpreter);
       :attr:`co_stacksize` is the required stack size (including local variables);
       :attr:`co_flags` is an integer encoding a number of flags for the interpreter.
 
-      .. index::
-         single: co_argcount (code object attribute)
-         single: co_code (code object attribute)
-         single: co_consts (code object attribute)
-         single: co_filename (code object attribute)
-         single: co_firstlineno (code object attribute)
-         single: co_flags (code object attribute)
-         single: co_lnotab (code object attribute)
-         single: co_name (code object attribute)
-         single: co_names (code object attribute)
-         single: co_nlocals (code object attribute)
-         single: co_stacksize (code object attribute)
-         single: co_varnames (code object attribute)
-         single: co_cellvars (code object attribute)
-         single: co_freevars (code object attribute)
-
       .. index:: object: generator
 
       The following flag bits are defined for :attr:`co_flags`: bit ``0x04`` is set if
       the function uses the ``*arguments`` syntax to accept an arbitrary number of
       positional arguments; bit ``0x08`` is set if the function uses the
       ``**keywords`` syntax to accept arbitrary keyword arguments; bit ``0x20`` is set
       if the function is a generator.
 
       Future feature declarations (``from __future__ import division``) also use bits
       in :attr:`co_flags` to indicate whether a code object was compiled with a
       particular feature enabled: bit ``0x2000`` is set if the function was compiled
       with future division enabled; bits ``0x10`` and ``0x1000`` were used in earlier
@@ -1344,26 +1353,25 @@
    some important notes on creating :term:`hashable` objects which support
    custom comparison operations and are usable as dictionary keys.
 
    There are no swapped-argument versions of these methods (to be used when the
    left argument does not support the operation but the right argument does);
    rather, :meth:`__lt__` and :meth:`__gt__` are each other's reflection,
    :meth:`__le__` and :meth:`__ge__` are each other's reflection, and
    :meth:`__eq__` and :meth:`__ne__` are their own reflection.
 
    Arguments to rich comparison methods are never coerced.
 
    To automatically generate ordering operations from a single root operation,
-   see the `Total Ordering recipe in the ASPN cookbook
-   <http://code.activestate.com/recipes/576529/>`_\.
+   see :func:`functools.total_ordering`.
 
 .. method:: object.__cmp__(self, other)
 
    .. index::
       builtin: cmp
       single: comparisons
 
    Called by comparison operations if rich comparison (see above) is not
    defined.  Should return a negative integer if ``self < other``, zero if
    ``self == other``, a positive integer if ``self > other``.  If no
    :meth:`__cmp__`, :meth:`__eq__` or :meth:`__ne__` operation is defined, class
    instances are compared by object identity ("address").  See also the
@@ -1522,29 +1530,29 @@
 
       This method may still be bypassed when looking up special methods as the
       result of implicit invocation via language syntax or built-in functions.
       See :ref:`new-style-special-lookup`.
 
 
 .. _descriptors:
 
 Implementing Descriptors
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
 The following methods only apply when an instance of the class containing the
-method (a so-called *descriptor* class) appears in the class dictionary of
-another new-style class, known as the *owner* class. In the examples below, "the
-attribute" refers to the attribute whose name is the key of the property in the
-owner class' ``__dict__``.  Descriptors can only be implemented as new-style
-classes themselves.
+method (a so-called *descriptor* class) appears in an *owner* class (the
+descriptor must be in either the owner's class dictionary or in the class
+dictionary for one of its parents).  In the examples below, "the attribute"
+refers to the attribute whose name is the key of the property in the owner
+class' :attr:`__dict__`.
 
 
 .. method:: object.__get__(self, instance, owner)
 
    Called to get the attribute of the owner class (class attribute access) or of an
    instance of that class (instance attribute access). *owner* is always the owner
    class, while *instance* is the instance that the attribute was accessed through,
    or ``None`` when the attribute is accessed through the *owner*.  This method
    should return the (computed) attribute value or raise an :exc:`AttributeError`
    exception.
 
 
@@ -1591,25 +1599,25 @@
 Instance Binding
    If binding to a new-style object instance, ``a.x`` is transformed into the call:
    ``type(a).__dict__['x'].__get__(a, type(a))``.
 
 Class Binding
    If binding to a new-style class, ``A.x`` is transformed into the call:
    ``A.__dict__['x'].__get__(None, A)``.
 
 Super Binding
    If ``a`` is an instance of :class:`super`, then the binding ``super(B,
    obj).m()`` searches ``obj.__class__.__mro__`` for the base class ``A``
    immediately preceding ``B`` and then invokes the descriptor with the call:
-   ``A.__dict__['m'].__get__(obj, A)``.
+   ``A.__dict__['m'].__get__(obj, obj.__class__)``.
 
 For instance bindings, the precedence of descriptor invocation depends on the
 which descriptor methods are defined.  A descriptor can define any combination
 of :meth:`__get__`, :meth:`__set__` and :meth:`__delete__`.  If it does not
 define :meth:`__get__`, then accessing the attribute will return the descriptor
 object itself unless there is a value in the object's instance dictionary.  If
 the descriptor defines :meth:`__set__` and/or :meth:`__delete__`, it is a data
 descriptor; if it defines neither, it is a non-data descriptor.  Normally, data
 descriptors define both :meth:`__get__` and :meth:`__set__`, while non-data
 descriptors have just the :meth:`__get__` method.  Data descriptors with
 :meth:`__set__` and :meth:`__get__` defined always override a redefinition in an
 instance dictionary.  In contrast, non-data descriptors can be overridden by
@@ -1764,44 +1772,44 @@
 
 
 Customizing instance and subclass checks
 ----------------------------------------
 
 .. versionadded:: 2.6
 
 The following methods are used to override the default behavior of the
 :func:`isinstance` and :func:`issubclass` built-in functions.
 
 In particular, the metaclass :class:`abc.ABCMeta` implements these methods in
 order to allow the addition of Abstract Base Classes (ABCs) as "virtual base
-classes" to any class or type (including built-in types), and including to other
+classes" to any class or type (including built-in types), including other
 ABCs.
 
 .. method:: class.__instancecheck__(self, instance)
 
    Return true if *instance* should be considered a (direct or indirect)
    instance of *class*. If defined, called to implement ``isinstance(instance,
    class)``.
 
 
 .. method:: class.__subclasscheck__(self, subclass)
 
    Return true if *subclass* should be considered a (direct or indirect)
    subclass of *class*.  If defined, called to implement ``issubclass(subclass,
    class)``.
 
 
 Note that these methods are looked up on the type (metaclass) of a class.  They
 cannot be defined as class methods in the actual class.  This is consistent with
-the lookup of special methods that are called on instances, only that in this
+the lookup of special methods that are called on instances, only in this
 case the instance is itself a class.
 
 .. seealso::
 
    :pep:`3119` - Introducing Abstract Base Classes
       Includes the specification for customizing :func:`isinstance` and
       :func:`issubclass` behavior through :meth:`__instancecheck__` and
       :meth:`__subclasscheck__`, with motivation for this functionality in the
       context of adding Abstract Base Classes (see the :mod:`abc` module) to the
       language.
 
 
@@ -2304,31 +2312,33 @@
   repetition, and the other is an integer (:class:`int` or :class:`long`),
   sequence repetition is invoked.
 
 *
 
   Rich comparisons (implemented by methods :meth:`__eq__` and so on) never use
   coercion.  Three-way comparison (implemented by :meth:`__cmp__`) does use
   coercion under the same conditions as other binary operations use it.
 
 *
 
   In the current implementation, the built-in numeric types :class:`int`,
-  :class:`long` and :class:`float` do not use coercion; the type :class:`complex`
-  however does use coercion for binary operators and rich comparisons, despite
-  the above rules.  The difference can become apparent when subclassing these
-  types.  Over time, the type :class:`complex` may be fixed to avoid coercion.
+  :class:`long`, :class:`float`, and :class:`complex` do not use coercion.
   All these types implement a :meth:`__coerce__` method, for use by the built-in
   :func:`coerce` function.
 
+  .. versionchanged:: 2.7
+
+     The complex type no longer makes implicit calls to the :meth:`__coerce__`
+     method for mixed-type binary arithmetic operations.
+
 
 .. _context-managers:
 
 With Statement Context Managers
 -------------------------------
 
 .. versionadded:: 2.5
 
 A :dfn:`context manager` is an object that defines the runtime context to be
 established when executing a :keyword:`with` statement. The context manager
 handles the entry into, and the exit from, the desired runtime context for the
 execution of the block of code.  Context managers are normally invoked using the
