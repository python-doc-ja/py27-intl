--- rest25/library/htmlparser.rst	2008-10-21 04:56:58.111060743 +0900
+++ rest26/library/htmlparser.rst	2008-10-21 05:03:04.957370594 +0900
@@ -1,37 +1,43 @@
 
 :mod:`HTMLParser` --- Simple HTML and XHTML parser
 ==================================================
 
 .. module:: HTMLParser
    :synopsis: A simple parser that can handle HTML and XHTML.
 
+.. note::
+
+   The :mod:`HTMLParser` module has been renamed to :mod:`html.parser` in Python
+   3.0.  The :term:`2to3` tool will automatically adapt imports when converting
+   your sources to 3.0.
+
 
 .. versionadded:: 2.2
 
 .. index::
    single: HTML
    single: XHTML
 
 This module defines a class :class:`HTMLParser` which serves as the basis for
 parsing text files formatted in HTML (HyperText Mark-up Language) and XHTML.
 Unlike the parser in :mod:`htmllib`, this parser is not based on the SGML parser
 in :mod:`sgmllib`.
 
 
 .. class:: HTMLParser()
 
    The :class:`HTMLParser` class is instantiated without arguments.
 
-   An HTMLParser instance is fed HTML data and calls handler functions when tags
+   An :class:`HTMLParser` instance is fed HTML data and calls handler functions when tags
    begin and end.  The :class:`HTMLParser` class is meant to be overridden by the
    user to provide a desired behavior.
 
    Unlike the parser in :mod:`htmllib`, this parser does not check that end tags
    match start tags or call the end-tag handler for elements which are closed
    implicitly by closing an outer element.
 
 An exception is defined as well:
 
 
 .. exception:: HTMLParseError
 
@@ -74,30 +80,35 @@
 
    Return the text of the most recently opened start tag.  This should not normally
    be needed for structured processing, but may be useful in dealing with HTML "as
    deployed" or for re-generating input with minimal changes (whitespace between
    attributes can be preserved, etc.).
 
 
 .. method:: HTMLParser.handle_starttag(tag, attrs)
 
    This method is called to handle the start of a tag.  It is intended to be
    overridden by a derived class; the base class implementation does nothing.
 
-   The *tag* argument is the name of the tag converted to lower case.  The *attrs*
+   The *tag* argument is the name of the tag converted to lower case. The *attrs*
    argument is a list of ``(name, value)`` pairs containing the attributes found
-   inside the tag's ``<>`` brackets.  The *name* will be translated to lower case
-   and double quotes and backslashes in the *value* have been interpreted.  For
-   instance, for the tag ``<A HREF="http://www.cwi.nl/">``, this method would be
-   called as ``handle_starttag('a', [('href', 'http://www.cwi.nl/')])``.
+   inside the tag's ``<>`` brackets.  The *name* will be translated to lower case,
+   and quotes in the *value* have been removed, and character and entity references
+   have been replaced.  For instance, for the tag ``<A
+   HREF="http://www.cwi.nl/">``, this method would be called as
+   ``handle_starttag('a', [('href', 'http://www.cwi.nl/')])``.
+
+   .. versionchanged:: 2.6
+      All entity references from :mod:`htmlentitydefs` are now replaced in the attribute
+      values.
 
 
 .. method:: HTMLParser.handle_startendtag(tag, attrs)
 
    Similar to :meth:`handle_starttag`, but called when the parser encounters an
    XHTML-style empty tag (``<a .../>``).  This method may be overridden by
    subclasses which require this particular lexical information; the default
    implementation simple calls :meth:`handle_starttag` and :meth:`handle_endtag`.
 
 
 .. method:: HTMLParser.handle_endtag(tag)
 
