--- rest25/library/stringio.rst	2008-10-21 04:57:06.619062600 +0900
+++ rest26/library/stringio.rst	2008-10-21 05:03:04.741201998 +0900
@@ -1,23 +1,24 @@
 
 :mod:`StringIO` --- Read and write strings as files
 ===================================================
 
 .. module:: StringIO
    :synopsis: Read and write strings as if they were files.
 
 
 This module implements a file-like class, :class:`StringIO`, that reads and
 writes a string buffer (also known as *memory files*).  See the description of
-file objects for operations (section :ref:`bltin-file-objects`).
+file objects for operations (section :ref:`bltin-file-objects`). (For
+standard strings, see :class:`str` and :class:`unicode`.)
 
 
 .. class:: StringIO([buffer])
 
    When a :class:`StringIO` object is created, it can be initialized to an existing
    string by passing the string to the constructor. If no string is given, the
    :class:`StringIO` will start empty. In both cases, the initial file position
    starts at zero.
 
    The :class:`StringIO` object can accept either Unicode or 8-bit strings, but
    mixing the two may take some care.  If both are used, 8-bit strings that cannot
    be interpreted as 7-bit ASCII (that use the 8th bit) will cause a
@@ -68,24 +69,28 @@
 :mod:`StringIO` module.  Heavy use of :class:`StringIO.StringIO` objects can be
 made more efficient by using the function :func:`StringIO` from this module
 instead.
 
 Since this module provides a factory function which returns objects of built-in
 types, there's no way to build your own version using subclassing.  Use the
 original :mod:`StringIO` module in that case.
 
 Unlike the memory files implemented by the :mod:`StringIO` module, those
 provided by this module are not able to accept Unicode strings that cannot be
 encoded as plain ASCII strings.
 
+Calling :func:`StringIO` with a Unicode string parameter populates
+the object with the buffer representation of the Unicode string, instead of
+encoding the string. 
+
 Another difference from the :mod:`StringIO` module is that calling
 :func:`StringIO` with a string parameter creates a read-only object. Unlike an
 object created without a string parameter, it does not have write methods.
 These objects are not generally visible.  They turn up in tracebacks as
 :class:`StringI` and :class:`StringO`.
 
 The following data objects are provided as well:
 
 
 .. data:: InputType
 
    The type object of the objects created by calling :func:`StringIO` with a string
