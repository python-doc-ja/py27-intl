--- rest25/library/sys.rst	2008-10-21 04:57:07.195056637 +0900
+++ rest26/library/sys.rst	2008-10-21 05:03:04.829190300 +0900
@@ -8,32 +8,35 @@
 
 This module provides access to some variables used or maintained by the
 interpreter and to functions that interact strongly with the interpreter. It is
 always available.
 
 
 .. data:: argv
 
    The list of command line arguments passed to a Python script. ``argv[0]`` is the
    script name (it is operating system dependent whether this is a full pathname or
    not).  If the command was executed using the :option:`-c` command line option to
    the interpreter, ``argv[0]`` is set to the string ``'-c'``.  If no script name
-   was passed to the Python interpreter, ``argv`` has zero length.
+   was passed to the Python interpreter, ``argv[0]`` is the empty string.
+
+   To loop over the standard input, or the list of files given on the
+   command line, see the :mod:`fileinput` module.
 
 
 .. data:: byteorder
 
    An indicator of the native byte order.  This will have the value ``'big'`` on
-   big-endian (most-significant byte first) platforms, and ``'little'`` on little-
-   endian (least-significant byte first) platforms.
+   big-endian (most-significant byte first) platforms, and ``'little'`` on
+   little-endian (least-significant byte first) platforms.
 
    .. versionadded:: 2.0
 
 
 .. data:: subversion
 
    A triple (repo, branch, version) representing the Subversion information of the
    Python interpreter. *repo* is the name of the repository, ``'CPython'``.
    *branch* is a string of one of the forms ``'trunk'``, ``'branches/name'`` or
    ``'tags/name'``. *version* is the output of ``svnversion``, if the interpreter
    was built from a Subversion checkout; it contains the revision number (range)
    and possibly a trailing 'M' if there were local modifications. If the tree was
@@ -46,24 +49,35 @@
 .. data:: builtin_module_names
 
    A tuple of strings giving the names of all modules that are compiled into this
    Python interpreter.  (This information is not available in any other way ---
    ``modules.keys()`` only lists the imported modules.)
 
 
 .. data:: copyright
 
    A string containing the copyright pertaining to the Python interpreter.
 
 
+.. function:: _clear_type_cache()
+
+   Clear the internal type cache. The type cache is used to speed up attribute
+   and method lookups. Use the function *only* to drop unnecessary references
+   during reference leak debugging.
+
+   This function should be used for internal and specialized purposes only.
+
+   .. versionadded:: 2.6
+
+
 .. function:: _current_frames()
 
    Return a dictionary mapping each thread's identifier to the topmost stack frame
    currently active in that thread at the time the function is called. Note that
    functions in the :mod:`traceback` module can build the call stack given such a
    frame.
 
    This is most useful for debugging deadlock:  this function does not require the
    deadlocked threads' cooperation, and such threads' call stacks are frozen for as
    long as they remain deadlocked.  The frame returned for a non-deadlocked thread
    may bear no relationship to that thread's current activity by the time calling
    code examines the frame.
@@ -74,27 +88,27 @@
 
 
 .. data:: dllhandle
 
    Integer specifying the handle of the Python DLL. Availability: Windows.
 
 
 .. function:: displayhook(value)
 
    If *value* is not ``None``, this function prints it to ``sys.stdout``, and saves
    it in ``__builtin__._``.
 
-   ``sys.displayhook`` is called on the result of evaluating an expression entered
-   in an interactive Python session.  The display of these values can be customized
-   by assigning another one-argument function to ``sys.displayhook``.
+   ``sys.displayhook`` is called on the result of evaluating an :term:`expression`
+   entered in an interactive Python session.  The display of these values can be
+   customized by assigning another one-argument function to ``sys.displayhook``.
 
 
 .. function:: excepthook(type, value, traceback)
 
    This function prints out a given traceback and exception to ``sys.stderr``.
 
    When an exception is raised and uncaught, the interpreter calls
    ``sys.excepthook`` with three arguments, the exception class, exception
    instance, and a traceback object.  In an interactive session this happens just
    before control is returned to the prompt; in a Python program this happens just
    before the program exits.  The handling of such top-level exceptions can be
    customized by assigning another three-argument function to ``sys.excepthook``.
@@ -228,24 +242,106 @@
    exits.  Only one function may be installed in this way; to allow multiple
    functions which will be called at termination, use the :mod:`atexit` module.
 
    .. note::
 
       The exit function is not called when the program is killed by a signal, when a
       Python fatal internal error is detected, or when ``os._exit()`` is called.
 
    .. deprecated:: 2.4
       Use :mod:`atexit` instead.
 
 
+.. data:: flags
+
+   The struct sequence *flags* exposes the status of command line flags. The
+   attributes are read only.
+
+   +------------------------------+------------------------------------------+
+   | attribute                    | flag                                     |
+   +==============================+==========================================+
+   | :const:`debug`               | -d                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`py3k_warning`        | -3                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`division_warning`    | -Q                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`division_new`        | -Qnew                                    |
+   +------------------------------+------------------------------------------+
+   | :const:`inspect`             | -i                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`interactive`         | -i                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`optimize`            | -O or -OO                                |
+   +------------------------------+------------------------------------------+
+   | :const:`dont_write_bytecode` | -B                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`no_site`             | -S                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`ignore_environment`  | -E                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`tabcheck`            | -t or -tt                                |
+   +------------------------------+------------------------------------------+
+   | :const:`verbose`             | -v                                       |
+   +------------------------------+------------------------------------------+
+   | :const:`unicode`             | -U                                       |
+   +------------------------------+------------------------------------------+
+
+   .. versionadded:: 2.6
+
+
+.. data:: float_info
+
+   A structseq holding information about the float type. It contains low level
+   information about the precision and internal representation. Please study
+   your system's :file:`float.h` for more information.
+
+   +---------------------+--------------------------------------------------+
+   | attribute           |  explanation                                     |
+   +=====================+==================================================+
+   | :const:`epsilon`    | Difference between 1 and the next representable  |
+   |                     | floating point number                            |
+   +---------------------+--------------------------------------------------+
+   | :const:`dig`        | digits (see :file:`float.h`)                     |
+   +---------------------+--------------------------------------------------+
+   | :const:`mant_dig`   | mantissa digits (see :file:`float.h`)            |
+   +---------------------+--------------------------------------------------+
+   | :const:`max`        | maximum representable finite float               |
+   +---------------------+--------------------------------------------------+
+   | :const:`max_exp`    | maximum int e such that radix**(e-1) is in the   |
+   |                     | range of finite representable floats             |
+   +---------------------+--------------------------------------------------+
+   | :const:`max_10_exp` | maximum int e such that 10**e is in the          |
+   |                     | range of finite representable floats             |
+   +---------------------+--------------------------------------------------+
+   | :const:`min`        | Minimum positive normalizer float                |
+   +---------------------+--------------------------------------------------+
+   | :const:`min_exp`    | minimum int e such that radix**(e-1) is a        |
+   |                     | normalized float                                 |
+   +---------------------+--------------------------------------------------+
+   | :const:`min_10_exp` | minimum int e such that 10**e is a normalized    |
+   |                     | float                                            |
+   +---------------------+--------------------------------------------------+
+   | :const:`radix`      | radix of exponent                                |
+   +---------------------+--------------------------------------------------+
+   | :const:`rounds`     | addition rounds (see :file:`float.h`)            |
+   +---------------------+--------------------------------------------------+
+
+   .. note::
+
+      The information in the table is simplified.
+
+   .. versionadded:: 2.6
+
+
 .. function:: getcheckinterval()
 
    Return the interpreter's "check interval"; see :func:`setcheckinterval`.
 
    .. versionadded:: 2.3
 
 
 .. function:: getdefaultencoding()
 
    Return the name of the current default string encoding used by the Unicode
    implementation.
 
@@ -258,83 +354,129 @@
    The flag constants are defined in the :mod:`dl` and :mod:`DLFCN` modules.
    Availability: Unix.
 
    .. versionadded:: 2.2
 
 
 .. function:: getfilesystemencoding()
 
    Return the name of the encoding used to convert Unicode filenames into system
    file names, or ``None`` if the system default encoding is used. The result value
    depends on the operating system:
 
-* On Windows 9x, the encoding is "mbcs".
+   * On Windows 9x, the encoding is "mbcs".
 
-* On Mac OS X, the encoding is "utf-8".
+   * On Mac OS X, the encoding is "utf-8".
 
-* On Unix, the encoding is the user's preference according to the result of
+   * On Unix, the encoding is the user's preference according to the result of
      nl_langinfo(CODESET), or :const:`None` if the ``nl_langinfo(CODESET)`` failed.
 
-* On Windows NT+, file names are Unicode natively, so no conversion is
+   * On Windows NT+, file names are Unicode natively, so no conversion is
      performed. :func:`getfilesystemencoding` still returns ``'mbcs'``, as this is
      the encoding that applications should use when they explicitly want to convert
      Unicode strings to byte strings that are equivalent when used as file names.
 
    .. versionadded:: 2.3
 
 
 .. function:: getrefcount(object)
 
    Return the reference count of the *object*.  The count returned is generally one
    higher than you might expect, because it includes the (temporary) reference as
    an argument to :func:`getrefcount`.
 
 
 .. function:: getrecursionlimit()
 
    Return the current value of the recursion limit, the maximum depth of the Python
    interpreter stack.  This limit prevents infinite recursion from causing an
    overflow of the C stack and crashing Python.  It can be set by
    :func:`setrecursionlimit`.
 
 
+.. function:: getsizeof(object[, default])
+
+   Return the size of an object in bytes. The object can be any type of
+   object. All built-in objects will return correct results, but this
+   does not have to hold true for third-party extensions as it is implementation
+   specific.
+
+   The *default* argument allows to define a value which will be returned
+   if the object type does not provide means to retrieve the size and would
+   cause a `TypeError`. 
+
+   func:`getsizeof` calls the object's __sizeof__ method and adds an additional
+   garbage collector overhead if the object is managed by the garbage collector.
+
+   .. versionadded:: 2.6
+
+
 .. function:: _getframe([depth])
 
    Return a frame object from the call stack.  If optional integer *depth* is
    given, return the frame object that many calls below the top of the stack.  If
    that is deeper than the call stack, :exc:`ValueError` is raised.  The default
    for *depth* is zero, returning the frame at the top of the call stack.
 
    This function should be used for internal and specialized purposes only.
 
 
+.. function:: getprofile()
+
+   .. index::
+      single: profile function
+      single: profiler
+
+   Get the profiler function as set by :func:`setprofile`.
+
+   .. versionadded:: 2.6
+
+
+.. function:: gettrace()
+
+   .. index::
+      single: trace function
+      single: debugger
+
+   Get the trace function as set by :func:`settrace`.
+
+   .. note::
+
+      The :func:`gettrace` function is intended only for implementing debuggers,
+      profilers, coverage tools and the like. Its behavior is part of the
+      implementation platform, rather than part of the language definition,
+      and thus may not be available in all Python implementations.
+
+   .. versionadded:: 2.6
+
+
 .. function:: getwindowsversion()
 
    Return a tuple containing five components, describing the Windows version
    currently running.  The elements are *major*, *minor*, *build*, *platform*, and
    *text*.  *text* contains a string while all other values are integers.
 
    *platform* may be one of the following values:
 
-   +-----------------------------------------+-----------------------+
-   | Constant                                | Platform              |
-   +=========================================+=======================+
-   | :const:`0 (VER_PLATFORM_WIN32s)`        | Win32s on Windows 3.1 |
-   +-----------------------------------------+-----------------------+
-   | :const:`1 (VER_PLATFORM_WIN32_WINDOWS)` | Windows 95/98/ME      |
-   +-----------------------------------------+-----------------------+
-   | :const:`2 (VER_PLATFORM_WIN32_NT)`      | Windows NT/2000/XP    |
-   +-----------------------------------------+-----------------------+
-   | :const:`3 (VER_PLATFORM_WIN32_CE)`      | Windows CE            |
-   +-----------------------------------------+-----------------------+
+   +-----------------------------------------+-------------------------+
+   | Constant                                | Platform                |
+   +=========================================+=========================+
+   | :const:`0 (VER_PLATFORM_WIN32s)`        | Win32s on Windows 3.1   |
+   +-----------------------------------------+-------------------------+
+   | :const:`1 (VER_PLATFORM_WIN32_WINDOWS)` | Windows 95/98/ME        |
+   +-----------------------------------------+-------------------------+
+   | :const:`2 (VER_PLATFORM_WIN32_NT)`      | Windows NT/2000/XP/x64  |
+   +-----------------------------------------+-------------------------+
+   | :const:`3 (VER_PLATFORM_WIN32_CE)`      | Windows CE              |
+   +-----------------------------------------+-------------------------+
 
    This function wraps the Win32 :cfunc:`GetVersionEx` function; see the Microsoft
    documentation for more information about these fields.
 
    Availability: Windows.
 
    .. versionadded:: 2.3
 
 
 .. data:: hexversion
 
    The version number encoded as a single integer.  This is guaranteed to increase
@@ -356,38 +498,44 @@
    .. versionadded:: 1.5.2
 
 
 .. data:: last_type
           last_value
           last_traceback
 
    These three variables are not always defined; they are set when an exception is
    not handled and the interpreter prints an error message and a stack traceback.
    Their intended use is to allow an interactive user to import a debugger module
    and engage in post-mortem debugging without having to re-execute the command
    that caused the error.  (Typical use is ``import pdb; pdb.pm()`` to enter the
-   post-mortem debugger; see chapter :ref:`debugger`, "The Python Debugger," for
+   post-mortem debugger; see chapter :ref:`debugger` for
    more information.)
 
    The meaning of the variables is the same as that of the return values from
-   :func:`exc_info` above.  (Since there is only one interactive thread, thread-
-   safety is not a concern for these variables, unlike for ``exc_type`` etc.)
+   :func:`exc_info` above.  (Since there is only one interactive thread,
+   thread-safety is not a concern for these variables, unlike for ``exc_type``
+   etc.)
 
 
 .. data:: maxint
 
    The largest positive integer supported by Python's regular integer type.  This
    is at least 2\*\*31-1.  The largest negative integer is ``-maxint-1`` --- the
    asymmetry results from the use of 2's complement binary arithmetic.
 
+.. data:: maxsize
+
+   The largest positive integer supported by the platform's Py_ssize_t type,
+   and thus the maximum size lists, strings, dicts, and many other containers
+   can have.
 
 .. data:: maxunicode
 
    An integer giving the largest supported code point for a Unicode character.  The
    value of this depends on the configuration option that specifies whether Unicode
    characters are stored as UCS-2 or UCS-4.
 
 
 .. data:: modules
 
    .. index:: builtin: reload
 
@@ -412,27 +560,44 @@
    ``path[0]`` is the empty string, which directs Python to search modules in the
    current directory first.  Notice that the script directory is inserted *before*
    the entries inserted as a result of :envvar:`PYTHONPATH`.
 
    A program is free to modify this list for its own purposes.
 
    .. versionchanged:: 2.3
       Unicode strings are no longer ignored.
 
 
 .. data:: platform
 
-   This string contains a platform identifier, e.g. ``'sunos5'`` or ``'linux1'``.
-   This can be used to append platform-specific components to ``path``, for
-   instance.
+   This string contains a platform identifier that can be used to append
+   platform-specific components to :data:`sys.path`, for instance.
+
+   For Unix systems, this is the lowercased OS name as returned by ``uname -s``
+   with the first part of the version as returned by ``uname -r`` appended,
+   e.g. ``'sunos5'`` or ``'linux2'``, *at the time when Python was built*.
+   For other systems, the values are:
+
+   ================ ===========================
+   System           :data:`platform` value
+   ================ ===========================
+   Windows          ``'win32'``
+   Windows/Cygwin   ``'cygwin'``
+   Mac OS X         ``'darwin'``
+   Mac OS 9         ``'mac'``
+   OS/2             ``'os2'``
+   OS/2 EMX         ``'os2emx'``
+   RiscOS           ``'riscos'``
+   AtheOS           ``'atheos'``
+   ================ ===========================
 
 
 .. data:: prefix
 
    A string giving the site-specific directory prefix where the platform
    independent Python files are installed; by default, this is the string
    ``'/usr/local'``.  This can be set at build time with the :option:`--prefix`
    argument to the :program:`configure` script.  The main collection of Python
    library modules is installed in the directory ``prefix + '/lib/pythonversion'``
    while the platform independent header files (all except :file:`pyconfig.h`) are
    stored in ``prefix + '/include/pythonversion'``, where *version* is equal to
    ``version[:3]``.
@@ -444,45 +609,63 @@
    .. index::
       single: interpreter prompts
       single: prompts, interpreter
 
    Strings specifying the primary and secondary prompt of the interpreter.  These
    are only defined if the interpreter is in interactive mode.  Their initial
    values in this case are ``'>>> '`` and ``'... '``.  If a non-string object is
    assigned to either variable, its :func:`str` is re-evaluated each time the
    interpreter prepares to read a new interactive command; this can be used to
    implement a dynamic prompt.
 
 
+.. data:: py3kwarning
+
+   Bool containing the status of the Python 3.0 warning flag. It's ``True``
+   when Python is started with the -3 option.
+
+   .. versionadded:: 2.6
+
+
+.. data:: dont_write_bytecode
+
+   If this is true, Python won't try to write ``.pyc`` or ``.pyo`` files on the
+   import of source modules.  This value is initially set to ``True`` or ``False``
+   depending on the ``-B`` command line option and the ``PYTHONDONTWRITEBYTECODE``
+   environment variable, but you can set it yourself to control bytecode file
+   generation.
+
+   .. versionadded:: 2.6
+
+
 .. function:: setcheckinterval(interval)
 
    Set the interpreter's "check interval".  This integer value determines how often
    the interpreter checks for periodic things such as thread switches and signal
    handlers.  The default is ``100``, meaning the check is performed every 100
    Python virtual instructions. Setting it to a larger value may increase
    performance for programs using threads.  Setting it to a value ``<=`` 0 checks
    every virtual instruction, maximizing responsiveness as well as overhead.
 
 
 .. function:: setdefaultencoding(name)
 
    Set the current default string encoding used by the Unicode implementation.  If
    *name* does not match any available encoding, :exc:`LookupError` is raised.
    This function is only intended to be used by the :mod:`site` module
    implementation and, where needed, by :mod:`sitecustomize`.  Once used by the
    :mod:`site` module, it is removed from the :mod:`sys` module's namespace.
 
-   .. % Note that \refmodule{site} is not imported if
-   .. % the \programopt{-S} option is passed to the interpreter, in which
-   .. % case this function will remain available.
+   .. Note that :mod:`site` is not imported if the :option:`-S` option is passed
+      to the interpreter, in which case this function will remain available.
 
    .. versionadded:: 2.0
 
 
 .. function:: setdlopenflags(n)
 
    Set the flags used by the interpreter for :cfunc:`dlopen` calls, such as when
    the interpreter loads extension modules.  Among other things, this will enable a
    lazy resolving of symbols when importing a module, if called as
    ``sys.setdlopenflags(0)``.  To share symbols across extension modules, call as
    ``sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)``.  Symbolic names for the
    flag modules can be either found in the :mod:`dl` module, or in the :mod:`DLFCN`
@@ -519,27 +702,27 @@
    The highest possible limit is platform-dependent.  A user may need to set the
    limit higher when she has a program that requires deep recursion and a platform
    that supports a higher limit.  This should be done with care, because a too-high
    limit can lead to a crash.
 
 
 .. function:: settrace(tracefunc)
 
    .. index::
       single: trace function
       single: debugger
 
-   Set the system's trace function, which allows you to implement a Python source
-   code debugger in Python.  See section :ref:`debugger-hooks`, "How It Works," in
-   the chapter on the Python debugger.  The function is thread-specific; for a
+   Set the system's trace function, which allows you to implement a Python
+   source code debugger in Python.  See section :ref:`debugger-hooks` in the
+   chapter on the Python debugger.  The function is thread-specific; for a
    debugger to support multiple threads, it must be registered using
    :func:`settrace` for each thread being debugged.
 
    .. note::
 
       The :func:`settrace` function is intended only for implementing debuggers,
       profilers, coverage tools and the like. Its behavior is part of the
       implementation platform, rather than part of the language definition, and thus
       may not be available in all Python implementations.
 
 
 .. function:: settscdump(on_flag)
@@ -554,30 +737,30 @@
 
 .. data:: stdin
           stdout
           stderr
 
    .. index::
       builtin: input
       builtin: raw_input
 
    File objects corresponding to the interpreter's standard input, output and error
    streams.  ``stdin`` is used for all interpreter input except for scripts but
    including calls to :func:`input` and :func:`raw_input`.  ``stdout`` is used for
-   the output of :keyword:`print` and expression statements and for the prompts of
-   :func:`input` and :func:`raw_input`. The interpreter's own prompts and (almost
-   all of) its error messages go to ``stderr``.  ``stdout`` and ``stderr`` needn't
-   be built-in file objects: any object is acceptable as long as it has a
-   :meth:`write` method that takes a string argument.  (Changing these objects
-   doesn't affect the standard I/O streams of processes executed by
+   the output of :keyword:`print` and :term:`expression` statements and for the
+   prompts of :func:`input` and :func:`raw_input`. The interpreter's own prompts
+   and (almost all of) its error messages go to ``stderr``.  ``stdout`` and
+   ``stderr`` needn't be built-in file objects: any object is acceptable as long
+   as it has a :meth:`write` method that takes a string argument.  (Changing these 
+   objects doesn't affect the standard I/O streams of processes executed by
    :func:`os.popen`, :func:`os.system` or the :func:`exec\*` family of functions in
    the :mod:`os` module.)
 
 
 .. data:: __stdin__
           __stdout__
           __stderr__
 
    These objects contain the original values of ``stdin``, ``stderr`` and
    ``stdout`` at the start of the program.  They are used during finalization, and
    could be useful to restore the actual files to known working file objects in
    case they have been overwritten with a broken object.
