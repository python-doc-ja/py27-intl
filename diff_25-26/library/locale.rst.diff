--- rest25/library/locale.rst	2008-10-21 04:56:58.975046211 +0900
+++ rest26/library/locale.rst	2008-10-21 05:03:05.197185218 +0900
@@ -520,27 +520,27 @@
 If, when coding a module for general use, you need a locale independent version
 of an operation that is affected by the locale (such as :func:`string.lower`, or
 certain formats used with :func:`time.strftime`), you will have to find a way to
 do it without using the standard library routine.  Even better is convincing
 yourself that using locale settings is okay.  Only as a last resort should you
 document that your module is not compatible with non-\ ``C`` locale settings.
 
 .. index:: module: string
 
 The case conversion functions in the :mod:`string` module are affected by the
 locale settings.  When a call to the :func:`setlocale` function changes the
 :const:`LC_CTYPE` settings, the variables ``string.lowercase``,
-``string.uppercase`` and ``string.letters`` are recalculated.  Note that this
-code that uses these variable through ':keyword:`from` ... :keyword:`import`
-...', e.g. ``from string import letters``, is not affected by subsequent
+``string.uppercase`` and ``string.letters`` are recalculated.  Note that code
+that uses these variable through ':keyword:`from` ... :keyword:`import` ...',
+e.g. ``from string import letters``, is not affected by subsequent
 :func:`setlocale` calls.
 
 The only way to perform numeric operations according to the locale is to use the
 special functions defined by this module: :func:`atof`, :func:`atoi`,
 :func:`format`, :func:`str`.
 
 
 .. _embedding-locale:
 
 For extension writers and programs that embed Python
 ----------------------------------------------------
 
