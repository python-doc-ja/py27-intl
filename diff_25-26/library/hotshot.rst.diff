--- rest25/library/hotshot.rst	2008-10-21 04:56:57.987051092 +0900
+++ rest26/library/hotshot.rst	2008-10-21 05:03:05.109186579 +0900
@@ -9,30 +9,30 @@
 
 
 .. versionadded:: 2.2
 
 This module provides a nicer interface to the :mod:`_hotshot` C module. Hotshot
 is a replacement for the existing :mod:`profile` module. As it's written mostly
 in C, it should result in a much smaller performance impact than the existing
 :mod:`profile` module.
 
 .. note::
 
    The :mod:`hotshot` module focuses on minimizing the overhead while profiling, at
-   the expense of long data post-processing times. For common usages it is
+   the expense of long data post-processing times. For common usage it is
    recommended to use :mod:`cProfile` instead. :mod:`hotshot` is not maintained and
    might be removed from the standard library in the future.
 
 .. versionchanged:: 2.5
-   the results should be more meaningful than in the past: the timing core
+   The results should be more meaningful than in the past: the timing core
    contained a critical bug.
 
 .. warning::
 
    The :mod:`hotshot` profiler does not yet work well with threads. It is useful to
    use an unthreaded script to run the profiler over the code you're interested in
    measuring if at all possible.
 
 
 .. class:: Profile(logfile[, lineevents[, linetimings]])
 
    The profiler object. The argument *logfile* is the name of a log file to use for
@@ -42,66 +42,66 @@
    whether to record timing information. It defaults to ``1`` (store timing
    information).
 
 
 .. _hotshot-objects:
 
 Profile Objects
 ---------------
 
 Profile objects have the following methods:
 
 
-.. method:: XXX Class.addinfo(key, value)
+.. method:: Profile.addinfo(key, value)
 
    Add an arbitrary labelled value to the profile output.
 
 
-.. method:: XXX Class.close()
+.. method:: Profile.close()
 
    Close the logfile and terminate the profiler.
 
 
-.. method:: XXX Class.fileno()
+.. method:: Profile.fileno()
 
    Return the file descriptor of the profiler's log file.
 
 
-.. method:: XXX Class.run(cmd)
+.. method:: Profile.run(cmd)
 
    Profile an :keyword:`exec`\ -compatible string in the script environment. The
    globals from the :mod:`__main__` module are used as both the globals and locals
    for the script.
 
 
-.. method:: XXX Class.runcall(func, *args, **keywords)
+.. method:: Profile.runcall(func, *args, **keywords)
 
    Profile a single call of a callable. Additional positional and keyword arguments
    may be passed along; the result of the call is returned, and exceptions are
    allowed to propagate cleanly, while ensuring that profiling is disabled on the
    way out.
 
 
-.. method:: XXX Class.runctx(cmd, globals, locals)
+.. method:: Profile.runctx(cmd, globals, locals)
 
    Evaluate an :keyword:`exec`\ -compatible string in a specific environment. The
    string is compiled before profiling begins.
 
 
-.. method:: XXX Class.start()
+.. method:: Profile.start()
 
    Start the profiler.
 
 
-.. method:: XXX Class.stop()
+.. method:: Profile.stop()
 
    Stop the profiler.
 
 
 Using hotshot data
 ------------------
 
 .. module:: hotshot.stats
    :synopsis: Statistical analysis for Hotshot
 
 
 .. versionadded:: 2.2
