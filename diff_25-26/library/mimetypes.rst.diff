--- rest25/library/mimetypes.rst	2008-10-21 04:57:00.279048620 +0900
+++ rest26/library/mimetypes.rst	2008-10-21 05:03:05.145273857 +0900
@@ -30,29 +30,30 @@
    Guess the type of a file based on its filename or URL, given by *filename*.  The
    return value is a tuple ``(type, encoding)`` where *type* is ``None`` if the
    type can't be guessed (missing or unknown suffix) or a string of the form
    ``'type/subtype'``, usable for a MIME :mailheader:`content-type` header.
 
    *encoding* is ``None`` for no encoding or the name of the program used to encode
    (e.g. :program:`compress` or :program:`gzip`). The encoding is suitable for use
    as a :mailheader:`Content-Encoding` header, *not* as a
    :mailheader:`Content-Transfer-Encoding` header. The mappings are table driven.
    Encoding suffixes are case sensitive; type suffixes are first tried case
    sensitively, then case insensitively.
 
-   Optional *strict* is a flag specifying whether the list of known MIME types is
-   limited to only the official types `registered with IANA <http://www.isi.edu/in-
-   notes/iana/assignments/media-types>`_ are recognized.  When *strict* is true
-   (the default), only the IANA types are supported; when *strict* is false, some
-   additional non-standard but commonly used MIME types are also recognized.
+   Optional *strict* is a flag specifying whether the list of known MIME types
+   is limited to only the official types `registered with IANA
+   <http://www.iana.org/assignments/media-types/>`_ are recognized.
+   When *strict* is true (the default), only the IANA types are supported; when
+   *strict* is false, some additional non-standard but commonly used MIME types
+   are also recognized.
 
 
 .. function:: guess_all_extensions(type[, strict])
 
    Guess the extensions for a file based on its MIME type, given by *type*. The
    return value is a list of strings giving all possible filename extensions,
    including the leading dot (``'.'``).  The extensions are not guaranteed to have
    been associated with any particular data stream, but would be mapped to the MIME
    type *type* by :func:`guess_type`.
 
    Optional *strict* has the same meaning as with the :func:`guess_type` function.
 
@@ -86,26 +87,26 @@
    Load the type map given in the file *filename*, if it exists.  The  type map is
    returned as a dictionary mapping filename extensions, including the leading dot
    (``'.'``), to strings of the form ``'type/subtype'``.  If the file *filename*
    does not exist or cannot be read, ``None`` is returned.
 
 
 .. function:: add_type(type, ext[, strict])
 
    Add a mapping from the mimetype *type* to the extension *ext*. When the
    extension is already known, the new type will replace the old one. When the type
    is already known the extension will be added to the list of known extensions.
 
-   When *strict* is the mapping will added to the official MIME types, otherwise to
-   the non-standard ones.
+   When *strict* is True (the default), the mapping will added to the official MIME
+   types, otherwise to the non-standard ones.
 
 
 .. data:: inited
 
    Flag indicating whether or not the global data structures have been initialized.
    This is set to true by :func:`init`.
 
 
 .. data:: knownfiles
 
    .. index:: single: file; mime.types
 
@@ -169,63 +170,63 @@
    'application/x-tar-gz'
 
 
 .. _mimetypes-objects:
 
 MimeTypes Objects
 -----------------
 
 :class:`MimeTypes` instances provide an interface which is very like that of the
 :mod:`mimetypes` module.
 
 
-.. data:: suffix_map
+.. attribute:: MimeTypes.suffix_map
 
    Dictionary mapping suffixes to suffixes.  This is used to allow recognition of
    encoded files for which the encoding and the type are indicated by the same
    extension.  For example, the :file:`.tgz` extension is mapped to :file:`.tar.gz`
    to allow the encoding and type to be recognized separately.  This is initially a
    copy of the global ``suffix_map`` defined in the module.
 
 
-.. data:: encodings_map
+.. attribute:: MimeTypes.encodings_map
 
    Dictionary mapping filename extensions to encoding types.  This is initially a
    copy of the global ``encodings_map`` defined in the module.
 
 
-.. data:: types_map
+.. attribute:: MimeTypes.types_map
 
    Dictionary mapping filename extensions to MIME types.  This is initially a copy
    of the global ``types_map`` defined in the module.
 
 
-.. data:: common_types
+.. attribute:: MimeTypes.common_types
 
    Dictionary mapping filename extensions to non-standard, but commonly found MIME
    types.  This is initially a copy of the global ``common_types`` defined in the
    module.
 
 
-.. method:: XXX Class.guess_extension(type[, strict])
+.. method:: MimeTypes.guess_extension(type[, strict])
 
    Similar to the :func:`guess_extension` function, using the tables stored as part
    of the object.
 
 
-.. method:: XXX Class.guess_type(url[, strict])
+.. method:: MimeTypes.guess_type(url[, strict])
 
    Similar to the :func:`guess_type` function, using the tables stored as part of
    the object.
 
 
-.. method:: XXX Class.read(path)
+.. method:: MimeTypes.read(path)
 
    Load MIME information from a file named *path*.  This uses :meth:`readfp` to
    parse the file.
 
 
-.. method:: XXX Class.readfp(file)
+.. method:: MimeTypes.readfp(file)
 
    Load MIME type information from an open file.  The file must have the format of
    the standard :file:`mime.types` files.
 
